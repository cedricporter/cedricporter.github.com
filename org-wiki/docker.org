#+TITLE: Docker
#+LINK_UP: index.html
#+LINK_HOME: index.html
#+OPTIONS: H:3 num:t toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t

* run
** start bash
   #+BEGIN_SRC sh
     sudo docker run -t -i ubuntu /bin/bash
   #+END_SRC

** run
   #+BEGIN_SRC sh
     docker run -m 768M --memory-swap -1 --oom-kill-disable --restart=always -d -p 27017:27017 -v /data/db/mongo:/data/db --hostname="mongodbserver.local" --name quantor_mongo mongo --storageEngine=wiredTiger --auth

     # --restart=always 加了这个后会保持开机启动
     docker run -it --restart=always -d --name quantor_app cedricporter/quantor:supervisor supervisord -c /etc/supervisord.conf
     docker run -it --restart=always -d --name quantor_app quantor:run_app cron -f

     docker run -it --restart=always -d --name quantor_app -p 60001:60001 cedricporter/quantor:shadowsocks supervisord -c /etc/supervisord.conf
   #+END_SRC

* stats
  #+BEGIN_SRC sh
    docker stats redis1 redis2
  #+END_SRC

* remove
  #+BEGIN_SRC sh
    docker rm $(docker ps -aq)

    docker ps -a | grep 'jupyter-' | awk '{print $1}' | xargs --no-run-if-empty docker rm
    docker ps -a | grep rq-jupyter | grep Exited | awk '{print $1}' | xargs --no-run-if-empty docker rm

    # You could use grep to remove all except my-image and ubuntu
    docker rmi $(docker images | grep -v 'mongo\|cedricporter' | awk {'print $3'})

    # remove untag none images
    docker rmi `docker images | grep "^<none>" | sed "s/\s\s*/ /g" | cut -d' ' -f3`
  #+END_SRC

* network
  #+BEGIN_SRC sh
    docker network ls
    docker network create jupyterhub-network
  #+END_SRC

* volume
  #+BEGIN_SRC sh
    # create data container
    docker run -v /data/db --name quantor_mongo_data ubuntu:latest true
    # create mongo container
    docker run --restart=always -d -p 27017:27017 --volumes-from=quantor_mongo_data --name quantor_mongo mongo --storageEngine=wiredTiger --auth

    docker volume ls
  #+END_SRC

* entry point
  #+BEGIN_SRC sh
    docker run -t -i --entrypoint="/bin/bash" ubuntu
  #+END_SRC

* copy file from container to host
  #+BEGIN_SRC sh
    docker cp <containerId>:/file/path/within/container /host/path/target
  #+END_SRC

* misc
  #+BEGIN_SRC sh
    docker history centos
  #+END_SRC

* Install
** 阿里云
   #+BEGIN_SRC sh
     # Stopping Docker and removing docker0
     sudo service docker stop
     sudo ip link set dev docker0 down
     sudo brctl delbr docker0

     # Create our own bridge
     sudo brctl addbr bridge0
     sudo ip addr add 192.168.5.1/24 dev bridge0
     sudo ip link set dev bridge0 up

     # Confirming that our bridge is up and running
     ip addr show bridge0

     # Tell Docker about it and restart (on Ubuntu)
     echo 'DOCKER_OPTS="-b=bridge0"' >> /etc/default/docker
     sudo service docker start
   #+END_SRC

   From: [[https://docs.docker.com/articles/networking/#bridge-building][Network Configuration]]

* run without root
  #+BEGIN_SRC sh
    sudo groupadd docker
    sudo gpasswd -a ${USER} docker
    sudo service docker restart

    # method 2
    sudo usermod -aG docker your-user
  #+END_SRC

* 迁移docker目录
  #+BEGIN_SRC sh
    docker ps -q | xargs docker kill
    service docker stop
    cd /var/lib/docker/devicemapper/mnt
    umount ./*
    mv /var/lib/docker $dest
    ln -s $dest /var/lib/docker
    service docker start
  #+END_SRC

* auto start
  #+BEGIN_SRC sh
    service docker start
    chkconfig docker on
  #+END_SRC
