#+TITLE: Python
#+LINK_UP: index.html
#+LINK_HOME: index.html
#+OPTIONS: ^:{}

* 资料
  1. [[http://www.python.org/dev/peps/pep-0333/][PEP 333 -- Python Web Server Gateway Interface v1.0]]([[http://codeplayer.blogbus.com/files/1139476043.html][翻译]])
  2. [[http://www.python.org/dev/peps/pep-0008/][PEP 8 -- Style Guide for Python Code]]
  3. [[http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html][Code Like a Pythonista: Idiomatic Python]]
  4. [[http://www.python.org/dev/peps/pep-0318/][PEP 318 -- Decorators for Functions and Methods]]
  5. [[http://scotdoyle.com/python-epoll-howto.html][How To Use Linux epoll with Python]]
  6. [[http://feilong.me/2011/01/recommended-entries-for-you-to-master-python][学好Python必读的几篇文章]]

* URL encoding/decoding

#+BEGIN_SRC python
  >>> s = u'1234567890-/:;()$&@".,?!\'[]{}#%^*+=_\|~<>\u20ac\xa3\xa5\u2022.,?!\''
  >>> urllib2.quote(s.encode("utf8"))
  '1234567890-/%3A%3B%28%29%24%26%40%22.%2C%3F%21%27%5B%5D%7B%7D%23%25%5E%2A%2B%3D_%5C%7C%7E%3C%3E%E2%82%AC%C2%A3%C2%A5%E2%80%A2.%2C%3F%21%27'
#+END_SRC

  Remember that you will need to both unquote() and decode() this to print it out properly if you're debugging or whatever.

#+BEGIN_SRC python
  >>> print urllib2.unquote(urllib2.quote(s.encode("utf8")))
  1234567890-/:;()$&@".,?!'[]{}#%^*+=_\|~<>â‚¬Â£Â¥â€¢.,?!'
  >>> # oops, nasty Â means we've got a utf8 byte stream being treated as an ascii stream
  >>> print urllib2.unquote(urllib2.quote(s.encode("utf8"))).decode("utf8")
  1234567890-/:;()$&@".,?!'[]{}#%^*+=_\|~<>€£¥•.,?!'
#+END_SRC

* CGI

** 读取提交数据
   #+BEGIN_SRC python
     form = cgi.FieldStorage()
     name = form.getfirst("name")
     namelist = form.getlist("name")
   #+END_SRC

* MySQL
  插入datetime
  #+BEGIN_SRC python
    time.strftime('%Y-%m-%d %H:%M:%S')
  #+END_SRC

** Commit
   MySQLdb的autocommit是默认关闭的，[[http://www.python.org/dev/peps/pep-0249/][PEP 249 -- Python Database API Specification v2.0]]推荐我们要显示地commit或者rollback。

   记得在哪本书里面看到，一次commit或者rollback意味着下一个事务的开始，如果我们没有指定begin的话。

** Last Inserted Id
   获取最后一次插入的id
   #+BEGIN_SRC python
     conn = MySQLdb(host...)

     c = conn.cursor()
     c.execute("INSERT INTO...")
     newID = c.lastrowid
   #+END_SRC

   [[http://stackoverflow.com/questions/706755/how-do-you-safely-and-efficiently-get-the-row-id-after-an-insert-with-mysql-usin][How do you safely and efficiently get the row id after an insert with mysql using MySQLdb in python? ]]

   [[http://stackoverflow.com/questions/2548493/in-python-after-i-insert-into-mysqldb-how-do-i-get-the-id][In Python, after I INSERT Into mysqldb, how do I get the “id”?]]

** DictCursor
   #+BEGIN_SRC python
     import MySQLdb
     import MySQLdb.cursors

     myDb = MySQLdb.connect(user='user', passwd='password', db='db_name', cursorclass=MySQLdb.cursors.DictCursor)
     myCurs = myDb.cursor()
     myCurs.execute("SELECT columna, columnb FROM tablea")
   #+END_SRC

** mysql_config not found
   #+BEGIN_SRC sh
     apt-get install python-dev libmysqld-dev
   #+END_SRC

* 根据字符串import
  #+BEGIN_SRC python
    def import_object(name):
        """Imports an object by name.

        import_object('x.y.z') is equivalent to 'from x.y import z'.

        >>> import tornado.escape
        >>> import_object('tornado.escape') is tornado.escape
        True
        >>> import_object('tornado.escape.utf8') is tornado.escape.utf8
        True
        """
        parts = name.split('.')
        obj = __import__('.'.join(parts[:-1]), None, None, [parts[-1]], 0)
        return getattr(obj, parts[-1])
  #+END_SRC
  这个是在Tornado源码中看到的，觉得挺好用的。

  其中用到了__import__这个函数

  #+BEGIN_EXAMPLE
    __import__(name, globals={}, locals={}, fromlist=[], level=-1) -> module
  #+END_EXAMPLE

  如果fromlist为空，那么会返回第一层包，例如os.path会返回os。如果非空，就返回之后的一个部分，如path。

  [[http://stackoverflow.com/questions/211100/pythons-import-doesnt-work-as-expected][Python's __import__ doesn't work as expected]]

  [[http://stackoverflow.com/questions/2724260/why-does-pythons-import-require-fromlist][Why does Python's __import__ require fromlist?]]

* 生成合法的用户名
  [[http://stackoverflow.com/questions/295135/turn-a-string-into-a-valid-filename-in-python][Turn a string into a valid filename in Python]]

  #+BEGIN_SRC python
    import string
    valid_chars = "-_.() %s%s" % (string.ascii_letters, string.digits)

    print valid_chars
    # '-_.() abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'

    filename = "This Is a (valid) - filename%$&$ .txt"
    print ''.join(c for c in filename if c in valid_chars)
    # 'This Is a (valid) - filename .txt'
  #+END_SRC

* 获取文件的修改时间
  #+BEGIN_SRC python
    import os
    import stat
    import datetime

    def get_modified_time(filename):
        f = os.stat(filename)
        modified = datetime.datetime.fromtimestamp(f[stat.ST_MTIME])
        return modified
  #+END_SRC

* 转换时间为Web响应头的gmt时间
  #+BEGIN_SRC python
    import email.utils
    import calendar
    import time
    import os
    import datetime
    import stat

    f = os.stat(filename)
    modified = datetime.datetime.fromtimestamp(f[stat.ST_MTIME])
    gmt = calendar.timegm(modified.utctimetuple())
    time_string = email.utils.formatdate(gmt, localtime=False, usegmt=True)
  #+END_SRC

  从字符串转回datetime

  #+BEGIN_SRC python
    date_tuple = email.utils.parsedate(time_string)
    if_since = datetime.datetime.fromtimestamp(time.mktime(date_tuple))
  #+END_SRC

  timestamp就是一个大浮点数。

* 多进程
  http://docs.python.org/2/library/multiprocessing.html

** 基本
   #+BEGIN_SRC python
     from multiprocessing import Process

     def f(name):
         print 'hello', name

     if __name__ == '__main__':
         p = Process(target=f, args=('bob',))
         p.start()
         p.join()
   #+END_SRC
** 共享数据

*** Queues
    #+BEGIN_SRC python
      from multiprocessing import Process, Queue

      def f(q):
          q.put([42, None, 'hello'])

      if __name__ == '__main__':
          q = Queue()
          p = Process(target=f, args=(q,))
          p.start()
          print q.get()    # prints "[42, None, 'hello']"
          p.join()
    #+END_SRC

*** Pipes
    #+BEGIN_SRC python
      from multiprocessing import Process, Pipe

      def f(conn):
          conn.send([42, None, 'hello'])
          conn.close()

      if __name__ == '__main__':
          parent_conn, child_conn = Pipe()
          p = Process(target=f, args=(child_conn,))
          p.start()
          print parent_conn.recv()   # prints "[42, None, 'hello']"
          p.join()
    #+END_SRC

*** Lock
    #+BEGIN_SRC python
      from multiprocessing import Process, Lock

      def f(l, i):
          l.acquire()
          print 'hello world', i
          l.release()

      if __name__ == '__main__':
          lock = Lock()

          for num in range(10):
              Process(target=f, args=(lock, num)).start()
    #+END_SRC

* autopy
** 安装
   用pip安装autopy的时候，出现这个“X11/extensions/XTest.h: No such file or directory”。

   #+BEGIN_SRC sh
     sudo apt-get install libxtst-dev
   #+END_SRC

* 合并两个dict
  #+BEGIN_SRC python
    d1 = {1:1, 2:2}
    d2 = {1:1, 3:3}
    d1.update(d2)
    print d1
    # {1: 1, 2: 2, 3: 3}
  #+END_SRC
