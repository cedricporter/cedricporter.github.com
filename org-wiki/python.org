#+TITLE: Python
#+LINK_UP: index.html
#+LINK_HOME: index.html
#+OPTIONS: H:3 num:t toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t


* Develop
  [[https://docs.python.org/devguide/index.html][Python Developer’s Guide]]

* meta
** print info
   - Meta.__new__是用来生成类A的类型对象, 我们可以在调用type.__new__之前更改 dictionary变量来增加/修改/删除新生成类A的成员变量/方法.
   - Meta.__new__是在生成类A的类型对象后被调用类进行类A的初始化. 第一个参数cls 是已经生成的类A类型对象, 可以通过直接修改cls来修改类的定义, 例如增加成员变量.
   - Meta.__call__是在生成类A的实例对象时被调用的, 通过调用type.__call__可以 生成该实例对象obj, 之后我们可以直接修改obj来实现实例对象的自定义.

   #+BEGIN_SRC python
     class Meta(type):
         def __call__(self):
             print('Enter Meta.__call__: ', self)
             obj = type.__call__(self)
             print('Exit Meta.__call__: ', obj)
             return obj

         def __new__(metacls, name, bases, dictionary):
             print('Enter Meta.__new__:', metacls, name, bases, dictionary)
             newClass = type.__new__(metacls, name, bases, dictionary)
             print('Exit Meta.__new__: ', newClass)
             return newClass

         def __init__(cls, name, bases, dictionary):
             print('Enter Meta.__init__: ', cls, name, bases, dictionary)
             super(Meta, cls).__init__(name, bases, dictionary)
             print('Exit Meta.__init__')

     A = Meta('A', (object,), {})

     '''
     Enter Meta.__new__: <class '__main__.Meta'> A (<class 'object'>,) {}
     Exit Meta.__new__:  <class '__main__.A'>
     Enter Meta.__init__:  <class '__main__.A'> A (<class 'object'>,) {}
     Exit Meta.__init__
     '''
   #+END_SRC
   [[http://xiaocong.github.io/blog/2012/06/12/python-metaclass/][Metaclasses in Python]]

** use type to create class
   #+BEGIN_SRC python
     MyClass = type("MyClass", (), {})
     c = MyClass()

     # create class
     Foo = type('Foo', (), {'bar':True})
     # equasl
     class Foo(object):
         bar = True


     def howdy(self, you):
         print("Howdy, " + you)

     MyList = type('MyList', (list,), dict(x=42, howdy=howdy))


     # inheritance
     class FooChild(Foo):
         pass

     FooChild = type('FooChild', (Foo,),{})
   #+END_SRC

   another: [[http://python-3-patterns-idioms-test.readthedocs.io/en/latest/Metaprogramming.html][Metaprogramming]]

   #+BEGIN_SRC python
     # Metaprogramming/GreenHouse.py

     class Event(object):
         events = [] # static

         def __init__(self, action, time):
             self.action = action
             self.time = time
             Event.events.append(self)

         def __lt__ (self, other):
             "So sort() will compare only on time."
             return self.time < other.time

         def run(self):
             print("%.2f: %s" % (self.time, self.action))

         @staticmethod
         def run_events():
             Event.events.sort();
             for e in Event.events:
                 e.run()


     def create_mc(description):
         "Create subclass using the 'type' metaclass"
         class_name = "".join(x.capitalize() for x in description.split())
         def __init__(self, time):
             Event.__init__(self, description + " [mc]", time)
         globals()[class_name] = type(class_name, (Event,), dict(__init__ = __init__))


     def create_exec(description):
         "Create subclass by exec-ing a string"
         class_name = "".join(x.capitalize() for x in description.split())
         klass = """
     class %s(Event):
         def __init__(self, time):
             Event.__init__(self, "%s [exec]", time)
     """ % (class_name, description)
         exec(klass, globals())

     if __name__ == "__main__":
         descriptions = ["Light on", "Light off", "Water on", "Water off",
                         "Thermostat night", "Thermostat day", "Ring bell"]
         initializations = "ThermostatNight(5.00); LightOff(2.00); \
             WaterOn(3.30); WaterOff(4.45); LightOn(1.00); \
             RingBell(7.00); ThermostatDay(6.00)"
         [create_mc(dsc) for dsc in descriptions]
         exec(initializations, globals())
         [create_exec(dsc) for dsc in descriptions]
         exec(initializations, globals())
         Event.run_events()

     """ Output:
     1.00: Light on [mc]
     1.00: Light on [exec]
     2.00: Light off [mc]
     2.00: Light off [exec]
     3.30: Water on [mc]
     3.30: Water on [exec]
     4.45: Water off [mc]
     4.45: Water off [exec]
     5.00: Thermostat night [mc]
     5.00: Thermostat night [exec]
     6.00: Thermostat day [mc]
     6.00: Thermostat day [exec]
     7.00: Ring bell [mc]
     7.00: Ring bell [exec]
     """
   #+END_SRC

** use meta
*** first
    #+BEGIN_SRC python
      from six import with_metaclass


      class Meta(type):
          pass


      class Base(object):
          pass


      class MyClass(with_metaclass(Meta, Base)):
          pass


      # or

      @add_metaclass(Meta)
      class MyClass(object):
          pass
    #+END_SRC

*** test
    #+BEGIN_SRC python
      # Metaprogramming/RegisterLeafClasses.py

      class RegisterLeafClasses(type):
          def __init__(cls, name, bases, nmspc):
              super(RegisterLeafClasses, cls).__init__(name, bases, nmspc)
              if not hasattr(cls, 'registry'):
                  cls.registry = set()
              cls.registry.add(cls)
              cls.registry -= set(bases) # Remove base classes

          # Metamethods, called on class objects:
          def __iter__(cls):
              return iter(cls.registry)

          def __str__(cls):
              if cls in cls.registry:
                  return cls.__name__
              return cls.__name__ + ": " + ", ".join([sc.__name__ for sc in cls])


      @six.add_metaclass(RegisterLeafClasses)
      class Color(object):
          pass


      class Blue(Color): pass
      class Red(Color): pass
      class Green(Color): pass
      class Yellow(Color): pass
      print(Color)

      class PhthaloBlue(Blue): pass
      class CeruleanBlue(Blue): pass
      print(Color)

      for c in Color: # Iterate over subclasses
          print(c, end=", ")
      print()


      @six.add_metaclass(RegisterLeafClasses)
      class Shape(object):
          pass


      class Round(Shape): pass
      class Square(Shape): pass
      class Triangular(Shape): pass
      class Boxy(Shape): pass

      print(Shape)
      class Circle(Round): pass
      class Ellipse(Round): pass
      print(Shape)


      '''
      Color: Blue, Green, Yellow, Red
      Color: Yellow, Green, Red, PhthaloBlue, CeruleanBlue
      Yellow, Green, Red, PhthaloBlue, CeruleanBlue,
      Shape: Round, Square, Triangular, Boxy
      Shape: Ellipse, Square, Triangular, Circle, Boxy
      '''
    #+END_SRC

*** final class
    #+BEGIN_SRC python
      class final(type):
          def __init__(cls, name, bases, namespace):
              super(final, cls).__init__(name, bases, namespace)
              for klass in bases:
                  if isinstance(klass, final):
                      raise TypeError(str(klass.__name__) + " is final")


      class A(object):
          pass

      @six.add_metaclass(final)
      class B(A):
          pass


      print(B.__bases__)
      print(isinstance(B, final))

      # Produces compile-time error:
      class C(B):
          pass


      """ Output:
      (<class '__main__.A'>,)
      True
      ...
      TypeError: B is final
      """
    #+END_SRC


*** Singleton
    #+BEGIN_SRC python
      # Metaprogramming/Singleton.py

      class Singleton(type):
          instance = None
          def __call__(cls, *args, **kw):
              if not cls.instance:
                   cls.instance = super(Singleton, cls).__call__(*args, **kw)
              return cls.instance


      @six.add_metaclass(Singleton)
      class ASingleton(object):
          pass


      a = ASingleton()
      b = ASingleton()
      assert a is b
      print(a.__class__.__name__, b.__class__.__name__)


      @six.add_metaclass(Singleton)
      class BSingleton(object):
          pass

      c = BSingleton()
      d = BSingleton()
      assert c is d
      print(c.__class__.__name__, d.__class__.__name__)
      assert c is not a
    #+END_SRC

*** filter
    #+BEGIN_SRC python
      sensitive_words_list = ['asshole', 'fuck', 'shit']

      def detect_sensitive_words(string):
          '''检测敏感词汇'''
          words_detected = filter(lambda word: word in string.lower(), sensitive_words_list)

          if words_detected:
              raise NameError('Sensitive words {0} detected in the string "{1}".' \
                  .format(
                      ', '.join(map(lambda s: '"%s"' % s, words_detected)),
                      string
                  )
              )

      class CleanerMeta(type):

          def __new__(cls, class_name, bases, attrs):
              detect_sensitive_words(class_name) # 检查类名
              map(detect_sensitive_words, attrs.iterkeys()) # 检查属性名

              print "Well done! You are a polite coder!" # 如无异常，输出祝贺消息

              return super(CleanerMeta, cls).__new__(cls, class_name, bases, attrs)
              # 重要！这行一定不能漏！！这回调用内建的类构造器来构造类，否则定义好的类将会变成 None
    #+END_SRC
    [[https://segmentfault.com/a/1190000004426130][Python “黑魔法” 之 Meta Classes]]

* sort list
  #+BEGIN_SRC python
    from operator import itemgetter, attrgetter

    sorted(student_tuples, key=itemgetter(2))
    # [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]

    sorted(student_objects, key=attrgetter('age'))
    # [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]

    sorted(student_tuples, key=itemgetter(1,2))
    # [('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]

    sorted(student_objects, key=attrgetter('grade', 'age'))
    # [('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]

    messages = ['critical!!!', 'hurry!', 'standby', 'immediate!!']
    sorted(messages, key=methodcaller('count', '!'))
    # ['standby', 'hurry!', 'immediate!!', 'critical!!!']

    sorted(student_tuples, key=itemgetter(2), reverse=True)
  #+END_SRC

* Log
  #+BEGIN_SRC python
    LOG_FORMAT = '[%(asctime)s] [%(levelname)s] %(message)s'
    LOG_DATE_FMT = '%Y-%m-%d %H:%M:%S'

    handler = logging.FileHandler(logdir + "/" + filename, 'a')
    formatter = logging.Formatter(LOG_FORMAT, LOG_DATE_FMT)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)
  #+END_SRC

* 资料
  1. [[http://www.python.org/dev/peps/pep-0333/][PEP 333 -- Python Web Server Gateway Interface v1.0]]([[http://codeplayer.blogbus.com/files/1139476043.html][翻译]])
  2. [[http://www.python.org/dev/peps/pep-0008/][PEP 8 -- Style Guide for Python Code]]
  3. [[http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html][Code Like a Pythonista: Idiomatic Python]]
  4. [[http://www.python.org/dev/peps/pep-0318/][PEP 318 -- Decorators for Functions and Methods]]
  5. [[http://scotdoyle.com/python-epoll-howto.html][How To Use Linux epoll with Python]]
  6. [[http://feilong.me/2011/01/recommended-entries-for-you-to-master-python][学好Python必读的几篇文章]]
  7. [[https://github.com/kennethreitz/grequests][grequests]]
  8. [[http://docs.python-guide.org/en/latest/][The Hitchhiker’s Guide to Python!]]
  9. [[http://www.python.org/workshops/1997-10/proceedings/savikko.html][Design Patterns in Python]]
  10. http://docs.pylint.org/features.html
  11. http://docs.pylint.org/faq.html#is-there-a-way-to-disable-a-message-for-a-particular-module-only

* web framework
  1. [[http://bottlepy.org/docs/dev-cn/][bottle]]

* URL encoding/decoding

#+BEGIN_SRC python
  >>> s = u'1234567890-/:;()$&@".,?!\'[]{}#%^*+=_\|~<>\u20ac\xa3\xa5\u2022.,?!\''
  >>> urllib2.quote(s.encode("utf8"))
  '1234567890-/%3A%3B%28%29%24%26%40%22.%2C%3F%21%27%5B%5D%7B%7D%23%25%5E%2A%2B%3D_%5C%7C%7E%3C%3E%E2%82%AC%C2%A3%C2%A5%E2%80%A2.%2C%3F%21%27'
#+END_SRC

  Remember that you will need to both unquote() and decode() this to print it out properly if you're debugging or whatever.

#+BEGIN_SRC python
  >>> print urllib2.unquote(urllib2.quote(s.encode("utf8")))
  1234567890-/:;()$&@".,?!'[]{}#%^*+=_\|~<>â‚¬Â£Â¥â€¢.,?!'
  >>> # oops, nasty Â means we've got a utf8 byte stream being treated as an ascii stream
  >>> print urllib2.unquote(urllib2.quote(s.encode("utf8"))).decode("utf8")
  1234567890-/:;()$&@".,?!'[]{}#%^*+=_\|~<>€£¥•.,?!'
#+END_SRC

* CGI

** 读取提交数据
   #+BEGIN_SRC python
     form = cgi.FieldStorage()
     name = form.getfirst("name")
     namelist = form.getlist("name")
   #+END_SRC

* MySQLdb
  插入datetime
  #+BEGIN_SRC python
    time.strftime('%Y-%m-%d %H:%M:%S')
  #+END_SRC

** Commit
   MySQLdb的autocommit是默认关闭的，[[http://www.python.org/dev/peps/pep-0249/][PEP 249 -- Python Database API Specification v2.0]]推荐我们要显示地commit或者rollback。

   记得在哪本书里面看到，一次commit或者rollback意味着下一个事务的开始，如果我们没有指定begin的话。

** Last Inserted Id
   获取最后一次插入的id
   #+BEGIN_SRC python
     conn = MySQLdb(host...)

     c = conn.cursor()
     c.execute("INSERT INTO...")
     newID = c.lastrowid
   #+END_SRC

   [[http://stackoverflow.com/questions/706755/how-do-you-safely-and-efficiently-get-the-row-id-after-an-insert-with-mysql-usin][How do you safely and efficiently get the row id after an insert with mysql using MySQLdb in python? ]]

   [[http://stackoverflow.com/questions/2548493/in-python-after-i-insert-into-mysqldb-how-do-i-get-the-id][In Python, after I INSERT Into mysqldb, how do I get the “id”?]]

** DictCursor
   #+BEGIN_SRC python
     import MySQLdb
     from MySQLdb.cursors import DictCursor

     db = MySQLdb.connect(cursorclass=MySQLdb.cursors.DictCursor)
     # or
     c = db.cursor(DictCursor)
     c.execute("SELECT * FROM user")
   #+END_SRC

** mysql_config not found
   #+BEGIN_SRC sh
     apt-get install python-dev libmysqld-dev
   #+END_SRC

** 异常
   #+BEGIN_SRC python
     import MySQLdb
     import MySQLdb.constants.CR as CR

     # eg. mysql断线重连
     def execute(self, query, params=None, **kwargs):
         retry_time = RETRY_TIMES
         while retry_time > 0:             # 如果和服务器断开了，进行重连
             try:
                 ret = self._execute(query, params, **kwargs)
                 break
             except MySQLdb.OperationalError, e:   # timeout or disconnect
                 err_no, msg = e.args
                 if err_no != CR.SERVER_GONE_ERROR:   # 与服务器断开了连接
                     raise
                 logger.log("database reconnect")
                 self._reconnect()         # 重连
                 retry_time -= 1
                 if retry_time <= 0:
                     raise
         return ret
   #+END_SRC

* 根据字符串import
  #+BEGIN_SRC python
    def import_object(name):
        """Imports an object by name.

        import_object('x.y.z') is equivalent to 'from x.y import z'.

        >>> import tornado.escape
        >>> import_object('tornado.escape') is tornado.escape
        True
        >>> import_object('tornado.escape.utf8') is tornado.escape.utf8
        True
        """
        parts = name.split('.')
        obj = __import__('.'.join(parts[:-1]), None, None, [parts[-1]], 0)
        return getattr(obj, parts[-1])
  #+END_SRC
  这个是在Tornado源码中看到的，觉得挺好用的。

  其中用到了__import__这个函数

  #+BEGIN_EXAMPLE
    __import__(name, globals={}, locals={}, fromlist=[], level=-1) -> module
  #+END_EXAMPLE

  如果fromlist为空，那么会返回第一层包，例如os.path会返回os。如果非空，就返回之后的一个部分，如path。

  [[http://stackoverflow.com/questions/211100/pythons-import-doesnt-work-as-expected][Python's __import__ doesn't work as expected]]

  [[http://stackoverflow.com/questions/2724260/why-does-pythons-import-require-fromlist][Why does Python's __import__ require fromlist?]]

* 生成合法的用户名
  [[http://stackoverflow.com/questions/295135/turn-a-string-into-a-valid-filename-in-python][Turn a string into a valid filename in Python]]

  #+BEGIN_SRC python
    import string
    valid_chars = "-_.() %s%s" % (string.ascii_letters, string.digits)

    print valid_chars
    # '-_.() abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'

    filename = "This Is a (valid) - filename%$&$ .txt"
    print ''.join(c for c in filename if c in valid_chars)
    # 'This Is a (valid) - filename .txt'
  #+END_SRC

* 获取文件的修改时间
  #+BEGIN_SRC python
    import os
    import stat
    import datetime

    def get_modified_time(filename):
        f = os.stat(filename)
        modified = datetime.datetime.fromtimestamp(f[stat.ST_MTIME])
        return modified
  #+END_SRC

* 转换时间为Web响应头的gmt时间
  #+BEGIN_SRC python
    import email.utils
    import calendar
    import time
    import os
    import datetime
    import stat

    f = os.stat(filename)
    modified = datetime.datetime.fromtimestamp(f[stat.ST_MTIME])
    gmt = calendar.timegm(modified.utctimetuple())
    time_string = email.utils.formatdate(gmt, localtime=False, usegmt=True)
  #+END_SRC

  从字符串转回datetime

  #+BEGIN_SRC python
    date_tuple = email.utils.parsedate(time_string)
    if_since = datetime.datetime.fromtimestamp(time.mktime(date_tuple))
  #+END_SRC

  timestamp就是一个大浮点数。

* 多进程
  http://docs.python.org/2/library/multiprocessing.html

** 基本
   #+BEGIN_SRC python
     from multiprocessing import Process

     def f(name):
         print 'hello', name

     if __name__ == '__main__':
         p = Process(target=f, args=('bob',))
         p.start()
         p.join()
   #+END_SRC
** 共享数据

*** Queues
    #+BEGIN_SRC python
      from multiprocessing import Process, Queue

      def f(q):
          q.put([42, None, 'hello'])

      if __name__ == '__main__':
          q = Queue()
          p = Process(target=f, args=(q,))
          p.start()
          print q.get()    # prints "[42, None, 'hello']"
          p.join()
    #+END_SRC

*** Pipes
    #+BEGIN_SRC python
      from multiprocessing import Process, Pipe

      def f(conn):
          conn.send([42, None, 'hello'])
          conn.close()

      if __name__ == '__main__':
          parent_conn, child_conn = Pipe()
          p = Process(target=f, args=(child_conn,))
          p.start()
          print parent_conn.recv()   # prints "[42, None, 'hello']"
          p.join()
    #+END_SRC

*** Lock
    #+BEGIN_SRC python
      from multiprocessing import Process, Lock

      def f(l, i):
          l.acquire()
          print 'hello world', i
          l.release()

      if __name__ == '__main__':
          lock = Lock()

          for num in range(10):
              Process(target=f, args=(lock, num)).start()
    #+END_SRC

* autopy
** 安装
   用pip安装autopy的时候，出现这个“X11/extensions/XTest.h: No such file or directory”。

   #+BEGIN_SRC sh
     sudo apt-get install libxtst-dev
   #+END_SRC

* 合并两个dict
  #+BEGIN_SRC python
    d1 = {1:1, 2:2}
    d2 = {1:1, 3:3}
    d1.update(d2)
    print d1
    # {1: 1, 2: 2, 3: 3}
  #+END_SRC

* logging
  #+BEGIN_SRC python
    def init_logger(log_filename='log.log'):
        import logging

        logger = logging.getLogger()
        formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')

        hdlr = logging.FileHandler(log_filename)
        hdlr.setFormatter(formatter)
        logger.addHandler(hdlr)
        logger.setLevel(logging.NOTSET)

        return logger
  #+END_SRC

* 查看字符串编码
  #+BEGIN_SRC python
    import urllib
    rawdata = urllib.urlopen('http://www.google.cn/').read()

    import chardet
    chardet.detect(rawdata)
  #+END_SRC

* Jinja2
** 传递函数给Jinja2
   #+BEGIN_SRC python
     from jinja2 import Environment
     env = Environment()
     env.globals['foo'] = lambda: "foobar"
     env.from_string('{% macro bar() %}{{ foo() }}{% endmacro %}{{ bar() }}').render()
   #+END_SRC

** 实践
   1. https://bitbucket.org/plurk/solace

* pip
  #+BEGIN_SRC sh
    pip install xxx -i http://pypi.douban.com/simple/
    pip install -r req.txt -i http://pypi.douban.com/simple/
  #+END_SRC

** install
   #+BEGIN_SRC sh
     # Install from tarball on web
     pip install https://pypi.python.org/packages/source/r/requests/requests-2.3.0.tar.gz

     # Install from local tarball
     wget https://pypi.python.org/packages/source/r/requests/requests-2.3.0.tar.gz
     pip install requests-2.3.0.tar.gz

     # Install from local folder
     tar -zxvf requests-2.3.0.tar.gz
     cd requests-2.3.0
     pip install .
     # You can delete the requests-2.3.0 folder.


     # Install from local folder (editable mode)
     pip install -e .
     # This installs the package in editable mode. Any changes you make to the code will immediately apply across the system. This is useful if you are the package developer and want to test changes. It also means you won't be delete the folder without breaking the install.
   #+END_SRC

** custom
   #+BEGIN_SRC sh
     pip install pypiserver

     pypi-server --authenticate=update,download,list -p 12345 -P .htaccess /srv/pypi-public/packages/
   #+END_SRC

* print
  #+BEGIN_SRC python
    row_format ="{:>15}" * (len(teams_list) + 1)
    print row_format.format("", *teams_list)
    for team, row in zip(teams_list, data):
        print row_format.format(team, *row)
  #+END_SRC

* debug
** set_trace
   #+BEGIN_SRC python
     from ipdb import set_trace ; set_trace()
   #+END_SRC
** debug when except
   #+BEGIN_SRC python
     import sys

     class ExceptionHook:
         instance = None

         def __call__(self, *args, **kwargs):
             if self.instance is None:
                 from IPython.core import ultratb
                 self.instance = ultratb.FormattedTB(mode='Plain',
                      color_scheme='Linux', call_pdb=1)
             return self.instance(*args, **kwargs)

     sys.excepthook = ExceptionHook()
   #+END_SRC

* python3 support
  1. [[http://py3readiness.org/][Python 3 Readiness]]
  2. [[http://python-future.org/compatible_idioms.html][Cheat Sheet: Writing Python 2-3 compatible code]]

* bug
** 1
   #+BEGIN_SRC python
     # OK
     def u():
         exec("a=2")
         print(locals()['a'])
     u()


     # OK
     def u():
         exec("a=2")
         a=2
         print(a)
     u()


     # FAIL
     def u():
         exec("a=2")
         print(locals()['a'])
         a=2
     u()
   #+END_SRC
** 2
   [[http://stackoverflow.com/questions/15086040/behaviour-of-exec-function-in-python-2-and-python-3][Behaviour of exec function in Python 2 and Python 3]]

   #+BEGIN_SRC python
     def u():
         a=1
         l=locals()
         exec("a=2")
         print(l)
     u()
     def u():
         a=1
         l=locals()
         exec("a=2")
         locals()
         print(l)
     u()

     '''
     {'a': 2, 'l': {...}}
     {'a': 1, 'l': {...}}
     '''
   #+END_SRC
** 3
   #+BEGIN_SRC python
     def u():
         l=locals()
         exec("a=2")
         print(l)
         print(locals())
     u()
     def u():
         l=locals()
         exec("a=2")
         print(l)
         print(locals())
         a=1
     u()


     '''
     {'a': 2, 'l': {...}}
     {'a': 2, 'l': {...}}
     {'a': 2, 'l': {...}}
     {'l': {...}}
     '''
   #+END_SRC

* re
** match number in string
   #+BEGIN_SRC python
     re.findall(
         r"[-+]?\d+[\.]?\d*",
         "Threshold Crossed: 12 datapoints were greater than or equal to the threshold (12000.0). The most recent datapoints: [199251.0, 180898.0]." )
   #+END_SRC

* 多版本共存
  [[https://github.com/yyuu/pyenv][pyenv]]

* libs
  - [[http://traitlets.readthedocs.io/en/stable/index.html][traitlets]] Traitlets is a framework that lets Python classes have attributes with type checking, dynamically calculated default values, and ‘on change’ callbacks.
  - [[http://dask.pydata.org/en/latest/][Dask]] Dask is a flexible parallel computing library for analytics. [[https://github.com/dask/dask-tutorial][dask-tutorial]]

* pip
  #+BEGIN_SRC sh
    cat requirements.txt | grep -v "#" | sed "s/ //g" | xargs pip install
  #+END_SRC

* 打包
  [[http://python-packaging.readthedocs.io/en/latest/index.html][How To Package Your Python Code]]
  [[http://zengrong.net/post/2169.htm][Python 包管理工具解惑]]

* pyenv
  #+BEGIN_SRC sh
    pyenv virtualenv 3.3.0 env    #创建一个 Python 版本为 3.3.0 的环境, 环境叫做 env
    pyenv activate env_name       #激活 env 这个环境, 此时 Python 版本自动变为 3.3.0, 且是独立环境
    pyenv deactivate              #离开已经激活的环境
  #+END_SRC

* Scientific
  [[https://ipgp.github.io/scientific_python_cheat_sheet/][Scientific Python Cheatsheet]]

* force reinstall
  #+BEGIN_SRC sh
    pip install -U --no-deps --force-reinstall .
  #+END_SRC

* interview
  - https://github.com/taizilongxu/interview_python
  - https://github.com/MaximAbramchuck/awesome-interview-questions

* 获取函数参数

* profile
  https://jiffyclub.github.io/snakeviz/

* inspect
  #+BEGIN_SRC python
    func = lambda x, y: (x, y)
    func.__code__.co_argcount
    func.__code__.co_varnames
    func.__defaults__

    inspect.getargspec(func)
  #+END_SRC

* ucs4 or ucs2
  #+BEGIN_SRC python
    >>> # When built with --enable-unicode=ucs4:
    >>> import sys
    >>> print sys.maxunicode
    1114111


    >>> # When built with --enable-unicode=ucs2:
    >>> import sys
    >>> print sys.maxunicode
    65535
  #+END_SRC

* Libraries
  - http://babel.pocoo.org/en/latest/index.html
  - [[https://github.com/crsmithdev/arrow][Better dates & times for Python]]

* 资料
  - [[http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html][Python描述器引导]]
  - [[http://pyzh.readthedocs.io/en/latest/awesome-python-libraries.html][让人耳目一新的Python库]]
  - [[https://github.com/faif/python-patterns][A collection of design patterns and idioms in Python.]]
  - [[https://gist.github.com/sloria/7001839][The Best of the Best Practices (BOBP) Guide for Python]]
  - [[https://github.com/vinta/awesome-python#awesome-python][Awesome Python]]
