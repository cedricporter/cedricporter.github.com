#+TITLE: Tornado笔记
#+LINK_UP: index.html
#+LINK_HOME: index.html
#+OPTIONS: H:3 num:t toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t


* Hello, world
  #+BEGIN_SRC python
    import tornado.ioloop
    import tornado.web

    class MainHandler(tornado.web.RequestHandler):
        def get(self):
            self.write("Hello, world")

    application = tornado.web.Application([
        (r"/", MainHandler),
    ])

    if __name__ == "__main__":
        application.listen(8888)
        tornado.ioloop.IOLoop.instance().start()
  #+END_SRC


* 异步验证
  在Tornado中异步验证。不是用两个装饰器，而是通过回调链。[[http://stackoverflow.com/questions/4938902/tornado-asynchronous-handler][async]]

  #+BEGIN_SRC python
    class MyHandler(BaseHandler):
        @tornado.web.asynchronous
        def get(self):
            self._authenticate(self.on_auth)

      def on_auth(self):
          self.write('example')
          self.finish()

    class BaseHandler(tornado.web.RequestHandler):
        def _get_current_user(self, callback):
            def query_cb(self, doc):
                if doc:
                    callback()
                else:
                    # Not authenticated
            database.get(username='test', password='t3st', callback=query_cb)

      def _authenticate(self, callback):
          self._get_current_user(callback)
  #+END_SRC

* 大文件上传
  #+BEGIN_SRC python
    @tornado.web.stream_request_body
    class MainHandler(tornado.web.RequestHandler):
        def prepare(self):
            print self.request.headers

        def post(self):
            print 'POST successfully completed.'

        def data_received(self, chunk):
            print len(chunk)
  #+END_SRC

* 资料
  1. [[https://gist.github.com/asimakov/10888897][Tornado server with a pipe in a separate thread]]
  2. https://github.com/tornadoweb/tornado/wiki/Links
