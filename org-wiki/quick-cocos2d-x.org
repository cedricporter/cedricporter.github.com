#+TITLE: quick-cocos2d-x
#+LINK_UP: index.html
#+LINK_HOME: index.html
#+OPTIONS: H:3 num:t toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t

* cc函数
  #+BEGIN_SRC lua
    -- cc = cc.GameObject.extend()
    local GameObject = cc.GameObject
    local ccmt = {}
    ccmt.__call = function(self, target)
        if target then
            return GameObject.extend(target)
        end
        printError("cc() - invalid target")
    end
    setmetatable(cc, ccmt)

  #+END_SRC

* MVC
** AppBase.lua
   在创建App对象的时候，会设置一个全局变量 ~app~ ，指向最后一个创建的App对象（注意：自己不要SB创建多个App）。
   #+BEGIN_SRC lua
     function AppBase:ctor(appName, packageRoot)
         cc(self):addComponent("components.behavior.EventProtocol"):exportMethods()

         self.name = appName
         self.packageRoot = packageRoot or "app"

         local eventDispatcher = cc.Director:getInstance():getEventDispatcher()
         local customListenerBg = cc.EventListenerCustom:create(cc.EVENT_COME_TO_BACKGROUND,
                                     handler(self, self.onEnterBackground))
         eventDispatcher:addEventListenerWithFixedPriority(customListenerBg, 1)
         local customListenerFg = cc.EventListenerCustom:create(cc.EVENT_COME_TO_FOREGROUND,
                                     handler(self, self.onEnterForeground))
         eventDispatcher:addEventListenerWithFixedPriority(customListenerFg, 1)

         self.snapshots_ = {}

         -- set global app
         app = self
     end
   #+END_SRC

* 类
  #+BEGIN_SRC lua
    function class(classname, super)
        local superType = type(super)
        local cls

        if superType ~= "function" and superType ~= "table" then
            superType = nil
            super = nil
        end

        if superType == "function" or (super and super.__ctype == 1) then
            -- inherited from native C++ Object
            cls = {}

            if superType == "table" then
                -- copy fields from super
                for k,v in pairs(super) do cls[k] = v end
                cls.__create = super.__create
                cls.super    = super
            else
                cls.__create = super
                cls.ctor = function() end
            end

            cls.__cname = classname
            cls.__ctype = 1

            function cls.new(...)
                local instance = cls.__create(...)
                -- copy fields from class to native object
                for k,v in pairs(cls) do instance[k] = v end
                instance.class = cls
                instance:ctor(...)
                return instance
            end

        else
            -- inherited from Lua Object
            if super then
                cls = {}
                setmetatable(cls, {__index = super})
                cls.super = super
            else
                cls = {ctor = function() end}
            end

            cls.__cname = classname
            cls.__ctype = 2 -- lua
            cls.__index = cls

            function cls.new(...)
                local instance = setmetatable({}, cls)
                instance.class = cls
                instance:ctor(...)
                return instance
            end
        end

        return cls
    end
  #+END_SRC
