<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Octopress | EverET.org]]></title>
  <link href="http://everet.org/tag/octopress/atom.xml" rel="self"/>
  <link href="http://everet.org/"/>
  <updated>2013-01-15T00:20:06+08:00</updated>
  <id>http://everet.org/</id>
  <author>
    <name><![CDATA[Stupid ET]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[让Emacs显示Markdown中的图片]]></title>
    <link href="http://everet.org/2013/01/emacs-markdown-display-image.html"/>
    <updated>2013-01-14T23:36:00+08:00</updated>
    <id>http://everet.org/2013/01/emacs-markdown-display-image</id>
    <content type="html"><![CDATA[<p>用Octopress或者直接用Jekyll都会涉及到Markdown。我们在写Markdown的时候，会遇到插入截图或者本地图片的问题。如果我们自己手工写上图片的标记，会非常的麻烦，于是我在前文 <a href="http://everet.org/2012/12/screenshot-and-image-paste-in-emacs-when-writing-markdown.html">在Emacs中插入截图或者本地图片</a> 中讲述如何自动化插入图片，来解决插入的问题。</p>

<p>今天我们来看一下如何在Emacs中预览Markdown中的图片。</p>

<!-- more -->

<p>虽然我们已经解决了插入图片不便，但我们有时看到这一串一串的文本图片标记或许有些许蛋疼，于是预览一下图片，此时又是Emacs展示其强大的时候了。</p>

<p>Emacs中有<code>iimage-mode</code>可以方便地让我们显示图片，是Emacs自带的。当然如果想在buffer中插入图片我们甚至可以直接调用<code>insert-image</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>往buffer中插入图片。我想Vim里面如果要显示图片一定相当相当蛋疼吧，哈哈。Emacs用户真幸福。</p>

<h2 id="section">实现</h2>
<p>好，又到了动手的时候了，让我们卷起袖子准备开工！</p>

<p>``` cl iimage settings https://github.com/cedricporter/vim-emacs-setting/blob/master/emacs/.emacs.d/plugins/configs/my-iimage-settings.el my-iimage-settings.el
;; 
(require ‘iimage)</p>

<p>(add-hook ‘info-mode-hook ‘iimage-mode)
(add-hook ‘markdown-mode-hook ‘(lambda()
				 (define-key markdown-mode-map
				   (kbd “<f12>") 'turn-on-iimage-mode)))</f12></p>

<p>(setq iimage-mode-image-search-path ‘(list “.” “..”))</p>

<p>;; for octopress
(add-to-list ‘iimage-mode-image-regex-alist ; match: {% img xxx %}
	     (cons (concat “{% img /?\(“
			   iimage-mode-image-filename-regex
			   “\) %}”) 1))
(add-to-list ‘iimage-mode-image-regex-alist ; match: <img src="/xxx" alt="xxx" />
	     (cons (concat “!\<a href="http://everet.org/\\(wp-content/&quot;
			   iimage-mode-image-filename-regex" title="\\))">.<em>?\](/\(“
			   iimage-mode-image-filename-regex
			   “\))”) 1))
;; 兼容以前在wordpress添加的图片
(add-to-list ‘iimage-mode-image-regex-alist ; match: <img src="http://everet.org/xxx" alt="xxx" />
	     (cons (concat “!\[.</em>?\</a> 1))
;; 			 <br />
```</p>

<p>我们首先设置一下图片搜索路径<code>iimage-mode-image-search-path</code>，可以根据实际需要进行设置。对于Octopress的目录结构，我将其设置为当前以及上一级目录<code>(list "." "..")</code>。</p>

<p>然后，我们来设置图片的正则表达式，iimage会将文本中满足的正则表达式提取出来替换成图片。对于插入到<code>iimage-mode-image-regex-alist</code>中的正则表达式，为一个点对<code>(REGEXP . NUM)</code>。为什么是这样呢？因为正则表达式中可能会有很多级的括号，通过<code>NUM</code>我们可以指定取哪一个group的内容为图片路径，像NUM为0的时候取得是整个表达式的值，这个有疑问的话可以问一下Google大神。</p>

<p>最后，我们设置在<code>markdown-mode</code>中<code>F12</code>为开关图片显示。</p>

<h2 id="section-1">效果</h2>

<p><img src="/imgs/snapshot7<em>20130115</em>000417_4317rhI.png"></p>

<h2 id="footnote">Footnote</h2>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Showing-Images.html">Showing Images</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Wordpress to Octopress]]></title>
    <link href="http://everet.org/2012/12/migrate-from-wordpress-to-octopress.html"/>
    <updated>2012-12-25T20:49:00+08:00</updated>
    <id>http://everet.org/2012/12/migrate-from-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<h2 id="section">为什么</h2>
<p>为什么离开Wordpress选择Octopress？ 在Google中搜索Wordpress+Octopress就会找到整版整版的从Wordpress迁移到Octopress的博文，
其中有介绍各种迁移的理由，例如Wordpress太臃肿，Octopress可以让我们像黑客一样写博客。</p>

<p>这些都太高雅了，我只是不喜欢PHP那一坨一坨文明用语一样的代码，这样改起来的时候实在是让人蛋疼。而Octopress是Ruby写的，于是可以借机学习一下<em>Ruby</em>（<strong>这个是主要原因</strong>）。</p>

<!-- more -->

<h2 id="wordpress">对于Wordpress的看法</h2>
<p>Wordpress可以让我们在浏览器写东西，也可以用客户端来写，例如Windows Live Writer、Emacs + org2blog<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。
当我们在其他人电脑，没有客户端的时候，一样可以打开浏览器写。Wordpress既可以是胖客户端，又可以是瘦客户端。
而且Wordpress架构设计灵活，插件主题丰富。用户体验好，也可以用Markdown、org等等其他语言来写。对于静态化，装个WP-Super-Cache插件就可以将所有文章静态化了，而且静态化的程度是可以控制的。</p>

<h3 id="section-1">缺点</h3>
<ol>
  <li>是PHP写的，用MySQL，这两个东西一下就占了一堆内存。对于我们这些穷苦人民的VPS十分不友好。</li>
  <li>不联网就没法预览最终效果。</li>
</ol>

<h2 id="octopress">对于Octopress的看法</h2>
<p>对于Octopress的优点网上也有一堆一堆的评论，我也就不太多说了。我们来看看我觉得的缺点：</p>

<h3 id="section-2">缺点</h3>
<ol>
  <li>Octopress是一个胖客户端的博客系统，在写博客前，你需要安装Git、Ruby等等东西，然后把环境调教好，才能开始写东西。</li>
  <li>如果去到别人的电脑，或者是Windows的话，那么写个博客都会非常的蛋疼。</li>
  <li>相对缺乏插件与主题。</li>
  <li>发布一篇文章就要重建整个博客，慢。</li>
</ol>

<h3 id="section-3">优点</h3>
<blockquote>
  <p>Octopress is jekyll with Batteries included.</p>
</blockquote>

<p>直接就是用Markdown语法，不用纠结org还是markdown。
可以方便地离线预览文章<code>rake preview</code>。</p>

<h3 id="misc">Misc</h3>
<p>Octopress默认的markdown引擎是rdiscount，这个实在是让人难以接受，连footnote都不支持。于是果断换成了kramdown<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。kramdown支持footnote，甚至LaTex<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p>

<h2 id="section-4">其他</h2>

<h3 id="section-5">写博客的三个阶段</h3>
<p>之前看过阮一峰写的一篇文章<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">github Pages和Jekyll入门</a>，里面有讲到，喜欢写博客的人，会经历三个阶段：</p>

<blockquote>
  <p>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。
第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。
第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</p>
</blockquote>

<p>好吧，我觉得独立博客的管理确实挺麻烦的，加上刚刚经历买了1年的VPS没到一个月，主机商就跑路的悲剧后，就愈发觉得自己负责可靠性等各种东西的维护确实挺麻烦的。就先暂时放在Github上面，日后再自己管理。</p>

<p>放在Github上面有个坏处是，对于页面都有缓存：<code>Cache-Control: max-age=86400</code>，也就是有一整天缓存时间，如果一天内有访问过这个页面的浏览器不刷新的话就直接从cache里面取了。不过应该也没什么大碍，基本不会一天更新好几次。而且除了自己也没什么人访问。</p>

<h3 id="emacs">Emacs</h3>
<p>Emacs既可以方便地写Wordpress也可以写Octopress。
<img src="/imgs/emacs-user-at-work.jpg" alt="Emacs User At Work" /><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<h3 id="ruby">Ruby</h3>
<p>这段时间看了Ruby，发现竟然可以比Python更加优美，我想，日后，可能也会有很多人从Python流向Ruby，就像曾经人们从Perl流向Python一样。</p>

<p>这就是江山代有才人出，长江后浪推前浪啊。事物总是在进步着。</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://github.com/punchagan/org2blog">https://github.com/punchagan/org2blog</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://kramdown.rubyforge.org/index.html">http://kramdown.rubyforge.org/index.html</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://yanping.me/cn/blog/2012/03/10/octopress-with-latex/">在Octopress中使用LaTeX</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><a href="http://batsov.com/articles/2011/11/11/blogging-like-a-hacker-evolution/">http://batsov.com/articles/2011/11/11/blogging-like-a-hacker-evolution/</a><a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
