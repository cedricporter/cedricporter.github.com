<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: C++ | EverET.org]]></title>
  <link href="http://cedricporter.github.com/tag/c-/atom.xml" rel="self"/>
  <link href="http://cedricporter.github.com/"/>
  <updated>2012-12-25T17:02:31+08:00</updated>
  <id>http://cedricporter.github.com/</id>
  <author>
    <name><![CDATA[Stupid ET]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python计算点积]]></title>
    <link href="http://cedricporter.github.com/2012/06/python-dot-product.html"/>
    <updated>2012-06-13T22:55:56+08:00</updated>
    <id>http://cedricporter.github.com/2012/06/python-dot-product</id>
    <content type="html"><![CDATA[<p>想起我们在C++中，要实现一个点积，如果是固定维数的向量，我们或许会通过这么一个成员函数来实现</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>cpp  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Point2d</span> <span class="n">DotProduct</span><span class="p">(</span><span class="k">const</span> <span class="n">Point2d</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">Point2d</span><span class="p">(</span><span class="n">m_x</span> <span class="o">*</span> <span class="n">rhs</span><span class="p">.</span><span class="n">x</span><span class="p">(),</span> <span class="n">m_y</span> <span class="o">*</span> <span class="n">rhs</span><span class="p">.</span><span class="n">y</span><span class="p">());</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>对于非固定维数的向量，我们或许动用一个循环，然后又变成了一坨代码。</p>

<p>当我们使用Python的时候，就会简单很多很多。<!-- more --></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>python  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="n">dotproduct</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>       <span class="k">lambda</span> <span class="n">v1</span><span class="p">,</span> <span class="n">v2</span><span class="p">:</span> <span class="nb">sum</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">imap</span><span class="p">(</span><span class="n">operator</span><span class="o">.</span><span class="n">mul</span><span class="p">,</span> <span class="n">v1</span><span class="p">,</span> <span class="n">v2</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="n">dotproduct</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="mi">11</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="n">dotproduct</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="mi">54</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="n">dotproduct</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">6</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="mi">98</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[errno表]]></title>
    <link href="http://cedricporter.github.com/2012/05/errno-table.html"/>
    <updated>2012-05-30T09:12:30+08:00</updated>
    <id>http://cedricporter.github.com/2012/05/errno-table</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>粘过来常常看下，以免忘了...&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EPERM 1  /&lt;em> Not super-user &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOENT 2 /&lt;em> No such file or directory &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ESRCH 3  /&lt;em> No such process &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EINTR 4  /&lt;em> Interrupted system call &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EIO 5  /&lt;em> I/O error &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENXIO 6  /&lt;em> No such device or address &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>define E2BIG 7  /&lt;em> Arg list too long &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOEXEC 8 /&lt;em> Exec format error &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EBADF 9  /&lt;em> Bad file number &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ECHILD 10 /&lt;em> No children &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EAGAIN 11 /&lt;em> No more processes &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOMEM 12 /&lt;em> Not enough core &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EACCES 13 /&lt;em> Permission denied &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EFAULT 14 /&lt;em> Bad address &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOTBLK 15 /&lt;em> Block device required &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EBUSY 16 /&lt;em> Mount device busy &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EEXIST 17 /&lt;em> File exists &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EXDEV 18 /&lt;em> Cross-device link &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENODEV 19 /&lt;em> No such device &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOTDIR 20 /&lt;em> Not a directory &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EISDIR 21 /&lt;em> Is a directory &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EINVAL 22 /&lt;em> Invalid argument &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENFILE 23 /&lt;em> Too many open files in system &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EMFILE 24 /&lt;em> Too many open files &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOTTY 25 /&lt;em> Not a typewriter &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ETXTBSY 26 /&lt;em> Text file busy &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EFBIG 27 /&lt;em> File too large &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOSPC 28 /&lt;em> No space left on device &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ESPIPE 29 /&lt;em> Illegal seek &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EROFS 30 /&lt;em> Read only file system &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EMLINK 31 /&lt;em> Too many links &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EPIPE 32 /&lt;em> Broken pipe &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EDOM 33  /&lt;em> Math arg out of domain of func &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ERANGE 34 /&lt;em> Math result not representable &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOMSG 35 /&lt;em> No message of desired type &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EIDRM 36 /&lt;em> Identifier removed &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ECHRNG 37 /&lt;em> Channel number out of range &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EL2NSYNC 38 /&lt;em> Level 2 not synchronized &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EL3HLT 39 /&lt;em> Level 3 halted &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EL3RST 40 /&lt;em> Level 3 reset &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ELNRNG 41 /&lt;em> Link number out of range &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EUNATCH 42 /&lt;em> Protocol driver not attached &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOCSI 43 /&lt;em> No CSI structure available &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EL2HLT 44 /&lt;em> Level 2 halted &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EDEADLK 45 /&lt;em> Deadlock condition &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOLCK 46 /&lt;em> No record locks available &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EBADE 50 /&lt;em> Invalid exchange &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EBADR 51 /&lt;em> Invalid request descriptor &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EXFULL 52 /&lt;em> Exchange full &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOANO 53 /&lt;em> No anode &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EBADRQC 54 /&lt;em> Invalid request code &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EBADSLT 55 /&lt;em> Invalid slot &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EDEADLOCK 56 /&lt;em> File locking deadlock error &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EBFONT 57 /&lt;em> Bad font file fmt &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOSTR 60 /&lt;em> Device not a stream &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENODATA 61 /&lt;em> No data (for no delay io) &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ETIME 62 /&lt;em> Timer expired &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOSR 63 /&lt;em> Out of streams resources &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENONET 64 /&lt;em> Machine is not on the network &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOPKG 65 /&lt;em> Package not installed &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EREMOTE 66 /&lt;em> The object is remote &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOLINK 67 /&lt;em> The link has been severed &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EADV 68  /&lt;em> Advertise error &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ESRMNT 69 /&lt;em> Srmount error &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ECOMM 70 /&lt;em> Communication error on send &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EPROTO 71 /&lt;em> Protocol error &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EMULTIHOP 74 /&lt;em> Multihop attempted &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ELBIN 75 /&lt;em> Inode is remote (not really error) &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EDOTDOT 76 /&lt;em> Cross mount point (not really error) &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EBADMSG 77 /&lt;em> Trying to read unreadable message &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EFTYPE 79 /&lt;em> Inappropriate file type or format &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOTUNIQ 80 /&lt;em> Given log. name not unique &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EBADFD 81 /&lt;em> f.d. invalid for this operation &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EREMCHG 82 /&lt;em> Remote address changed &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ELIBACC 83 /&lt;em> Can't access a needed shared lib &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ELIBBAD 84 /&lt;em> Accessing a corrupted shared lib &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ELIBSCN 85 /&lt;em> .lib section in a.out corrupted &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ELIBMAX 86 /&lt;em> Attempting to link in too many libs &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ELIBEXEC 87 /&lt;em> Attempting to exec a shared library &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOSYS 88 /&lt;em> Function not implemented &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENMFILE 89      /&lt;em> No more files &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOTEMPTY 90 /&lt;em> Directory not empty &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENAMETOOLONG 91 /&lt;em> File or path name too long &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ELOOP 92 /&lt;em> Too many symbolic links &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EOPNOTSUPP 95 /&lt;em> Operation not supported on transport endpoint &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EPFNOSUPPORT 96 /&lt;em> Protocol family not supported &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ECONNRESET 104  /&lt;em> Connection reset by peer &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOBUFS 105 /&lt;em> No buffer space available &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EAFNOSUPPORT 106 /&lt;em> Address family not supported by protocol family &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EPROTOTYPE 107 /&lt;em> Protocol wrong type for socket &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOTSOCK 108 /&lt;em> Socket operation on non-socket &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOPROTOOPT 109 /&lt;em> Protocol not available &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ESHUTDOWN 110 /&lt;em> Can't send after socket shutdown &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ECONNREFUSED 111 /&lt;em> Connection refused &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EADDRINUSE 112  /&lt;em> Address already in use &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ECONNABORTED 113 /&lt;em> Connection aborted &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENETUNREACH 114  /&lt;em> Network is unreachable &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENETDOWN 115  /&lt;em> Network interface is not configured &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ETIMEDOUT 116  /&lt;em> Connection timed out &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EHOSTDOWN 117  /&lt;em> Host is down &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EHOSTUNREACH 118 /&lt;em> Host is unreachable &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EINPROGRESS 119  /&lt;em> Connection already in progress &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EALREADY 120  /&lt;em> Socket already connected &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EDESTADDRREQ 121 /&lt;em> Destination address required &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EMSGSIZE 122  /&lt;em> Message too long &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EPROTONOSUPPORT 123 /&lt;em> Unknown protocol &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ESOCKTNOSUPPORT 124 /&lt;em> Socket type not supported &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EADDRNOTAVAIL 125 /&lt;em> Address not available &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENETRESET 126&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EISCONN 127  /&lt;em> Socket is already connected &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOTCONN 128  /&lt;em> Socket is not connected &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ETOOMANYREFS 129&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EPROCLIM 130&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EUSERS 131&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EDQUOT 132&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ESTALE 133&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOTSUP 134  /&lt;em> Not supported &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOMEDIUM 135   /&lt;em> No medium (in tape drive) &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ENOSHARE 136    /&lt;em> No such host or network path &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define ECASECLASH 137  /&lt;em> Filename exists with different case &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EILSEQ 138&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>define EOVERFLOW 139 /&lt;em> Value too large for defined data type &lt;/em>/&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[判断两个有符号整数相加是否溢出]]></title>
    <link href="http://cedricporter.github.com/2012/05/test-int-overflow.html"/>
    <updated>2012-05-16T20:11:42+08:00</updated>
    <id>http://cedricporter.github.com/2012/05/test-int-overflow</id>
    <content type="html"><![CDATA[<p>在Python，默认的整数是long型的，也就是机器字长，32位的最大有符号整数为0x7fffffff，64位最大有符号整数为0x7fffffffffffffff。</p>

<p>而在Python，支持任意大整数的运算，也就是，当我们的long型整数（在Python对象中type为int）溢出的时候，Python会自动将其变成大整数（在Python对象中type为long），也就是和Java中的BigInteger一样，支持任意位数的整数计算，不过更加方便。</p>

<p>我的系统是64位的，最大符号整数为0x7fffffffffffffff，我们来看看两个0x7fffffffffffffff相加会发生什么事情。<!-- more --></p>

<p><a href="http://everet.org/wp-content/uploads/2012/05/Screenshot-from-2012-05-16-115620.png"><img src="http://everet.org/wp-content/uploads/2012/05/Screenshot-from-2012-05-16-115620.png" alt="" /></a></p>

<p>我们可以看到c的值已经超越C语言中long能够表示的最大整数了，所以Python将其变成了type为long的类型。那么什么时候需要转换呢？</p>

<p>答案是，当溢出的时候。但是我们怎么知道何时溢出？</p>

<p>我们来看一下Python中对于加法的实现。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>python  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">case</span> <span class="n">BINARY_ADD</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">w</span> <span class="o">=</span> <span class="n">POP</span><span class="p">();</span>
</span><span class='line'><span class="n">v</span> <span class="o">=</span> <span class="n">TOP</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">PyInt_CheckExact</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">PyInt_CheckExact</span><span class="p">(</span><span class="n">w</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">/*</span> <span class="n">INLINE</span><span class="p">:</span> <span class="nb">int</span> <span class="o">+</span> <span class="nb">int</span> <span class="o">*/</span>
</span><span class='line'>    <span class="n">register</span> <span class="nb">long</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">PyInt_AS_LONG</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="n">PyInt_AS_LONG</span><span class="p">(</span><span class="n">w</span><span class="p">);</span>
</span><span class='line'>    <span class="o">/*</span> <span class="n">cast</span> <span class="n">to</span> <span class="n">avoid</span> <span class="n">undefined</span> <span class="n">behaviour</span>
</span><span class='line'>       <span class="n">on</span> <span class="n">overflow</span> <span class="o">*/</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="nb">long</span><span class="p">)((</span><span class="n">unsigned</span> <span class="nb">long</span><span class="p">)</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">i</span><span class="o">^</span><span class="n">a</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">i</span><span class="o">^</span><span class="n">b</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">goto</span> <span class="n">slow_add</span><span class="p">;</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="n">PyInt_FromLong</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">PyString_CheckExact</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>         <span class="n">PyString_CheckExact</span><span class="p">(</span><span class="n">w</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="n">string_concatenate</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">next_instr</span><span class="p">);</span>
</span><span class='line'>    <span class="o">/*</span> <span class="n">string_concatenate</span> <span class="n">consumed</span> <span class="n">the</span> <span class="n">ref</span> <span class="n">to</span> <span class="n">v</span> <span class="o">*/</span>
</span><span class='line'>    <span class="n">goto</span> <span class="n">skip_decref_vx</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">slow_add</span><span class="p">:</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="n">PyNumber_Add</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">Py_DECREF</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">skip_decref_vx</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Py_DECREF</span><span class="p">(</span><span class="n">w</span><span class="p">);</span>
</span><span class='line'><span class="n">SET_TOP</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="n">NULL</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'><span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可见，当</p>

<blockquote><p>if ((i<sup>a)</sup> &lt; 0 &amp;&amp; (i<sup>b)</sup> &lt; 0) goto slow_add;</p></blockquote>

<p>为真的时候就是发生溢出了，所以去到了慢速加法通道。
那我们有</p>

<blockquote><p>i = a + b</p></blockquote>

<p>什么时候溢出呢？在a、b都为正数的时候和为负数（正正负）或者a、b都为负数的时候和为正数（负负正）。
所以当 (i<sup>a)</sup> &lt; 0 &amp;&amp; (i<sup>b)</sup> &lt; 0 为 true 的时候溢出了，因为它们的最高位都符合正正负或负负正。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++与Python混合编程]]></title>
    <link href="http://cedricporter.github.com/2012/05/cpp-python.html"/>
    <updated>2012-05-04T05:21:46+08:00</updated>
    <id>http://cedricporter.github.com/2012/05/cpp-python</id>
    <content type="html"><![CDATA[<p>混合语言策略可以汲取各语言之所长，让开发更加敏捷。混合语言策略在在应用得当时可以让程序更加优雅。</p>

<p>在《Unix编程艺术》中，Raymond说道：</p>

<blockquote><p>混合语言是一种知识密集型（而不是编码密集型）的编程。要让它能够工作，我们不仅应该具备相当数量的多种语言应用知识，并且还需要具备能够判断这些语言在什么地方最适合、以及怎样把他们组合在一起的潜经验。</p></blockquote>

<p>在混合语言编程中，我们遇到的第一个问题是如何需要让他们可以互相调用。也就是像C++可以调用Python的函数、Python又可以调用C++的函数。</p>

<p>对于C++和Python的混合编程主要有两种方式。</p>

<ol>
<li><p>将C++写的模块编译成动态链接库，然后由Python主程序使用。这种一般是单方向的使用。</p></li>
<li><p>用C++主程序调用Python。然后Python中可以使用C++主程序的函数。</p></li>
</ol>


<p>对于第一种方式非常简单，我们在此就不讨论了。我们将着重讨论第二种方式。<!-- more --></p>

<h2>Simple Exampe of Mixing C++ and Python Code</h2>

<p>我们举个例子。以下是C++主程序，做的事情是创建了一个空白的地图，然后加载Python模块构建地图。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>cpp  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// website: http://EverET.org&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">iostream</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">vector</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">/</span><span class="n">python</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Map</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Map</span><span class="p">()</span> <span class="o">:</span> <span class="n">m_map</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">char</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="mi">20</span><span class="p">,</span> <span class="sc">&#39;.&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">SetPixel</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">m_map</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Print</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">m_map</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">m_map</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">m_map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">char</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">m_map</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">InitPython</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Py_Initialize</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">Py_IsInitialized</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Get the instance of the map, Singleton Pattern</span>
</span><span class='line'><span class="c1">// only one map instance exists</span>
</span><span class='line'><span class="n">Map</span><span class="o">*</span> <span class="n">GetMapInstance</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">Map</span><span class="o">*</span> <span class="n">the_map</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">the_map</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">the_map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Map</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">the_map</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// export c++ function and class to python</span>
</span><span class='line'><span class="n">BOOST_PYTHON_MODULE</span><span class="p">(</span><span class="n">MyEngine</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="o">::</span><span class="n">python</span><span class="p">;</span>
</span><span class='line'><span class="n">def</span><span class="p">(</span><span class="s">&quot;GetMapInstance&quot;</span><span class="p">,</span> <span class="n">GetMapInstance</span><span class="p">,</span>
</span><span class='line'><span class="n">return_value_policy</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">reference_existing_object</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;());</span>
</span><span class='line'><span class="n">class_</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Map</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="s">&quot;Map&quot;</span><span class="p">,</span> <span class="s">&quot;Game Map&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">def</span><span class="p">(</span><span class="s">&quot;Print&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">Map</span><span class="o">::</span><span class="n">Print</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">def</span><span class="p">(</span><span class="s">&quot;SetPixel&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">Map</span><span class="o">::</span><span class="n">SetPixel</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="n">arg</span><span class="p">(</span><span class="s">&quot;x&quot;</span><span class="p">),</span> <span class="s">&quot;y&quot;</span><span class="p">,</span> <span class="s">&quot;val&quot;</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">try</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="o">::</span><span class="n">python</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">InitPython</span><span class="p">();</span>
</span><span class='line'><span class="n">initMyEngine</span><span class="p">();</span> <span class="c1">// init MyEngine Module</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Add current path to sys.path. You have to</span>
</span><span class='line'><span class="c1">// do this in linux. While in Windows,</span>
</span><span class='line'><span class="c1">// current path is already in sys.path.</span>
</span><span class='line'><span class="n">object</span> <span class="n">main_module</span> <span class="o">=</span> <span class="n">import</span><span class="p">(</span> <span class="s">&quot;__main__&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="n">object</span> <span class="n">main_namespace</span> <span class="o">=</span> <span class="n">main_module</span><span class="p">.</span><span class="n">attr</span><span class="p">(</span> <span class="s">&quot;__dict__&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="n">object</span> <span class="n">ignored</span> <span class="o">=</span> <span class="n">exec</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;import sys</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="s">&quot;sys.path.append(&#39;.&#39;)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">main_namespace</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Map</span><span class="o">*</span> <span class="n">map</span> <span class="o">=</span> <span class="n">GetMapInstance</span><span class="p">();</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;Before python</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">map</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Print</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// load python to design the map</span>
</span><span class='line'><span class="n">object</span> <span class="n">mapMaker</span> <span class="o">=</span> <span class="n">import</span><span class="p">(</span><span class="s">&quot;mapmaker&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">object</span> <span class="n">makeMap</span> <span class="o">=</span> <span class="n">mapMaker</span><span class="p">.</span><span class="n">attr</span><span class="p">(</span><span class="s">&quot;make_map&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">makeMap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">After python</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">map</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Print</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">catch</span> <span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">PyErr_Print</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Python写的地图生成程序：mapmaker.py。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>python  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">MyEngine</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_map</span><span class="p">():</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">the_map</span> <span class="o">=</span> <span class="n">MyEngine</span><span class="o">.</span><span class="n">GetMapInstance</span><span class="p">()</span>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span> <span class="o">-</span> <span class="n">i</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="n">the_map</span><span class="o">.</span><span class="n">SetPixel</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;*&#39;</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们可以仔细看看C++和Python代码中被高亮的行（代码是js高亮的，如果还没高亮请稍等页面加载完成）。</p>

<p>C++通过Boost库可以方便地和Python交互。当然我们还可以直接是用解释器提供的C API的和Python交互，不过这样会有非常多的累赘的代码。</p>

<p>C++和Python交互的关键之处是通过BOOST_PYTHON_MODULE来导出C++的函数和类，此外还需要执行initMyEngine这个函数来将这个模块注册进Python解释器。具体细节可以见代码。</p>

<p>对于</p>

<blockquote></blockquote>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def("GetMapInstance", GetMapInstance,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>return_value_policy&lt; reference_existing_object &gt;());
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>中的return_value_policy&lt; reference_existing_object >()可以参考我以前写的：<a href="http://blog.csdn.net/cedricporter/article/details/6828322">http://blog.csdn.net/cedricporter/article/details/6828322</a></p>

<h2>编译：</h2>

<blockquote><p>g++ main.cpp -o map -I/usr/include/python2.7 -lboost_python -lpython2.7</p></blockquote>

<p>在Windows上编译更容易，就不再罗嗦。</p>

<p>最后程序的输出，可以见到Python将地图由空白变成了一个三角形：</p>

<p><a href="http://everet.org/wp-content/uploads/2012/05/Screenshot-from-2012-05-03-210111.png"><img src="http://everet.org/wp-content/uploads/2012/05/Screenshot-from-2012-05-03-210111.png" alt="" /></a></p>

<h2>Example</h2>

<p>对于用合适的语言来做合适的事情，会让开发效率和产品质量有所提高。例如，在Emacs里面，就可以是用lisp来控制emacs，AutoCAD中也可以是用脚本来绘图。这样的用户接口更加灵活。</p>

<h2>Other</h2>

<h3>Scar</h3>

<p>对于Scar这款3D太空：<a href="http://everet.org/2012/01/scar.html">http://everet.org/2012/01/scar.html</a>，是用C++和Python混合编程。在Scar中的2D界面库，有C++写成的基本元件，例如容器和按钮。我们可以在Python中组装C++元件来装配游戏的2D界面，然后返回一棵树的根节点给C++。于是像Scar中的水平仪，提示面板，地图，血条等等都是在Python中组装好的。此外，我们还可以在Python中编写元件的事件处理函数。这样做的好处是，我们在修改界面的时候，不再需要重新编译程序，只要修改脚本就好。</p>

<p>这样的开发会更加便捷而且应对变更的能力会更强。</p>

<h3>ImaginationFactory</h3>

<p>Imagination Factory是在大一的时候写的一个图像处理程序，<a href="http://everet.org/2012/01/imagination-factory.html">http://everet.org/2012/01/imagination-factory.html</a>。</p>

<p>图像处理核心使用C++编写，界面使用C#/WPF编写。用WPF写界面即方便又便捷，可以轻松地实现很酷的效果。</p>

<h3>Clover —— Computer Simulation Origami</h3>

<p>Clover是一款计算机模拟折纸的程序，主要程序使用C#编写，内嵌Python解释器，可以用Python折纸。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UltraDemo —— 数据结构实验平台]]></title>
    <link href="http://cedricporter.github.com/2012/04/ultrademo.html"/>
    <updated>2012-04-19T04:49:32+08:00</updated>
    <id>http://cedricporter.github.com/2012/04/ultrademo</id>
    <content type="html"><![CDATA[<p>传统数据结构教学中，老师站在讲台上讲课，放着PPT，而学生坐在下面神游。 原因何在？因为学生缺乏实践机会，所以注意力难以集中。</p>

<p>于是UltraDemo诞生了！ UltraDemo提供一个自己动手实践的平台，我们可以在UltraDemo中编程，并且可以对数据结构可视化。 这个是一个编程实践平台，可以在上面写代码，编译，执行，并且可以查看图形化的数据结构。UltraDemo支持单步执行，支持断点，支持查看当前作用域的变量，支持自动执行，支持自动执行速度选择，支持动画。</p>

<p>UltraDemo已经开源～</p>

<p>源码：<a href="https://github.com/cedricporter/UltraDemo">https://github.com/cedricporter/UltraDemo</a></p>

<h2>UltraDemo主要提供以下的功能：</h2>

<!-- more -->


<h2></h2>

<ol>
<li><p>用户可以在Ultra Demo中编写类C语言的代码，并编译执行。这使UltraDemo不仅仅是一款演示软件，也是一个非常优秀的实验平台。</p></li>
<li><p>用户可为自己编写的代码选择相应的演示动画模块。这样，在代码运行时，用户就可以获得可视化的结果输出。</p></li>
<li><p>UltraDemo还提供断点调试功能。用户可通过输出窗口和内存窗口监视代码的运行状况。</p></li>
<li><p>由于动画模块是以dll插件形式集成到UltraDemo中的，因此高级用户可以根据我们提供的接口，自己编写自己的动画模块。</p></li>
</ol>


<p>UltraDemo可将源代码编译产生的中间代码和汇编代码输出供用户学习。</p>

<h2>运行截图</h2>

<p><a href="http://everet.org/wp-content/uploads/2012/04/image8.png"><img src="http://everet.org/wp-content/uploads/2012/04/image_thumb8.png" alt="image" /></a></p>

<p><a href="http://everet.org/wp-content/uploads/2012/04/Untitled.jpg"><img src="http://everet.org/wp-content/uploads/2012/04/Untitled_thumb.jpg" alt="Untitled" /></a></p>

<h2>技术架构</h2>

<p>UltraDemo主要由三大模块组成，分别是编译解释模块，控制器模块和动画模块。其中编译解释模块以C++编写，控制模块和动画模块在WPF/C#中完成。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/04/clip_image0026.gif"><img src="http://everet.org/wp-content/uploads/2012/04/clip_image0026_thumb.gif" alt="clip_image002[6]" /></a></p>

<h3>编译解释模块：</h3>

<p>现有的所有调试器都可分为两大类。第一类调试器利用处理器提供的调试工具，而第二类调试器自行仿真处理器并完全控制所调试程序的执行过程。</p>

<p>因为前者性能低下，所以我们采用后者，仿真处理器进行调试。</p>

<h3>控制器模块：</h3>

<p>其它两个模块将被编译成dll文件，被控制器模块调用。控制器模块负责初始化这两个模块的实例。对于编译解释模块，控制器模块提供解释运行速度的控制，包括断点，单步，暂停等。对于动画模块，控制器模块提供插件扫描和动画帧率控制。值得一提的是，解释运行速度和动画运行速度并不是绑定的。当解释器以单步运行时，动画模块依旧在以60帧每秒的速度播放动画。然而，控制模块提供了使两个模块同步的机制，使得动画不会提前或延后于解释器完成。</p>

<h3>动画模块：</h3>

<p>动画模块监视内存中的关键变量，并通过这些变量的状态来控制动画的进程。比如汉诺塔动画，动画模块只要监视三个变量（汉诺塔层数size，离开的柱子start和进入的柱子goal），就可以通过监视这些变量的数值改变来完成动画。首先动画模块将需要监视的变量的变量名传给控制器，在代码运行时，控制器就会将相应变量的内存地址回传给动画模块。由于动画模块被设计为“即插即用”，因此新增特定的动画并不需要重新编译主程序。</p>

<h3>UltraDemo文法</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>text  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Program               -&gt;  external_declaration
</span><span class='line'>external_declaration  -&gt;  Func_definitions&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | external_decl_stmt
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Func_definitions      -&gt;  {Func_definition}+
</span><span class='line'>Func_definition       -&gt;  type id “(“ param_type_list “)” block
</span><span class='line'>external_decl_stmt    -&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | type declarators “;”
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Type                  -&gt;  int&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | float
</span><span class='line'>                   | double
</span><span class='line'>                   | char
</span><span class='line'>                   | long
</span><span class='line'>                   | ………….
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Param_type_list       -&gt;  type id {type_param}*&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   |
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Type_param            -&gt;  “,” type id&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   |
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Block                 -&gt;  “{“ stmts “}”
</span><span class='line'>Stmts                 -&gt;  decl_stmt&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | if_stmt
</span><span class='line'>                   | while_stmt
</span><span class='line'>                   | for_stmt
</span><span class='line'>                   | dowhile_stmt
</span><span class='line'>                   | switch_stmt
</span><span class='line'>                   | return_stmt
</span><span class='line'>                   | assign
</span><span class='line'>                   |
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Decl_stmt             -&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | type declarators “;”
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Declarators           -&gt;  declarator { “,” declarator }
</span><span class='line'>Declarator            -&gt;  {Pointer}? id { arrayDeclarator}  ? assignForDecl
</span><span class='line'>Pointer               -&gt;  “*” {pointer}?
</span><span class='line'>arrayDeclarator       -&gt;  “[“ {const_expr}? “]” {arrayDeclarator}?
</span><span class='line'>const_expr            -&gt;  conditional_expr
</span><span class='line'>conditional_expr      -&gt;  logical_expr&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | logical_expr “?” expr : conditional_expr
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;assignForDecl         -&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “=” expr
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;factor                -&gt;  num&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “(“ expr “)”
</span><span class='line'>                   | abstract_declarator
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;abstract_declarator   -&gt;  id&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | id “[“ expr “]”
</span><span class='line'>                   | id “(“ param_list “)”
</span><span class='line'>                   | id “-&amp;gt;” abstract_declarator
</span><span class='line'>                   | id “.” abstract_declarator
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;param_list            -&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | param { “,” param }*
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;param                 -&gt;  expr
</span><span class='line'>if_stmt               -&gt;  “if” “(“ expr “)” compound_stmt
</span><span class='line'>compound_stmt         -&gt;  block&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | stmt
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;while_stmt            -&gt;  “while” “(“ expr “)” compound_stmt
</span><span class='line'>assign                -&gt;  Declarator “=” expr
</span><span class='line'>expr                  -&gt;  assignment_expr {“,” assignment_expr }+
</span><span class='line'>assignment_expr       -&gt;  conditional_expr&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | unary_expr assgnment_op assignment_expr
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;assgnment_op          -&gt;  “=”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “+=”
</span><span class='line'>                   | …
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;unary_op              -&gt;  “&amp;amp;”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “+”
</span><span class='line'>                   | “*”
</span><span class='line'>                   | …
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;unary_expr            -&gt;  postfix_expr&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “++” unary_expr
</span><span class='line'>                   | “—“ unary_expr
</span><span class='line'>                   | unary_op cast_expr
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cast_expr             -&gt;  unary_expr&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “(“ type_name “)” cast_expr
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;postfix_expr          -&gt;  primary_expr { postfix_op }+
</span><span class='line'>postfix_op            -&gt;  “[“ expr “]”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “(“ assignment_expr “)”
</span><span class='line'>                   | “-&amp;gt;” id
</span><span class='line'>                   | “.” Id
</span><span class='line'>                   | “++”
</span><span class='line'>                   | “—“
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;primary_expr          -&gt;  id&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | constant
</span><span class='line'>                   | string
</span><span class='line'>                   | “(“ expr “)”
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;constant              -&gt;  integer_const&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | char_const
</span><span class='line'>                   | floating_const
</span><span class='line'>                   | enum_const
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>格式化文法的工具请见：<a href="http://everet.org/2012/03/the-format-grammer.html">http://everet.org/2012/03/the-format-grammer.html</a></p>

<h2>UltraDemo开发人员</h2>

<p><a href="http://EverET.org">华亮</a> <a href="http://kidsang.com">屠文翔</a> <a href="http://xuyufish.com">杨旭瑜</a> <a href="http://jiafei.org">罗嘉飞</a> 安迪 杨明锦</p>

<p>UltraDemo的曾经的点滴：<a href="http://everet.org/2012/02/ultrademo-interface-rewritten-in-c.html">http://everet.org/2012/02/ultrademo-interface-rewritten-in-c.html</a></p>

<p>项目即将开源，敬请期待~~~</p>
]]></content>
  </entry>
  
</feed>
