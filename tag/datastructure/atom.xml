<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: DataStructure | EverET.org]]></title>
  <link href="http://everet.org/tag/datastructure/atom.xml" rel="self"/>
  <link href="http://everet.org/"/>
  <updated>2012-12-25T19:29:01+08:00</updated>
  <id>http://everet.org/</id>
  <author>
    <name><![CDATA[Stupid ET]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UltraDemo —— 数据结构实验平台]]></title>
    <link href="http://everet.org/2012/04/ultrademo.html"/>
    <updated>2012-04-19T04:49:32+08:00</updated>
    <id>http://everet.org/2012/04/ultrademo</id>
    <content type="html"><![CDATA[<p>传统数据结构教学中，老师站在讲台上讲课，放着PPT，而学生坐在下面神游。 原因何在？因为学生缺乏实践机会，所以注意力难以集中。</p>

<p>于是UltraDemo诞生了！ UltraDemo提供一个自己动手实践的平台，我们可以在UltraDemo中编程，并且可以对数据结构可视化。 这个是一个编程实践平台，可以在上面写代码，编译，执行，并且可以查看图形化的数据结构。UltraDemo支持单步执行，支持断点，支持查看当前作用域的变量，支持自动执行，支持自动执行速度选择，支持动画。</p>

<p>UltraDemo已经开源～</p>

<p>源码：<a href="https://github.com/cedricporter/UltraDemo">https://github.com/cedricporter/UltraDemo</a></p>

<h2>UltraDemo主要提供以下的功能：</h2>

<!-- more -->


<h2></h2>

<ol>
<li><p>用户可以在Ultra Demo中编写类C语言的代码，并编译执行。这使UltraDemo不仅仅是一款演示软件，也是一个非常优秀的实验平台。</p></li>
<li><p>用户可为自己编写的代码选择相应的演示动画模块。这样，在代码运行时，用户就可以获得可视化的结果输出。</p></li>
<li><p>UltraDemo还提供断点调试功能。用户可通过输出窗口和内存窗口监视代码的运行状况。</p></li>
<li><p>由于动画模块是以dll插件形式集成到UltraDemo中的，因此高级用户可以根据我们提供的接口，自己编写自己的动画模块。</p></li>
</ol>


<p>UltraDemo可将源代码编译产生的中间代码和汇编代码输出供用户学习。</p>

<h2>运行截图</h2>

<p><a href="http://everet.org/wp-content/uploads/2012/04/image8.png"><img src="http://everet.org/wp-content/uploads/2012/04/image_thumb8.png" alt="image" /></a></p>

<p><a href="http://everet.org/wp-content/uploads/2012/04/Untitled.jpg"><img src="http://everet.org/wp-content/uploads/2012/04/Untitled_thumb.jpg" alt="Untitled" /></a></p>

<h2>技术架构</h2>

<p>UltraDemo主要由三大模块组成，分别是编译解释模块，控制器模块和动画模块。其中编译解释模块以C++编写，控制模块和动画模块在WPF/C#中完成。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/04/clip_image0026.gif"><img src="http://everet.org/wp-content/uploads/2012/04/clip_image0026_thumb.gif" alt="clip_image002[6]" /></a></p>

<h3>编译解释模块：</h3>

<p>现有的所有调试器都可分为两大类。第一类调试器利用处理器提供的调试工具，而第二类调试器自行仿真处理器并完全控制所调试程序的执行过程。</p>

<p>因为前者性能低下，所以我们采用后者，仿真处理器进行调试。</p>

<h3>控制器模块：</h3>

<p>其它两个模块将被编译成dll文件，被控制器模块调用。控制器模块负责初始化这两个模块的实例。对于编译解释模块，控制器模块提供解释运行速度的控制，包括断点，单步，暂停等。对于动画模块，控制器模块提供插件扫描和动画帧率控制。值得一提的是，解释运行速度和动画运行速度并不是绑定的。当解释器以单步运行时，动画模块依旧在以60帧每秒的速度播放动画。然而，控制模块提供了使两个模块同步的机制，使得动画不会提前或延后于解释器完成。</p>

<h3>动画模块：</h3>

<p>动画模块监视内存中的关键变量，并通过这些变量的状态来控制动画的进程。比如汉诺塔动画，动画模块只要监视三个变量（汉诺塔层数size，离开的柱子start和进入的柱子goal），就可以通过监视这些变量的数值改变来完成动画。首先动画模块将需要监视的变量的变量名传给控制器，在代码运行时，控制器就会将相应变量的内存地址回传给动画模块。由于动画模块被设计为“即插即用”，因此新增特定的动画并不需要重新编译主程序。</p>

<h3>UltraDemo文法</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>text  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Program               -&gt;  external_declaration
</span><span class='line'>external_declaration  -&gt;  Func_definitions&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | external_decl_stmt
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Func_definitions      -&gt;  {Func_definition}+
</span><span class='line'>Func_definition       -&gt;  type id “(“ param_type_list “)” block
</span><span class='line'>external_decl_stmt    -&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | type declarators “;”
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Type                  -&gt;  int&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | float
</span><span class='line'>                   | double
</span><span class='line'>                   | char
</span><span class='line'>                   | long
</span><span class='line'>                   | ………….
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Param_type_list       -&gt;  type id {type_param}*&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   |
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Type_param            -&gt;  “,” type id&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   |
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Block                 -&gt;  “{“ stmts “}”
</span><span class='line'>Stmts                 -&gt;  decl_stmt&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | if_stmt
</span><span class='line'>                   | while_stmt
</span><span class='line'>                   | for_stmt
</span><span class='line'>                   | dowhile_stmt
</span><span class='line'>                   | switch_stmt
</span><span class='line'>                   | return_stmt
</span><span class='line'>                   | assign
</span><span class='line'>                   |
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Decl_stmt             -&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | type declarators “;”
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Declarators           -&gt;  declarator { “,” declarator }
</span><span class='line'>Declarator            -&gt;  {Pointer}? id { arrayDeclarator}  ? assignForDecl
</span><span class='line'>Pointer               -&gt;  “*” {pointer}?
</span><span class='line'>arrayDeclarator       -&gt;  “[“ {const_expr}? “]” {arrayDeclarator}?
</span><span class='line'>const_expr            -&gt;  conditional_expr
</span><span class='line'>conditional_expr      -&gt;  logical_expr&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | logical_expr “?” expr : conditional_expr
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;assignForDecl         -&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “=” expr
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;factor                -&gt;  num&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “(“ expr “)”
</span><span class='line'>                   | abstract_declarator
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;abstract_declarator   -&gt;  id&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | id “[“ expr “]”
</span><span class='line'>                   | id “(“ param_list “)”
</span><span class='line'>                   | id “-&amp;gt;” abstract_declarator
</span><span class='line'>                   | id “.” abstract_declarator
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;param_list            -&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | param { “,” param }*
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;param                 -&gt;  expr
</span><span class='line'>if_stmt               -&gt;  “if” “(“ expr “)” compound_stmt
</span><span class='line'>compound_stmt         -&gt;  block&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | stmt
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;while_stmt            -&gt;  “while” “(“ expr “)” compound_stmt
</span><span class='line'>assign                -&gt;  Declarator “=” expr
</span><span class='line'>expr                  -&gt;  assignment_expr {“,” assignment_expr }+
</span><span class='line'>assignment_expr       -&gt;  conditional_expr&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | unary_expr assgnment_op assignment_expr
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;assgnment_op          -&gt;  “=”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “+=”
</span><span class='line'>                   | …
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;unary_op              -&gt;  “&amp;amp;”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “+”
</span><span class='line'>                   | “*”
</span><span class='line'>                   | …
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;unary_expr            -&gt;  postfix_expr&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “++” unary_expr
</span><span class='line'>                   | “—“ unary_expr
</span><span class='line'>                   | unary_op cast_expr
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cast_expr             -&gt;  unary_expr&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “(“ type_name “)” cast_expr
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;postfix_expr          -&gt;  primary_expr { postfix_op }+
</span><span class='line'>postfix_op            -&gt;  “[“ expr “]”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | “(“ assignment_expr “)”
</span><span class='line'>                   | “-&amp;gt;” id
</span><span class='line'>                   | “.” Id
</span><span class='line'>                   | “++”
</span><span class='line'>                   | “—“
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;primary_expr          -&gt;  id&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | constant
</span><span class='line'>                   | string
</span><span class='line'>                   | “(“ expr “)”
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;constant              -&gt;  integer_const&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   | char_const
</span><span class='line'>                   | floating_const
</span><span class='line'>                   | enum_const
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>格式化文法的工具请见：<a href="http://everet.org/2012/03/the-format-grammer.html">http://everet.org/2012/03/the-format-grammer.html</a></p>

<h2>UltraDemo开发人员</h2>

<p><a href="http://EverET.org">华亮</a> <a href="http://kidsang.com">屠文翔</a> <a href="http://xuyufish.com">杨旭瑜</a> <a href="http://jiafei.org">罗嘉飞</a> 安迪 杨明锦</p>

<p>UltraDemo的曾经的点滴：<a href="http://everet.org/2012/02/ultrademo-interface-rewritten-in-c.html">http://everet.org/2012/02/ultrademo-interface-rewritten-in-c.html</a></p>

<p>项目即将开源，敬请期待~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clover折纸数据结构的文件保存]]></title>
    <link href="http://everet.org/2012/03/clover-save-file.html"/>
    <updated>2012-03-11T08:49:53+08:00</updated>
    <id>http://everet.org/2012/03/clover-save-file</id>
    <content type="html"><![CDATA[<p>Clover的数据结构是由面层，边层和点层所组成。</p>

<h2>面层</h2>

<p>面层是一棵二叉树外加一个面组用于实现重叠的面的拾取和避免Z-Buffer失效。当发生折叠的时候，肯定至少有一个面会被分割成为两个面，所以二叉树的叶子增加两个节点，叶子更新，渲染层也需要更新。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/03/facetree.png"><img src="http://everet.org/wp-content/uploads/2012/03/facetree_thumb.png" alt="facetree" /></a></p>

<h2></h2>

<h2>边层</h2>

<p>边层是二叉树组成的森林，</p>

<p><a href="http://everet.org/wp-content/uploads/2012/03/facetree1.png"><img src="http://everet.org/wp-content/uploads/2012/03/facetree_thumb1.png" alt="facetree" /></a></p>

<!-- more -->


<h2>点层</h2>

<p>至于点层，就是十字链表。就是链表串着链表。当一个点的位置发生变化，它就会克隆一个自己向下插入到历史表中。有新的点产生时，则会向右边增加。这里是整个数据结构的核心，面层和边层只是对于点层的索引罢了。</p>

<p>我们在保存前会给顶点分配ID。</p>

<p>所以整个折纸过程都在这个数据结构里面。只要辅助我们精心设计的ShadowSystem，就可以Undo和Redo，甚至重放整个折纸过程。</p>

<h2></h2>

<h2>保存文件</h2>

<p>现在我们的问题可以抽象为，保存面二叉树，边森林，和点十字链表，只是将他们保存到文件肯定很容易，但是如何将他们之间的关系保存到文件里面就是需要我们细细斟酌了。</p>

<p>今晚花了一整个晚上把保存文件和读取文件做了，借鉴了编译器的语法分析器的思想和关系数据库的表之间的关联的思想，来做文件的保存和读取。</p>

<h3>文件格式文法</h3>

<blockquote><p><strong>Clover</strong>                –> VertexLayer EdgeLayer FaceLayer ShadowSytem</p></blockquote>

<p><strong>ShadowSysem</strong>->TrunkName num SnapshotNode*</p>

<p><strong>SnapshotNode</strong>  -> type num face+ num edge* num vertex_id  originVertexListCount  originEdgeListCount</p>

<p><strong>VertexLayer</strong>  -> TrunkName VertexTable vertex_count</p>

<p><strong>EdgeLayer</strong>    -> TrunkName num EdgeTree+</p>

<p><strong>EdgeTree</strong>       –> Edge+</p>

<p><strong>FaceLayer</strong>     –> TrunkName FaceTree</p>

<p><strong>FaceTree</strong>       –> Face+</p>

<p><strong>Edge</strong>              –> edge_id vertex1_id vertex2_id</p>

<p>| –1</p>

<p><strong>Face</strong>              –> face_id start_vertex1 start_vertex2 num edge_id+</p>

<p>| –1</p>

<p><strong>face_id</strong>         -> positive_number</p>

<p><strong>edge_id</strong>        -> positive_number</p>

<p>我使用自顶向下的语法分析方法，这样实现起来很快，也就是一大堆递归。</p>

<p>敏捷~</p>

<p>那么我们如何关联面和边,边和点呢? 这个借鉴了关系数据库的思想,使用主码来关联表,也就是我给边和点都分配了id后存入,这样读取的时候可以根据id来重建这些数据结构的联系.</p>

<p>再次印证了很多年前就被灌输的 程序=数据结构+算法 的思想了。</p>

<p>就是这么简单啦~~哇哈哈~~~~~</p>
]]></content>
  </entry>
  
</feed>
