<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: OGRE | EverET.org]]></title>
  <link href="http://everet.org/tag/ogre/atom.xml" rel="self"/>
  <link href="http://everet.org/"/>
  <updated>2013-01-03T13:14:59+08:00</updated>
  <id>http://everet.org/</id>
  <author>
    <name><![CDATA[Stupid ET]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[神奇的Python：解析OGRE配置文件]]></title>
    <link href="http://everet.org/2012/03/python-parse-ogre-configuration-file.html"/>
    <updated>2012-03-17T03:19:52+08:00</updated>
    <id>http://everet.org/2012/03/python-parse-ogre-configuration-file</id>
    <content type="html"><![CDATA[<blockquote>
  <p>OGRE（Object-Oriented Graphics Rendering Engine，即：面向对象图形渲染引擎）是一个用C++开发的面向场景、非常灵活的3D引擎，它旨在让开发人员更容易、更直接地利用硬件加速的3D图形系统开发应用。这个类库隐藏了底层系统库（如：Direct3D和OpenGL）的所有细节，提供了一个基于世界对象和其他直观类的接口。 译者注:ogre在英文中意为：食人魔鬼, 怪物, 象鬼的人，故其LOGO是一个怪物头。</p>
</blockquote>

<p>以上引用自百度百科。</p>

<p>OGRE的很多东西都通过配置文件来控制，这样会很灵活。</p>

<p>配置文件的例子如下：</p>

<p>``` ini
[Bootstrap]
Zip=../media/packs/OgreCore.zip</p>

<h1 id="resource-locations-to-be-added-to-the-default-path">Resource locations to be added to the default path</h1>
<p>[General]
FileSystem=../media
FileSystem=../media/fonts
FileSystem=../media/sounds
Zip=../media/packs/ogretestmap.zip
Zip=../media/packs/skybox.zip
#Zip=../media/packs/chiropteraDM.pk3
```</p>

<p>它分了section，在section下有许多配置语句，也就是一些赋值语句。</p>

<p>其配置文件的文法类似如下：<!-- more --></p>

<p>```
file –&gt; section+</p>

<p>section –&gt; ‘[‘ identifier ‘]’body</p>

<p>body –&gt; statement</p>

<p>statement –&gt; assign_statement</p>

<p>assign_statement –&gt; identifer ‘=’value
```</p>

<p>我们可以借助一个Python的SimpleParse模块进行分析。这是一款强大Python解析模块。</p>

<p>可以围观上文<a href="http://everet.org/2012/03/the-format-grammer.html"> http://everet.org/2012/03/the-format-grammer.html</a></p>

<p>以下是一个解析OGRE配置文件的Python代码。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>python  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">declaration</span> <span class="o">=</span> <span class="n">r</span><span class="err">’’’</span>
</span><span class='line'><span class="nb">file</span>           <span class="p">:</span><span class="o">=</span>  <span class="p">[</span> \<span class="n">t</span>\<span class="n">n</span><span class="p">]</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">section</span><span class="o">+</span>
</span><span class='line'><span class="n">section</span>        <span class="p">:</span><span class="o">=</span>  <span class="err">‘</span><span class="p">[</span><span class="err">’</span><span class="p">,</span> <span class="n">section_name</span><span class="p">,</span> <span class="err">‘</span><span class="p">]</span><span class="err">’</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span><span class="err">’</span>\<span class="n">n</span><span class="err">’</span><span class="p">,</span> <span class="n">body</span>
</span><span class='line'><span class="n">section_name</span>   <span class="p">:</span><span class="o">=</span>  <span class="n">identifier</span>
</span><span class='line'><span class="n">body</span>           <span class="p">:</span><span class="o">=</span>  <span class="n">statement</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">statement</span>      <span class="p">:</span><span class="o">=</span>  <span class="p">(</span><span class="n">ts</span><span class="p">,</span><span class="err">’</span><span class="c">#’, -‘\n’&lt;em&gt;,’\n’)/equality/nullline</span>
</span><span class='line'><span class="n">nullline</span>       <span class="p">:</span><span class="o">=</span>  <span class="n">ts</span><span class="p">,</span><span class="err">’</span>\<span class="n">n</span><span class="err">’</span>
</span><span class='line'><span class="n">equality</span>       <span class="p">:</span><span class="o">=</span>  <span class="n">ts</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="err">‘</span><span class="o">=</span><span class="err">’</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="err">‘</span>\<span class="n">n</span><span class="err">’</span>
</span><span class='line'><span class="n">item</span>           <span class="p">:</span><span class="o">=</span> <span class="n">identifier</span>
</span><span class='line'><span class="n">identifier</span>     <span class="p">:</span><span class="o">=</span>  <span class="p">[</span><span class="n">a</span><span class="o">-</span><span class="n">zA</span><span class="o">-</span><span class="n">Z</span><span class="p">],</span> <span class="p">[</span><span class="n">a</span><span class="o">-</span><span class="n">zA</span><span class="o">-</span><span class="n">Z0</span><span class="o">-</span><span class="mi">9</span><span class="n">_</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">value</span>          <span class="p">:</span><span class="o">=</span>  <span class="o">-</span><span class="err">‘</span>\<span class="n">n</span><span class="err">’</span><span class="o">*</span>
</span><span class='line'><span class="n">ts</span>             <span class="p">:</span><span class="o">=</span>  <span class="p">[</span> \<span class="n">t</span><span class="p">]</span><span class="o">*</span>
</span><span class='line'><span class="err">‘’’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">text</span> <span class="o">=</span> <span class="err">‘’’</span>
</span><span class='line'><span class="p">[</span><span class="n">Bootstrap</span><span class="p">]</span>
</span><span class='line'><span class="n">Zip</span><span class="o">=../</span><span class="n">media</span><span class="o">/</span><span class="n">packs</span><span class="o">/</span><span class="n">OgreCore</span><span class="o">.</span><span class="n">zip</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;resource-locations-to-be-added-to-the-default-path-1&quot;</span><span class="o">&gt;</span><span class="n">Resource</span> <span class="n">locations</span> <span class="n">to</span> <span class="n">be</span> <span class="n">added</span> <span class="n">to</span> <span class="n">the</span> <span class="n">default</span> <span class="n">path</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">[</span><span class="n">General</span><span class="p">]</span>
</span><span class='line'><span class="n">FileSystem</span><span class="o">=../</span><span class="n">media</span>
</span><span class='line'><span class="n">FileSystem</span><span class="o">=../</span><span class="n">media</span><span class="o">/</span><span class="n">Audio</span>
</span><span class='line'><span class="n">FileSystem</span><span class="o">=../</span><span class="n">media</span><span class="o">/</span><span class="n">sounds</span>
</span><span class='line'><span class="n">FileSystem</span><span class="o">=../</span><span class="n">media</span><span class="o">/</span><span class="n">materials</span><span class="o">/</span><span class="n">programs</span>
</span><span class='line'><span class="n">FileSystem</span><span class="o">=../</span><span class="n">media</span><span class="o">/</span><span class="n">materials</span><span class="o">/</span><span class="n">scripts</span>
</span><span class='line'><span class="n">FileSystem</span><span class="o">=../</span><span class="n">media</span><span class="o">/</span><span class="n">materials</span><span class="o">/</span><span class="n">textures</span>
</span><span class='line'><span class="n">FileSystem</span><span class="o">=../</span><span class="n">media</span><span class="o">/</span><span class="n">models</span>
</span><span class='line'><span class="n">FileSystem</span><span class="o">=../</span><span class="n">media</span><span class="o">/</span><span class="n">overlays</span>
</span><span class='line'><span class="n">Zip</span><span class="o">=../</span><span class="n">media</span><span class="o">/</span><span class="n">packs</span><span class="o">/</span><span class="n">ogretestmap</span><span class="o">.</span><span class="n">zip</span>
</span><span class='line'><span class="c">#Zip=../media/packs/chiropteraDM.pk3&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">’’’</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">simpleparse.parser</span> <span class="kn">import</span> <span class="n">Parser</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pprint</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">lastItem</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="n">section_name</span> <span class="o">=</span> <span class="err">‘’</span>
</span><span class='line'><span class="k">def</span> <span class="nf">config_maker</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>    <span class="err">‘</span><span class="s">&#39;’make the config tuple, and adds them to config’’’</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">config</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lastItem</span><span class="p">,</span> <span class="n">section_name</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">tag</span> <span class="o">==</span> <span class="err">‘</span><span class="n">section_name</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>        <span class="n">section_name</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">end</span><span class="p">]</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">tag</span> <span class="o">==</span> <span class="err">‘</span><span class="n">item</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>        <span class="n">lastItem</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">end</span><span class="p">]</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">tag</span> <span class="o">==</span> <span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>        <span class="n">config</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">lastItem</span><span class="p">,</span> <span class="n">text</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">end</span><span class="p">]))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">travel</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">root</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">tag</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">children</span> <span class="o">=</span> <span class="n">root</span>
</span><span class='line'><span class="n">func</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">children</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">children</span><span class="p">:</span> <span class="n">travel</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">func</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span><span class="err">”</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">”</span><span class="p">:</span>
</span><span class='line'>    <span class="n">parser</span> <span class="o">=</span> <span class="n">Parser</span><span class="p">(</span> <span class="n">declaration</span><span class="p">,</span> <span class="err">“</span><span class="nb">file</span><span class="err">”</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">success</span><span class="p">,</span> <span class="n">resultTrees</span><span class="p">,</span> <span class="n">nextChar</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">text</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">output</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">for</span> <span class="n">section</span> <span class="ow">in</span> <span class="n">resultTrees</span><span class="p">:</span>
</span><span class='line'>    <span class="n">config</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">travel</span><span class="p">(</span><span class="n">section</span><span class="p">,</span> <span class="n">config_maker</span><span class="p">)</span>
</span><span class='line'>    <span class="n">output</span><span class="p">[</span><span class="n">section_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">config</span>
</span><span class='line'>
</span><span class='line'><span class="n">pprint</span><span class="o">.</span><span class="n">pprint</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>输出如下的内容，我们就可以很方便地读取里面的内容了。
<a href="http://everet.org/wp-content/uploads/2012/03/QQ截图20120316192157.png"><img src="http://everet.org/wp-content/uploads/2012/03/QQ截图20120316192157.png" alt="" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clover架构设计会议记录]]></title>
    <link href="http://everet.org/2012/01/clover-architecture-design-meeting.html"/>
    <updated>2012-01-31T00:23:14+08:00</updated>
    <id>http://everet.org/2012/01/clover-architecture-design-meeting</id>
    <content type="html"><![CDATA[<p><strong>消息记录</strong></p>

<p>消息分组:讨论组</p>

<p>消息对象:我怎么听见喘息声。。</p>

<p>日期: 2012-01-30</p>

<p>XellOs</p>

<p>15:09:13</p>

<p>![UARF0O4MI<em>$6HXMIHAA](http://everet.org/wp-content/uploads/2012/01/UARF0O4MI</em>6HXMIHAA98_thumb.jpg)</p>

<p>XellOs</p>

<p>15:10:46</p>

<p>额</p>

<p>XellOs</p>

<p>15:10:56</p>

<p>好吧<!-- more --></p>

<p>15:11:04</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/EARXHLNMG6QY4MSIYYJ.png"><img src="http://everet.org/wp-content/uploads/2012/01/EARXHLNMG6QY4MSIYYJ_thumb.png" alt="EARXH%L@NMG6Q@Y4MSIY(YJ" /></a>15:11:04
杨旭瑜&lt;yangxuyu_fish@qq.com&gt;中止了语音通话。</p>

<p>XellOs</p>

<p>15:11:08</p>

<p>那个顶点是做图单位</p>

<p>XellOs</p>

<p>15:11:16</p>

<p>粒子是力的运算单位</p>

<p>XellOs</p>

<p>15:11:18</p>

<p>不一样的</p>

<p>XellOs</p>

<p>15:11:30</p>

<p>一个粒子可以用多个顶点来做图</p>

<p>XellOs</p>

<p>15:11:37</p>

<p>恩 是的</p>

<p>XellOs</p>

<p>15:11:39</p>

<p>是这个意思</p>

<p>XellOs</p>

<p>15:11:47</p>

<p>就是说粒子只是一个单位而已</p>

<p>XellOs</p>

<p>15:11:58</p>

<p>顶点应该多过粒子的数目的啊</p>

<p>XellOs</p>

<p>15:12:16</p>

<p>顶点只是画图的啊</p>

<p>XellOs</p>

<p>15:12:46</p>

<p>是啊</p>

<p>XellOs</p>

<p>15:12:50</p>

<p>和做terrain差不多啊</p>

<p>XellOs</p>

<p>15:12:54</p>

<p>是那么多的啊</p>

<p>XellOs</p>

<p>15:12:55</p>

<p>很多的啊</p>

<p>XellOs</p>

<p>15:13:09</p>

<p>我们做n body都是30000个粒子了</p>

<p>XellOs</p>

<p>15:13:28</p>

<p>用bill board显示的</p>

<p>XellOs</p>

<p>15:13:33</p>

<p>就是30000啊！</p>

<p>XellOs</p>

<p>15:14:07</p>

<p>恩</p>

<p>XellOs</p>

<p>15:14:48</p>

<p>这样</p>

<p>XellOs</p>

<p>15:15:10</p>

<p>你想像粒子成为一张布上的支撑点</p>

<p>XellOs</p>

<p>15:15:34</p>

<p>然后你用一张布在只受到重力作用这样平铺在上面</p>

<p>XellOs</p>

<p>15:15:52</p>

<p>但是粒子中间的间隙是可以有多个顶点绘制的</p>

<p>XellOs</p>

<p>15:16:39</p>

<p>[![UARF0O4MI<em>$6HXMIHAA]{98](http://everet.org/wp-content/uploads/2012/01/UARF0O4MI</em>6HXMIHAA98<em>thumb1.jpg)](http://everet.org/wp-content/uploads/2012/01/UARF0O4MI</em>6HXMIHAA981.jpg)</p>

<p>XellOs</p>

<p>15:16:47</p>

<p>这个，我还没有考虑数据结构上的</p>

<p>屠文翔</p>

<p>15:16:50</p>

<p>我怎么听见喘息声。。</p>

<p>XellOs</p>

<p>15:16:50</p>

<p>我想想哈。。。</p>

<p>XellOs</p>

<p>15:16:57</p>

<p>我也听见了</p>

<p>XellOs</p>

<p>15:17:07</p>

<p>![UARF0O4MI<em>$6HXMIHAA](http://everet.org/wp-content/uploads/2012/01/UARF0O4MI</em>6HXMIHAA98_thumb2.jpg)</p>

<p>XellOs</p>

<p>15:17:11</p>

<p>怎么可能</p>

<p>XellOs</p>

<p>15:17:14</p>

<p>不可能的</p>

<p>XellOs</p>

<p>15:17:18</p>

<p>我在很安静的小黑屋啊</p>

<p>XellOs</p>

<p>15:17:48</p>

<p>是的</p>

<p>XellOs</p>

<p>15:17:51</p>

<p>传下</p>

<p>XellOs</p>

<p>15:17:52</p>

<p>喘息啊</p>

<p>XellOs</p>

<p>15:17:57</p>

<p><img src="http://everet.org/wp-content/uploads/2012/01/4U8MOI7DP52Q92TC_thumb.gif" alt="4U8MOI7DQ92TC" /></p>

<p>XellOs</p>

<p>15:18:13</p>

<p>那个是用texture来存储的</p>

<p>XellOs</p>

<p>15:18:23</p>

<p>用texture导入给gpu算的</p>

<p>XellOs</p>

<p>15:18:30</p>

<p>粒子的信息</p>

<p>XellOs</p>

<p>15:18:48</p>

<p>你可以参见directx sdk里面的Nbody</p>

<p>XellOs</p>

<p>15:19:03</p>

<p>第一次导入，之后是gpu自己算的</p>

<p>XellOs</p>

<p>15:19:12</p>

<p>粒子系统运算两种</p>

<p>XellOs</p>

<p>15:19:26</p>

<p>一种是初始+变量，一种是实时变的</p>

<p>XellOs</p>

<p>15:19:47</p>

<p>我们这种肯定是实时的啊，也就是需要存储每一次的信息的</p>

<p>XellOs</p>

<p>15:19:55</p>

<p><img src="http://everet.org/wp-content/uploads/2012/01/NFYZI7A9P9HQA0BKSI_thumb.jpg" alt="I" /></p>

<p>XellOs</p>

<p>15:20:01</p>

<p>好的</p>

<p>XellOs</p>

<p>15:20:04</p>

<p>好纠结</p>

<p>屠文翔</p>

<p>15:20:03</p>

<p><img src="http://everet.org/wp-content/uploads/2012/01/XN9XY3P2OIAVBS4IKR8MW_thumb.jpg" alt="X" /></p>

<p>XellOs</p>

<p>15:20:25</p>

<p>恩，就是啊。。</p>

<p>XellOs</p>

<p>15:20:30</p>

<p>想想先。。</p>

<p>XellOs</p>

<p>15:20:49</p>

<p>可以先列个list</p>

<p>XellOs</p>

<p>15:20:59</p>

<p>就是对高层的需求</p>

<p>XellOs</p>

<p>15:21:07</p>

<p>然后再往下考虑</p>

<p>XellOs</p>

<p>15:21:12</p>

<p>就是说高层需要做到什么</p>

<p>屠文翔</p>

<p>15:21:26</p>

<p>点 边 面</p>

<p>屠文翔</p>

<p>15:21:39</p>

<p>鼠标选取</p>

<p>屠文翔</p>

<p>15:21:45</p>

<p>高亮</p>

<p>屠文翔</p>

<p>15:21:52</p>

<p>边  长度 信息</p>

<p>XellOs</p>

<p>15:22:18</p>

<p>第二个是存储量</p>

<p>XellOs</p>

<p>15:22:24</p>

<p>大慨有多大</p>

<p>XellOs</p>

<p>15:22:29</p>

<p>需不需要用的平衡树</p>

<p>XellOs</p>

<p>15:22:39</p>

<p>我压根就没说话啊</p>

<p>XellOs</p>

<p>15:22:41</p>

<ul>
  <li>-#</li>
</ul>

<p>XellOs</p>

<p>15:22:48</p>

<p>我micro都是关了的啊</p>

<p>XellOs</p>

<p>15:22:52</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/PGPK8I8YZER5ED.jpg"><img src="http://everet.org/wp-content/uploads/2012/01/PGPK8I8YZER5ED_thumb.jpg" alt="PGPK8}I(@%8YZ}E``$R5E)D" /></a></p>

<p>XellOs</p>

<p>15:23:13</p>

<p>就是你要考虑检索速度的啊</p>

<p>XellOs</p>

<p>15:24:03</p>

<p>恩，那上层你准备先用什么存呢？</p>

<p>XellOs</p>

<p>15:24:26</p>

<p>一个点一个对象？</p>

<p>XellOs</p>

<p>15:24:34</p>

<p>不太好</p>

<p>XellOs</p>

<p>15:24:36</p>

<p>这样觉得</p>

<p>XellOs</p>

<p>15:25:02</p>

<p>又不太好- -#</p>

<p>XellOs</p>

<p>15:25:04</p>

<p>再考虑下</p>

<p>XellOs</p>

<p>15:25:27</p>

<p>我是觉得用面好点</p>

<p>XellOs</p>

<p>15:25:38</p>

<p>恩</p>

<p>XellOs</p>

<p>15:25:48</p>

<p>这样给下层运算好些</p>

<p>XellOs</p>

<p>15:25:55</p>

<p>但是给下层渲染要好点</p>

<p>XellOs</p>

<p>15:26:59</p>

<p>你想想你点检索之后不是每三个点就需要渲染个面</p>

<p>XellOs</p>

<p>15:27:05</p>

<p>你要做cull</p>

<p>XellOs</p>

<p>15:27:33</p>

<p>是啊</p>

<p>XellOs</p>

<p>15:27:36</p>

<p>我就是说这样</p>

<p>XellOs</p>

<p>15:27:59</p>

<p>[<img src="http://everet.org/wp-content/uploads/2012/01/ZAYODTWYLA4AMAJ6.gif" alt="ZAYOD())T$)W(YLA4AMA[J6](http://everet.org/wp-content/uploads/2012/01/ZAYODTWYLA4AMAJ6_thumb.gif)" /></p>

<p>有点乱</p>

<p>XellOs</p>

<p>15:28:01</p>

<p>缕一缕</p>

<p>XellOs</p>

<p>15:28:49</p>

<p>比如： 一张白纸，你的逻辑点是4个，折一次之后逻辑点是几个？</p>

<p>XellOs</p>

<p>15:29:35</p>

<p>恩，对角折之后你4个点就需要存索引了</p>

<p>XellOs</p>

<p>15:29:50</p>

<p>如果不存索引你是不知道渲染哪几个面的了</p>

<p>XellOs</p>

<p>15:29:59</p>

<p>我用画图板画个图</p>

<p>XellOs</p>

<p>15:31:07</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/59RGBZRY5I1O0XPL9Z9_thumb.jpg">![59%RG}BZRY5I1O]0X%PL9Z9</a>](http://everet.org/wp-content/uploads/2012/01/59RGBZRY5I1O0XPL9Z9.jpg)</p>

<p>XellOs</p>

<p>15:31:34</p>

<p>如果你右边木有索引是木有办法画的</p>

<p>XellOs</p>

<p>15:31:50</p>

<p>怎么画呢？</p>

<p>XellOs</p>

<p>15:31:55</p>

<p>是啊</p>

<p>XellOs</p>

<p>15:32:03</p>

<p>存六个顶点你还是默认有索引了</p>

<p>XellOs</p>

<p>15:32:05</p>

<p>就是123456</p>

<p>XellOs</p>

<p>15:32:25</p>

<p>恩，这样也是可以的！</p>

<p>XellOs</p>

<p>15:32:36</p>

<p>那其实也就是存面了</p>

<p>XellOs</p>

<p>15:32:44</p>

<p>所以，回归了</p>

<p>XellOs</p>

<p>15:32:46</p>

<p>还是存面啊</p>

<p>XellOs</p>

<p>15:32:50</p>

<p>[![]~)Z$_L$~U]R%UQM{Q~_X)B](http://everet.org/wp-content/uploads/2012/01/Z_LURUQMQ_XB_thumb.gif)](http://everet.org/wp-content/uploads/2012/01/Z_LURUQMQ_XB.gif)</p>

<p>XellOs</p>

<p>15:33:27</p>

<p>我是觉得用树来存面就好了</p>

<p>XellOs</p>

<p>15:33:38</p>

<p>最上层的话</p>

<p>XellOs</p>

<p>15:33:42</p>

<p>逻辑面</p>

<p>XellOs</p>

<p>15:34:23</p>

<p>你逻辑面的三个点可以确定的啊</p>

<p>XellOs</p>

<p>15:34:40</p>

<p>是啊</p>

<p>XellOs</p>

<p>15:34:47</p>

<p>那个可以算出来的嘛</p>

<p>XellOs</p>

<p>15:34:57</p>

<p>直接算法就可以算的</p>

<p>XellOs</p>

<p>15:35:07</p>

<p>就是图上的123啊</p>

<p>XellOs</p>

<p>15:35:23</p>

<p>你还是用三角存啊</p>

<p>XellOs</p>

<p>15:35:31</p>

<p>两个就行了啊，刚才他说的</p>

<p>XellOs</p>

<p>15:35:56</p>

<p>做判断了哦</p>

<p>XellOs</p>

<p>15:36:01</p>

<p>算法来做了哦</p>

<p>XellOs</p>

<p>15:37:59</p>

<p>恩，这个数据结构我觉得再考虑下</p>

<p>XellOs</p>

<p>15:38:05</p>

<p>反正基本原理应该是那样的</p>

<p>XellOs</p>

<p>15:38:19</p>

<p>还是这个啊</p>

<p>XellOs</p>

<p>15:38:30</p>

<p>就是要考虑树的调整</p>

<p>XellOs</p>

<p>15:38:35</p>

<p>对</p>

<p>XellOs</p>

<p>15:38:38</p>

<p>就是节点的问题</p>

<p>XellOs</p>

<p>15:39:12</p>

<p>这个树不一定平衡吧</p>

<p>XellOs</p>

<p>15:39:26</p>

<p>恩，差不多</p>

<p>XellOs</p>

<p>15:39:39</p>

<p>不考虑一百个</p>

<p>XellOs</p>

<p>15:39:42</p>

<p>只考虑4个</p>

<p>XellOs</p>

<p>15:39:48</p>

<p>只考虑4个</p>

<p>XellOs</p>

<p>15:39:56</p>

<p>那一百个下去算</p>

<p>XellOs</p>

<p>15:40:08</p>

<p>2个三角形</p>

<p>XellOs</p>

<p>15:40:13</p>

<p>6个点</p>

<p>XellOs</p>

<p>15:40:19</p>

<p>两个树节点</p>

<p>XellOs</p>

<p>15:40:40</p>

<p>不的</p>

<p>XellOs</p>

<p>15:40:47</p>

<p>只有叶子表示面</p>

<p>XellOs</p>

<p>15:40:57</p>

<p>根不表示面的啊</p>

<p>XellOs</p>

<p>15:41:03</p>

<p>看来要用画图板了</p>

<p>XellOs</p>

<p>15:41:06</p>

<p>[![UARF0O4MI<em>$6HXMIHAA]{98[10]](http://everet.org/wp-content/uploads/2012/01/UARF0O4MI</em>6HXMIHAA9810<em>thumb.jpg)](http://everet.org/wp-content/uploads/2012/01/UARF0O4MI</em>6HXMIHAA9810.jpg)</p>

<p>某花</p>

<p>15:41:27</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/FZL83KE0M_OR457U3JDT.jpg"><img src="http://everet.org/wp-content/uploads/2012/01/FZL83KE0M_OR457U3JDT_thumb.jpg" alt="FZ)L83KE~0M_OR457U3J}DT" /></a></p>

<p>某花</p>

<p>15:42:27</p>

<p>[<img src="http://everet.org/wp-content/uploads/2012/01/KZPJGW_UB1AL4S_WWZR.jpg" alt="KZPJGW_U[B1AL4S_W(%$WZR](http://everet.org/wp-content/uploads/2012/01/KZPJGW_UB1AL4S_WWZR_thumb.jpg)" /></p>

<p>XellOs</p>

<p>15:42:27</p>

<p>[![K`DXBW<a href="http://everet.org/wp-content/uploads/2012/01/KDXBWDPLFSVDDWKD24M.jpg">DPLF~SVDDWKD2[4M](http://everet.org/wp-content/uploads/2012/01/KDXBWDPLFSVDDWKD24M_thumb.jpg)</a></p>

<p>XellOs</p>

<p>15:42:48</p>

<p>1和2写反了，不过不太影响</p>

<p>XellOs</p>

<p>15:42:54</p>

<p>只有叶子是面</p>

<p>XellOs</p>

<p>15:43:10</p>

<p>然后叶子中的三个点再交给下层去算图形学的顶点</p>

<p>XellOs</p>

<p>15:43:32</p>

<p>你定不了i</p>

<p>XellOs</p>

<p>15:43:33</p>

<p>太多了</p>

<p>XellOs</p>

<p>15:44:18</p>

<p>恩，我的意思是这样的</p>

<p>XellOs</p>

<p>15:44:29</p>

<p>那个你人不能算的啊</p>

<p>XellOs</p>

<p>15:44:30</p>

<p>茫茫多</p>

<p>某花</p>

<p>15:44:44</p>

<p>[<img src="http://everet.org/wp-content/uploads/2012/01/KZPJGW_UB1AL4S_WWZR6.jpg" alt="KZPJGW_U[B1AL4S_W(%$WZR[6]](http://everet.org/wp-content/uploads/2012/01/KZPJGW_UB1AL4S_WWZR6_thumb.jpg)" /></p>

<p>XellOs</p>

<p>15:44:55</p>

<p>左边字是什么</p>

<p>XellOs</p>

<p>15:45:44</p>

<p>你的非叶子节点就是逻辑的面啊</p>

<p>XellOs</p>

<p>15:45:55</p>

<p>你的叶子就是逻辑的三角啊</p>

<p>XellOs</p>

<p>15:46:22</p>

<p>恩，是的</p>

<p>XellOs</p>

<p>15:46:25</p>

<p>但是不会很多啊</p>

<p>XellOs</p>

<p>15:46:44</p>

<p>你这个面有点难加</p>

<p>XellOs</p>

<p>15:46:47</p>

<p>应该要删点</p>

<p>XellOs</p>

<p>15:46:50</p>

<p>然后加点</p>

<p>XellOs</p>

<p>15:47:06</p>

<p>我是这样觉得的</p>

<p>某花</p>

<p>15:47:48</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/R2NRXZ9FWN_F2ME1L_thumb.jpg">![R2NR%XZ~9$}F{]WN_F2ME1L</a>](http://everet.org/wp-content/uploads/2012/01/R2NRXZ9FWN_F2ME1L.jpg)</p>

<p>XellOs</p>

<p>15:48:45</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/N_VMYY4JDF1XZPKJ9JG.jpg"><img src="http://everet.org/wp-content/uploads/2012/01/N_VMYY4JDF1XZPKJ9JG_thumb.jpg" alt="N)_VMYY4JDF$1X{ZP}KJ9JG" /></a></p>

<p>XellOs</p>

<p>15:49:00</p>

<p>因为你画图只会去找叶子，所以应该也快</p>

<p>XellOs</p>

<p>15:49:09</p>

<p>只是存储量可能比较大</p>

<p>XellOs</p>

<p>15:49:16</p>

<p>估计算是个空间换时间吧</p>

<p>XellOs</p>

<p>15:50:01</p>

<p>[![UARF0O4MI<em>$6HXMIHAA]{98[12]](http://everet.org/wp-content/uploads/2012/01/UARF0O4MI</em>6HXMIHAA9812<em>thumb.jpg)](http://everet.org/wp-content/uploads/2012/01/UARF0O4MI</em>6HXMIHAA9812.jpg)</p>

<p>XellOs</p>

<p>15:50:55</p>

<p>你那个我是觉得他不再是二叉树了</p>

<p>XellOs</p>

<p>15:51:07</p>

<p>什么不用加点？</p>

<p>屠文翔</p>

<p>15:51:30</p>

<p>[<img src="http://everet.org/wp-content/uploads/2012/01/1J9XTZGH17W5KAGK43WN.jpg" alt="1J9XT(ZGH17W5K[AGK~43WN](http://everet.org/wp-content/uploads/2012/01/1J9XTZGH17W5KAGK43WN_thumb.jpg)" /></p>

<p>XellOs</p>

<p>15:51:45</p>

<p>是啊</p>

<p>XellOs</p>

<p>15:51:46</p>

<p>好专业啊</p>

<p>XellOs</p>

<p>15:51:51</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/NFYZI7A9P9HQA0BKSI4.jpg"><img src="http://everet.org/wp-content/uploads/2012/01/NFYZI7A9P9HQA0BKSI4_thumb.jpg" alt="{~NF`YZ@I7A9P9HQA0BK$SI[4]" /></a></p>

<p>屠文翔</p>

<p>15:52:25</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/UINX6N1WU76__BR0C.jpg"><img src="http://everet.org/wp-content/uploads/2012/01/UINX6N1WU76__BR0C_thumb.jpg" alt="UINX@6N1W{U76__}$`B%R0C" /></a></p>

<p>XellOs</p>

<p>15:52:58</p>

<p>首先是确定是最1的所有节点都有影响</p>

<p>XellOs</p>

<p>15:53:07</p>

<p>然后修正他的所有子节点</p>

<p>XellOs</p>

<p>15:53:15</p>

<p>所以3和4就必须分开</p>

<p>XellOs</p>

<p>15:53:33</p>

<p>恩，是的</p>

<p>XellOs</p>

<p>15:53:40</p>

<p>就是这个意思，加在3和4下面</p>

<p>XellOs</p>

<p>15:53:55</p>

<p>但是你会发现一个非三角的节点</p>

<p>XellOs</p>

<p>15:54:05</p>

<p>所以要单独处理，要进行费列</p>

<p>XellOs</p>

<p>15:54:07</p>

<p>分裂</p>

<p>XellOs</p>

<p>15:54:42</p>

<p>没有没有</p>

<p>XellOs</p>

<p>15:54:47</p>

<p>我的意思是叶子是三角</p>

<p>XellOs</p>

<p>15:54:54</p>

<p>其他是逻辑面</p>

<p>XellOs</p>

<p>15:55:30</p>

<p>画图困难啊</p>

<p>屠文翔</p>

<p>15:55:54</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/ZJET59XL0K4EA0DELFKNB.jpg"><img src="http://everet.org/wp-content/uploads/2012/01/ZJET59XL0K4EA0DELFKNB_thumb.jpg" alt="ZJET59XL~0K4E$A0DELFKNB" /></a></p>

<p>XellOs</p>

<p>15:56:05</p>

<p>差不多，很乱啊！</p>

<p>XellOs</p>

<p>15:56:17</p>

<p>要不再想想，这样树肯定比较大</p>

<p>XellOs</p>

<p>15:57:19</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/4U8MOI7DP52Q92TC4.gif"><img src="http://everet.org/wp-content/uploads/2012/01/4U8MOI7DP52Q92TC4_thumb.gif" alt="}4U8}`MOI7D)}P5`2$Q92TC[4]" /></a></p>

<p>XellOs</p>

<p>15:57:45</p>

<p>也行！</p>

<p>XellOs</p>

<p>15:58:00</p>

<p>然后下面再算是吧</p>

<p>XellOs</p>

<p>15:58:07</p>

<p>也行！</p>

<p>XellOs</p>

<p>15:58:24</p>

<p>对啊</p>

<p>XellOs</p>

<p>15:58:25</p>

<p>面啊</p>

<p>XellOs</p>

<p>15:59:06</p>

<p>感觉回退比较方便</p>

<p>XellOs</p>

<p>15:59:46</p>

<p>让它重复</p>

<p>XellOs</p>

<p>15:59:49</p>

<p>不要做索引</p>

<p>XellOs</p>

<p>15:59:52</p>

<p>太麻烦了</p>

<p>XellOs</p>

<p>16:00:15</p>

<p>恩，链表就好了</p>

<p>XellOs</p>

<p>16:00:18</p>

<p>反正不多</p>

<p>XellOs</p>

<p>16:00:44</p>

<p>先找面</p>

<p>XellOs</p>

<p>16:01:10</p>

<p>恩</p>

<p>XellOs</p>

<p>16:01:17</p>

<p>那个貌似要自己弄</p>

<p>XellOs</p>

<p>16:01:39</p>

<p>那个要查下</p>

<p>XellOs</p>

<p>16:01:45</p>

<p>拾取我也不太会</p>

<p>XellOs</p>

<p>16:02:06</p>

<p>八叉树插件？</p>

<p>某花</p>

<p>16:02:37</p>

<p>.ogre有没什么八叉树插件…</p>

<p>XellOs</p>

<p>16:02:43</p>

<p>不知道啊</p>

<p>XellOs</p>

<p>16:03:00</p>

<p>拾取算法应该比较多</p>

<p>XellOs</p>

<p>16:03:06</p>

<p>我回去查下书</p>

<p>XellOs</p>

<p>16:03:26</p>

<p>上层的方法要确定</p>

<p>XellOs</p>

<p>16:03:30</p>

<p>这个你还木有定哦</p>

<p>XellOs</p>

<p>16:03:48</p>

<p>就是逻辑操作什么的</p>

<p>屠文翔</p>

<p>16:04:04</p>

<p>拆面</p>

<p>屠文翔</p>

<p>16:04:07</p>

<p>拆分</p>

<p>XellOs</p>

<p>16:04:30</p>

<p>那些后来考虑吧</p>

<p>XellOs</p>

<p>16:04:33</p>

<p>先折吧</p>

<p>XellOs</p>

<p>16:04:38</p>

<p>不考虑拖先</p>

<p>XellOs</p>

<p>16:05:15</p>

<p>上层到下层就是用你数据结构中的顶点去算图元</p>

<p>XellOs</p>

<p>16:05:30</p>

<p>然后一起丢给gpu，让它画就可以了</p>

<p>XellOs</p>

<p>16:05:40</p>

<p>传个GPU的方法估计要用texture</p>

<p>XellOs</p>

<p>16:05:48</p>

<p>传给</p>

<p>XellOs</p>

<p>16:05:54</p>

<p>恩，然后给gpu</p>

<p>XellOs</p>

<p>16:06:02</p>

<p>但是这样没有用上gpu的运算能力</p>

<p>XellOs</p>

<p>16:06:07</p>

<p>恩，是的啊</p>

<p>XellOs</p>

<p>16:06:40</p>

<p>gpu和内存之间的数据交换方式有比较多种的</p>

<p>XellOs</p>

<p>16:06:51</p>

<p>用纹理传是一种</p>

<p>XellOs</p>

<p>16:06:58</p>

<p>恩，是的</p>

<p>XellOs</p>

<p>16:07:11</p>

<p>恩</p>

<p>XellOs</p>

<p>16:07:17</p>

<p>是的，是这个意思。</p>

<p>XellOs</p>

<p>16:07:56</p>

<p>有的，你可以参考下游戏编程那本书</p>

<p>XellOs</p>

<p>16:08:00</p>

<p>好像是第二本</p>

<p>XellOs</p>

<p>16:08:04</p>

<p>有个texture的管理器</p>

<p>XellOs</p>

<p>16:08:17</p>

<p><img src="{E251FA83-4A93-42d3-9621-0704EA27D0D6}.dat" alt="" />书在实验室，我忘记了</p>

<p>XellOs</p>

<p>16:08:33</p>

<p>是的，不过旭瑜快回去了</p>

<p>XellOs</p>

<p>16:08:36</p>

<p>他知道在哪</p>

<p>XellOs</p>

<p>16:08:51</p>

<p>那他去拿一下就好了</p>

<p>XellOs</p>

<p>16:08:53</p>

<p>他有钥匙</p>

<p>杨旭瑜</p>

<p>16:09:14</p>

<p><strong>我已经在实验室了的说。。。</strong></p>

<p>XellOs</p>

<p>16:09:20</p>

<p>用cpu算过</p>

<p>XellOs</p>

<p>16:09:24</p>

<p>木有用gpu算过</p>

<p>XellOs</p>

<p>16:09:34</p>

<p>恩</p>

<p>屠文翔</p>

<p>16:09:59</p>

<p>杨旭瑜没在语音上吧。。</p>

<p>杨旭瑜</p>

<p>16:10:10</p>

<p><strong>没有啊。</strong></p>

<p>某花</p>

<p>16:10:32</p>

<p>旭瑜，你装完了吗…</p>

<p>16:11:03</p>

<p><img src="{7BF02F00-AB0E-4037-8DC1-3A915B181375}.dat" alt="" />16:11:03
XellOs(636202)中止了语音通话。</p>

<p>16:11:04</p>

<p><img src="{7BF02F00-AB0E-4037-8DC1-3A915B181375}.dat" alt="" />16:11:04
主持人屠文翔(963262214)中止了语音通话，通话时长1小时2分18秒。</p>

<p>杨旭瑜</p>

<p>16:11:20</p>

<p><strong>我不清楚如何把git.everet.org的东西弄下来。</strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clover进度]]></title>
    <link href="http://everet.org/2012/01/clover-progress.html"/>
    <updated>2012-01-28T01:31:58+08:00</updated>
    <id>http://everet.org/2012/01/clover-progress</id>
    <content type="html"><![CDATA[Liquid error: undefined method `strip!' for nil:NilClass]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python与OGRE之开篇]]></title>
    <link href="http://everet.org/2012/01/python-ogre-start.html"/>
    <updated>2012-01-27T05:02:52+08:00</updated>
    <id>http://everet.org/2012/01/python-ogre-start</id>
    <content type="html"><![CDATA[<p>OGRE是什么？百度百科给的解释是：“OGRE（Object-Oriented Graphics Rendering Engine，即：面向对象图形渲染引擎）是一个用C++开发的面向场景、非常灵活的3D引擎，它旨在让开发人员更容易、更直接地利用硬件加速的3D图形系统开发应用。这个类库隐藏了底层系统库（如：Direct3D和OpenGL）的所有细节，提供了一个基于世界对象和其他直观类的接口。 译者注:ogre在英文中意为：食人魔鬼, 怪物, 象鬼的人，故其LOGO是一个怪物头。”</p>

<p>Python是什么？“Python是一种面向对象、直译式计算机程序设计语言，由<a href="http://baike.baidu.com/view/2975166.htm">Guido van Rossum</a>于1989年底发明， 第一个公开发行版发行于1991年。Python语法简捷而清晰，具有丰富和强大的类库。它常被昵称为胶水语言，它能够很轻松的把用其他语言制作的各种模块（尤其是C/C++）轻松地联结在一起。常见的一种应用情形是，使用python快速生成程序的原型（有时甚至是程序的最终界面），然后对其中有特别要求的部分，用更合适的语言改写，比如3D游戏中的图形渲染模块，速度要求非常高，就可以用C++重写。”摘自百度百科。</p>

<h2 id="pythonogre">Python+OGRE=？</h2>

<!-- more -->

<h2 id="section"></h2>

<p>Python+OGRE=开发速度+简介的代码+良好的可读性+可移植性+无需编译+无需内存管理。</p>

<p>运行速度可能会慢些，但是导致瓶颈的模块在后期可以替换成C++。</p>

<p>相信开发过游戏的同志们都会被长时间的编译所折磨过吧？使用Python虽然比纯C++的运行速度要慢，但是带来的开发速度是不可小觑的。</p>

<h3 id="section-1">安装</h3>

<p>OGRE的Python包装在 <a href="http://sourceforge.net/projects/python-ogre/files/Latest/">http://sourceforge.net/projects/python-ogre/files/Latest/</a> 下载。教程在这里 <a href="http://wiki.python-ogre.org/index.php/SettingUpAnApplication">http://wiki.python-ogre.org/index.php/SettingUpAnApplication</a> 。</p>

<p>最新版的可以从SVN中下载：</p>

<blockquote>
  <p>svn co https://python-ogre.svn.sourceforge.net/svnroot/python-ogre python-ogre</p>
</blockquote>

<p>安装过程非常的简单：</p>

<p>首先安装Python，我装的是2.7.</p>

<p>然后下载好OGRE的Python包装，解压。</p>

<p>然后在命令行下输入 python setup.py install。</p>

<p>如果有什么疑问可以去看下 <a href="http://www.cse.unr.edu/~sushil/class/381/ware/pythonOgreWin7Install.pdf">http://www.cse.unr.edu/~sushil/class/381/ware/pythonOgreWin7Install.pdf</a>。</p>

<p>第一个程序：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>python  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">ogre.renderer.OGRE</span> <span class="kn">as</span> <span class="nn">ogre</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">SampleFramework</span> <span class="kn">as</span> <span class="nn">sf</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">TutorialApplication</span><span class="p">(</span><span class="n">sf</span><span class="o">.</span><span class="n">Application</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">_createScene</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>       <span class="k">pass</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="err">‘</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>   <span class="n">ta</span> <span class="o">=</span> <span class="n">TutorialApplication</span><span class="p">()</span>
</span><span class='line'>   <span class="n">ta</span><span class="o">.</span><span class="n">go</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中SampleFramework.py可以从我们刚刚下载的OGRE的Python包装中复制出来。另外需要创建两个文件。</p>

<h4 id="pluginscfg">plugins.cfg</h4>

<blockquote>

</blockquote>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Defines plugins to load&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="define-plugin-folder">Define plugin folder&lt;/h1>
</span><span class='line'>&lt;p>PluginFolder=./plugins&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="define-d3d-rendering-implementation-plugin">Define D3D rendering implementation plugin&lt;/h1>
</span><span class='line'>&lt;p>Plugin=RenderSystem_GL.dll
</span><span class='line'>Plugin=RenderSystem_Direct3D9.dll
</span><span class='line'>Plugin=Plugin_ParticleFX.dll
</span><span class='line'>Plugin=Plugin_BSPSceneManager.dll
</span><span class='line'>Plugin=Plugin_OctreeSceneManager.dll
</span><span class='line'>Plugin=Plugin_CgProgramManager.dll</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4 id="resourcescfg">resources.cfg</h4>

<p>里面留空就好。</p>

<p>此外，我们还需要把plugins目录复制过来。</p>

<p>然后就OK了。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/image3.png"><img src="http://everet.org/wp-content/uploads/2012/01/image_thumb3.png" alt="image" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我们的游戏 Scar]]></title>
    <link href="http://everet.org/2012/01/scar.html"/>
    <updated>2012-01-22T08:24:18+08:00</updated>
    <id>http://everet.org/2012/01/scar</id>
    <content type="html"><![CDATA[<p>Scar，中文名：伤疤，是我们的<strong>《计算机图形学》</strong>和<strong>《IT项目管理》</strong>的大作业。虽然不想做的很大，但是最后我们写了4万多行代码。发现也是挺大的。</p>

<h2 id="section"><strong>简介</strong></h2>

<p><strong>我们花费的时间：4个月（9.14 – 12.14），这个是由屠文翔同学辛劳得出的粗略统计。</strong></p>

<ul>
  <li>
    <p>验证准备阶段：9月14日 – 9月21日</p>
  </li>
  <li>
    <p>设计阶段：9月22日 – 10月18日</p>
  </li>
  <li>
    <p>构建阶段：10月19日 – 11月16日</p>
  </li>
  <li>
    <p>赶工阶段：12月6日 – 12月14日</p>
  </li>
</ul>

<p><strong>参与人数：7人（其中编外2人）</strong></p>

<ul>
  <li>
    <p>项目经理：屠文翔</p>
  </li>
  <li>
    <p>开发人员：华亮、杨旭瑜、杨成熙、谢骏飞 、林剑飞、陈存腾</p>
  </li>
</ul>

<p><strong>总代码量：42437行</strong></p>

<ul>
  <li>
    <p>这个是我们非常努力得到的，记得那段时间我也基本持续几个月每天两三点睡，课也不上，去上了也是大家带着笔记本一起在教室后面写代码。</p>
  </li>
  <li>
    <p>我们的项目是开源的，遵循<a href="http://www.mozilla.org/MPL/">Mozilla Public License 1.1</a>协议，托管在Google Code上。<a href="http://code.google.com/p/opengl-scut/">http://code.google.com/p/opengl-scut/</a>。</p>
  </li>
</ul>

<!-- more -->

<p><strong>完成情况：基本完成</strong></p>

<ul>
  <li>
    <p>基地、战场等场景的构建</p>
  </li>
  <li>
    <p>模拟太空飞行的全方位角度旋转操控 锁定、开火等一系列逻辑</p>
  </li>
  <li>
    <p>局域网联机数据传输</p>
  </li>
  <li>
    <p>绚丽的画面，友好的UI 优秀的用户体验，强烈的代入感</p>
  </li>
  <li>
    <p>AI框架和一个简单的电脑AI实例</p>
  </li>
</ul>

<h2 id="section-1"><strong>游戏截图</strong></h2>

<p>游戏加载画面</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/loading1.jpg"><img src="http://everet.org/wp-content/uploads/2012/01/loading1-1024x575.jpg" alt="" /></a></p>

<p>由空间站跃迁到战场的过程</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/222.jpg"><img src="http://everet.org/wp-content/uploads/2012/01/222.jpg" alt="" /></a></p>

<p>在星门战斗</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/22.jpg"><img src="http://everet.org/wp-content/uploads/2012/01/22.jpg" alt="" /></a></p>

<h2 id="scar">Scar所使用的技术</h2>

<p>我们选用C++和Python作为我们的开发语言。对于Scar这款游戏，我们选择了Irrlicht游戏引擎，Irrlicht它由C++实现，相比起OGRE，它更加简单轻巧。在开发过程中，我们汲取WPF的思想，自己开发了一套界面库，可以使用Python描述界面，进行界面描述和组装，比起WPF，我们可以在Python中编写消息响应函数，虽然界面库并不完善，但是我们还是用它艰难地完成了开发。</p>

<p>对于线程库我们使用Boost，这样我们可以得到简单的编程抽象，并且可以方便地实现跨平台。</p>

<p>对于C++和Python交互，我们也使用Boost.Python来实现，直接使用Python解释器提供的C接口开发速度是十分低效，所以我们选择了Boost.Python库。这样可以轻易地实现C++与Python交互，Python可以使用C++的类和函数，C++也可以使用Python的类和函数。这样我们将可变的东西都尽量用Python来写，这样更加灵活，开发过程中也不需要编译，也可以加快开发速度。</p>

<p>对于网络的开发，我们使用Boost.asio库，Boost.asio是一个异步IO库，也提供了高层的抽象。也可以加快我们的开发速度。</p>

<h2 id="scar-1">Scar的设计</h2>

<p>我们的部分类的类图，点击看大图。分辨率为7771*1645，如果需要观看请下载到电脑上。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/类图.png">http://everet.org/wp-content/uploads/2012/01/类图.png</a></p>

<h3 id="section-2">内存管理</h3>

<p>在C/C++程序员中，最容易出现的问题就是内存管理的失误，其中出现频率最高的错误就是内存泄露，分配内存后忘记释放了。在C++中，我们可以使用智能指针来实现自动的内存管理，其核心思想都是引用计数器。其中典型代表有STL的auto_ptr，但是auto_ptr实在有太多缺陷。而Boost库中的shared_ptr，相比起auto_ptr就强大很多，而且，在C++0x的标准中，shared_ptr已经正式进入了C++的标准。虽然使用智能指针可以让程序员省去自己管理内存的麻烦，但是智能指针在循环引用时也会导致内存泄露（所以像Python中，垃圾回收器会每隔一段时间扫描循环引用。如果仅仅靠引用计数，还是会导致内存泄露。）</p>

<p>对于内存管理，Irrlicht（鬼火）采用手工管理的引用计数器。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>cpp  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">IReferenceCounted</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">IReferenceCounted</span><span class="p">()</span> <span class="o">:</span> <span class="n">ReferenceCounter</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>    <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">IReferenceCounted</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">drop</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// someone is doing bad reference counting.</span>
</span><span class='line'>        <span class="n">_IRR_DEBUG_BREAK_IF</span><span class="p">(</span><span class="n">ReferenceCounter</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="o">--</span><span class="n">ReferenceCounter</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ReferenceCounter</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">s32</span> <span class="n">getReferenceCount</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ReferenceCounter</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">private</span><span class="o">:</span>
</span><span class='line'><span class="k">mutable</span> <span class="n">s32</span> <span class="n">ReferenceCounter</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>对于所有的类，都从IReferenceCounted派生出来，这样我们就可以方便地管理我们对象的内存。</p>

<p>当我们创建的对象被引用时，我们调用grab()，它会为这个对象的引用技术加1，当我们不需要对它引用时，则调用drop()，当引用计数ReferenceCounter减为0时，对象所占的内存会被释放。</p>

<p>我个人觉得这种方法比使用智能指针更可靠，不会被智能指针所玩弄。</p>

<h3 id="section-3">一些设计</h3>

<p>在Irrlicht中，所有的在场景中出现的物体都是派生自ISceneNode，它提供了场景节点的一个基本抽象。所有的场景节点都是挂载在一个抽象的根节点Root上，如下图：</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/QQ截图20120123160921.jpg"><img src="http://everet.org/wp-content/uploads/2012/01/QQ截图20120123160921.jpg" alt="" /></a></p>

<p>在引用计数方面，父节点对子节点引用，子节点不对父节点引用，所以不存在环，就避免了循环引用。</p>

<h5 id="section-4">一些设计模式：</h5>

<p>而场景节点仅仅保存了顶点信息和一些变换信息，并没有描述其行为的代码。所以Irrlicht中有ISceneNodeAnimator，它作为“行为”独立于ISceneNode，可以动态注册到场景节点中，方便地增加或者修改节点的行为。这是一种策略模式（Strategy），将行为独立于对象可以方便地动态地更改对象的行为，也可以将行为复用。</p>

<p>像自旋转，围绕一个中心绕圈，直线自动，跟随行为等等都是非常常用的经典行为，像这些行为就应该只是被编写一次，所以用策略模式将行为提取出来是非常好的解决方案。像游戏中，主角修改技能等等都可以使用策略模式解决。</p>

<p>对于Irrlicht这款游戏引擎，它底层支持DirectX，OpenGL和软件渲染。并且可以非常方便地切换不同的渲染方式。在这里，Irrlicht采用工厂模式（Factory）可以很好地解决切换底层渲染库的灵活性问题。</p>

<p>当然，对于一款游戏引擎，单例模式（Singleton ）必不可少，因为像引擎的抽象，资源管理器这些一般都是全局的，使用单例模式可以保证只是创建了一个唯一的一个实例，并且提供了访问全局变量的绿色通道。在《Effective C++》中的条款04就说道，单例模式还有一个很有用的用途，就是确定对象被使用前已先被初始化。</p>

<p>当然还有观察者模式等等解决通知问题的模式。</p>

<h2 id="section-5">总结</h2>

<p>为什么有这篇总结：在大二学期末在和我们的《软件软件需求分析与建模》的老师刘艳霞交流中，她对我们说：期末考试并不意味着一门课的结束，你们假期回家应该要总结每一门课，写下自己感想。我觉得很有道理，总结过去，启示未来。对于自己犯的错误予以改正，对于他人犯错误，有则改之无则加勉。</p>

<blockquote>
  <p><strong>Those who cannot remember the past are condemned to repeat it.</strong></p>
</blockquote>

<blockquote>

  <p><strong>—— George Santayana</strong></p>

</blockquote>

<p>上面那句话是黄翰老师在算法课上讲解动态规划时PPT上的一句话，不仅揭示了DP的核心思想，还蕴含了我们的生活的真谛。</p>

<p>好！</p>

<p><strong>下面为屠文翔同学总结大家的总结得到的总结。</strong></p>

<ul>
  <li>
    <p>沟通、协作是项目成功的基础。</p>
  </li>
  <li>
    <p>不要把计划定得太大，尤其是在时间不够的情况下。</p>
  </li>
  <li>
    <p>第一步是需求，第二步是骨架系统。</p>
  </li>
  <li>
    <p>简单的事情往往比它看上去的要复杂。</p>
  </li>
  <li>
    <p>有时候人要被别人刀在身后捅着才会继续走。</p>
  </li>
</ul>

<p><strong>Scar部分文档</strong>：</p>

<ul>
  <li>
    <p><a href="http://everet.org/wp-content/uploads/2012/01/9月15日-游戏背景及历史.docx">9月15日-游戏背景及历史</a></p>
  </li>
  <li>
    <p><a href="http://everet.org/wp-content/uploads/2012/01/团队协议.docx">团队协议</a></p>
  </li>
  <li>
    <p><a href="http://everet.org/wp-content/uploads/2012/01/范围声明.docx">范围声明</a></p>
  </li>
  <li>
    <p><a href="http://everet.org/wp-content/uploads/2012/01/里程碑报告.doc">里程碑报告</a></p>
  </li>
</ul>

<p>更全文档请参见：<a href="http://code.google.com/p/opengl-scut/">http://code.google.com/p/opengl-scut/</a></p>

<h3 id="section-6"><strong>对于我个人：</strong></h3>

<p><em>**</em>虽然项目停滞已经一段时间了，但是还是想总结一下这个学期做的东西。尽管做了一个学期的图形学大作业，但是我还是对计算机图形学还是一窍不通，对于IT项目管理，课也没上过，所以也不知讲了啥。不过在项目管理方面，还是得到了屠文翔同学许多教诲。</p>

<p><strong>对于IT项目管理的总结：</strong></p>

<p>首先是时间管理，在一个软件项目中，最难做到的就是估计项目完成时间，做进度计划。所以项目往往难以按时按量完成。因为我们学期末需要答辩，所以我们在期末前必须完成。当然最后我们按时完成了，不过得到的是赶工的删减版，还没有设计剧情，只有局域网对战功能。</p>

<p>其次是成本管理，我们都是免费劳动力，所以成本除了电费和伙食费之外也没啥。不过真实的项目中，项目经理手中的资源是有限的，换句话说，钱是有限的。这么多的钱需要花到程序员的工资中，还需要花到其他杂七杂八的地方。因为钱有限，所以不能全部雇佣高级程序员，因为成本高，而初级程序员的水平一般，还需要培训，势必增加时间成本，这是一个需要仔细权衡的地方。</p>

<p>对于风险，我们存在很多，首先就是课余时间较少，项目复杂，需要大量的时间进行开发。其次是技术风险，我们在大三一开学时啥都不懂，全部需要从零开始学习图形学，Irrlicht游戏引擎，Boost库。最后还有，游戏特效和美工需要大量的人力，难以估计能否按时完成。</p>

<p><strong>现在我们来回顾一下IT项目管理。</strong></p>

<p>IT项目管理中的三个重要的管理为范围管理，时间管理和成本管理。</p>

<p>何为项目成功？即满足范围、时间和成本这三个目标的同时还让了项目发起人满意。在《IT项目管理》一书中说道：在美国，拥有一个由人才组成的团队更重要，而在中国，搞好关系管理更重要。这可能就是中国特色的项目管理吧。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/图片2.png"><img src="http://everet.org/wp-content/uploads/2012/01/图片2.png" alt="" /></a></p>

<p>一个项目开始时，要做些什么？</p>

<p><strong>首先是Project Charter（项目章程）</strong>，项目章程包含关键的项目信息，并由Stakeholder（利益相关者）共同签字，都是由大老板签字，如果项目过程中，有需要什么帮助可以拿着他们的签字去向他们申请，嘿嘿。</p>

<p><strong>第二是Kick-off Meeting（启动会议）</strong>，在这个会议利益相关者们可以相互见面，回顾项目的目标，讨论未来的计划，这个在Scar中，我们有启动会议，记得好像是在知识产权课上，我们溜到了旁边的教室。</p>

<p><strong>第三是Project Planning（制定项目计划）</strong>。</p>

<p>项目计划的目的是在执行过程中有个指导，知道什么时候该做什么，是否延期了等等。但是制定项目计划是一个非常难的事情，因为计划总是赶不上变化。就像我们高三时，想必大家都制定了许多美好而详细的复习计划，但是真正按计划实施的还是占非常少数。</p>

<p>在制定项目计划过程中，我们需要团队协议（Team Contract），就像君子协定，大家签了就要花时间和精力去做。我们需要范围说明（Project Scope Statement），阐述我们需要做什么，做到怎么样。还需要一个非常重要的东西——工作分解结构（Work Breakdown Structure, WBS），如下图为WBS和甘特图。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/图片1.jpg"><img src="http://everet.org/wp-content/uploads/2012/01/图片1-640x338.jpg" alt="" /></a></p>

<p>在WBS，我们将工作分解成细粒度的工作包，可以方便我们计划时间和分配任务。当然还有很多像网络图甘特图等等的工具可以方便我们做计划。</p>

<p><strong>最后，IT项目管理有9大知识领域和5大过程组构成</strong>：</p>

<p>9大知识领域：范围管理、时间管理、成本管理、质量管理、人力资源管理、沟通管理、风险管理、采购管理、项目集成管理；</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/图片1.png"><img src="http://everet.org/wp-content/uploads/2012/01/图片1-640x339.png" alt="" /></a></p>

<p>5大过程组：启动，计划，执行，监控，收尾。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/01/图片2.jpg"><img src="http://everet.org/wp-content/uploads/2012/01/图片2-640x323.jpg" alt="" /></a></p>

<p>最后的对于项目管理的看法纯属个人观点，存在诸多错漏，请指正。</p>

<p>有关IT项目管理的图片来自《IT项目管理》第六版，Kathy Schwalbe一书。</p>

<p>（全文完）</p>
]]></content>
  </entry>
  
</feed>
