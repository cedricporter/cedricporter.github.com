<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Captcha | EverET.org]]></title>
  <link href="http://everet.org/tag/captcha/atom.xml" rel="self"/>
  <link href="http://everet.org/"/>
  <updated>2012-12-26T18:02:48+08:00</updated>
  <id>http://everet.org/</id>
  <author>
    <name><![CDATA[Stupid ET]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[探索wordpress验证码插件Clickcha]]></title>
    <link href="http://everet.org/2012/07/clickcha.html"/>
    <updated>2012-07-16T20:42:02+08:00</updated>
    <id>http://everet.org/2012/07/clickcha</id>
    <content type="html"><![CDATA[<p>Clickcha是一种新型的图像验证码，只需要用鼠标点击即可以通过验证，虽然对于专门的攻击，这种验证码没什么抵挡能力，但是它还是挺有趣。</p>

<p>对于这种验证码的识别，可以用<a href="http://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E5%8F%98%E6%8D%A2">霍夫变换</a>，就可以方便地找到最圆的圆，以及那些正方形。</p>

<p>Clickcha有提供wordpress插件，很容易就可以和自己的wordpress整合在一起。<!-- more --></p>

<p><a href="http://everet.org/wp-content/uploads/2012/07/challenge-1.png"><img src="http://everet.org/wp-content/uploads/2012/07/challenge-1.png" alt="" /></a></p>

<p><a href="http://everet.org/wp-content/uploads/2012/07/challenge-2.png"><img src="http://everet.org/wp-content/uploads/2012/07/challenge-2.png" alt="" /></a></p>

<p><a href="http://everet.org/wp-content/uploads/2012/07/challenge.png"><img src="http://everet.org/wp-content/uploads/2012/07/challenge.png" alt="" /></a></p>

<p>我们从clickcha的源码中看看这个插件的工作原理。</p>

<h2 id="section">生成验证码</h2>

<p>首先，插件在comment_form过程下增加了钩子，这样就可以将自己的页面的代码插入到评论框下面。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">add_action(‘comment_form’, ‘clickcha_comment_form’, 10);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中有一段js，用于验证码token和图片的获取。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>javascript  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">clickcha_token</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="err">‘</span><span class="nx">clickchatoken</span><span class="err">’</span><span class="p">).</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">token</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="err">‘</span><span class="nx">clickcha</span><span class="err">’</span><span class="p">).</span><span class="nx">src</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">http</span><span class="o">:</span><span class="c1">//api.clickcha.com/challenge?key=&amp;amp;token=’ + token;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">clickcha_get_token</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="err">‘</span><span class="nx">script</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">e</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">http</span><span class="o">:</span><span class="c1">//api.clickcha.com/token?output=json&amp;amp;key=&amp;amp;rnd=’ + Math.random();</span>
</span><span class='line'>    <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span> <span class="err">‘</span><span class="nx">text</span><span class="o">/</span><span class="nx">javascript</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="err">‘</span><span class="nx">head</span><span class="err">’</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">clickcha_get_token</span><span class="p">();</span>
</span><span class='line'><span class="c1">// Firefox’s bfcache workaround</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">onpageshow</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">persisted</span><span class="p">)</span> <span class="nx">clickcha_get_token</span><span class="p">();};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在下面这段语句增加引用服务器生成的js。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>javascript  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="err">‘</span><span class="nx">clickcha</span><span class="err">’</span><span class="p">).</span><span class="nx">src</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">http</span><span class="o">:</span><span class="c1">//api.clickcha.com/challenge?key=&amp;amp;token=’ + token;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>clickcha服务器生成的被引用的那段js里面的内容</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>javascript  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">clickcha_token</span><span class="p">(</span><span class="err">‘</span><span class="nx">ww6pGtBKXh_IdBDKVNHYVmeT3fTPDo8pwqCwpUqPIS</span><span class="o">-</span><span class="nx">ZhYGKhc6SN9TdpZzudXujexPaKfarM57QoTPtd0AqOw</span><span class="err">’</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>服务器clickcha服务器被引用的js里，调用了clickcha_token来设置表单中的token和验证码的图片。</p>

<h2 id="section-1">验证</h2>

<p>插件在评论预处理挂上处理钩子。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">add_action(‘preprocess_comment’, ‘clickcha_comment_post’);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后在评论预处理过程向clickcha的服务器发送GET请求验证，如果服务器返回’PASSED’，那么通过验证，否则直接调用wp_die结束处理过程。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$response=file_get_contents(‘http://api.clickcha.com/verify?key=’.$public_key.’&amp;amp;token=’.$_POST[‘clickcha_token’].’&amp;amp;private_key=’.$private_key.’&amp;amp;x=’.$_POST[‘clickcha_x’].’&amp;amp;y=’.$_POST[‘clickcha_y’]);</span>
</span><span class='line'><span class="x">$result = get_submatch(‘|(\w+)|’, $response);</span>
</span><span class='line'><span class="x">if(!empty($result)) {</span>
</span><span class='line'><span class="x">    if($result!=’PASSED’) {</span>
</span><span class='line'><span class="x">        wp_die(“Clickcha verification failed ($result). Please go back and try again.”);</span>
</span><span class='line'><span class="x">    }</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="section-2"> 演示</h2>

<p>clickcha官方demo：<a href="http://clickcha.com/demo/">http://clickcha.com/demo/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python验证码识别之预处理]]></title>
    <link href="http://everet.org/2012/07/captcha-recognition.html"/>
    <updated>2012-07-16T03:52:14+08:00</updated>
    <id>http://everet.org/2012/07/captcha-recognition</id>
    <content type="html"><![CDATA[<p>对于验证码叙述，可以见上文<a href="http://everet.org/2012/07/captcha-around-us.html">我们身边的验证码技术</a>。其中我们得知验证码识别流程如下图</p>

<p><a href="http://everet.org/wp-content/uploads/2012/07/2.png"><img src="http://everet.org/wp-content/uploads/2012/07/2.png" alt="" /></a></p>

<p>第一个主要步骤是数据预处理。</p>

<h2 id="section">例子</h2>

<p>一般的国内的验证都比较喜欢加上噪点，再加上一些干扰线，来扰乱视线。但是这些噪声，对于计算机识别程序来说，基本上没起到什么干扰。</p>

<p>我们来看看下面的验证码，这个是随机选择的15张验证码。左边为原图，右边的为处理过的图片。其中干扰线我们识别出来后用红色将其标记，噪点标红看不清楚我就直接去掉了。<!-- more --></p>

<p>这样的验证码的大部分噪声非常轻易就可以去除。</p>

<p>因此，对于验证码来说，噪点的存在是对于抵抗机器人是毫无意义的，此外，这种长干扰线也是没什么太大的意义的，因为预处理就可以很轻松清除，增加这个只是会让人跟难受。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/07/big.png"><img src="http://everet.org/wp-content/uploads/2012/07/big.png" alt="" /></a></p>

<h2 id="section-1">移除噪点</h2>

<p>首先我们来分析一下噪点由什么特性，噪点一般为孤立的点，最多也是会和其他的噪点粘在一起，所以总体来说，噪点相对于其他部分来说是孤立的小群体。</p>

<p>那我们可以对每一个连接在一起的块进行着色，Flood Fill专门干这事的。然后对于字符的块，必然是非常的大，而噪点的块，必然是非常的小。所以我们就可以轻松区分字符和噪点了。</p>

<h2 id="section-2">移除干扰线</h2>

<p>干扰线相对于噪点来说，虽然复杂了一点，但是还是非常的简单。</p>

<p>如何找到干扰线呢？干扰线的搜索问题是具有最优子结构的特性，于是这个问题我们可以用动态规划来解决<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<p>我们可以建立一个打分表，每个像素有一个分数。</p>

<p>动归的方程(如何画公式<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>)为：</p>

<p><a href="http://everet.org/wp-content/uploads/2012/07/Screenshot-from-2012-07-15-194236.png"><img src="http://everet.org/wp-content/uploads/2012/07/Screenshot-from-2012-07-15-194236.png" alt="" /></a></p>

<p><a href="http://everet.org/wp-content/uploads/2012/07/Screenshot-from-2012-07-15-194246.png"><img src="http://everet.org/wp-content/uploads/2012/07/Screenshot-from-2012-07-15-194246.png" alt="" /></a></p>

<p>最后，评分最大的极有可能是干扰线。</p>

<p>这个实现起来非常的简单，就不放代码了，以免引起不必要的事端。</p>

<h2 id="section-3">参考资料</h2>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Ryan Fortune, Gary Luu, Peter McMahon, <strong>CS229 Project Report: Cracking CAPTCHAs</strong><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>OpenOffice.org Formula How-To<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我们身边的验证码技术]]></title>
    <link href="http://everet.org/2012/07/captcha-around-us.html"/>
    <updated>2012-07-09T06:47:01+08:00</updated>
    <id>http://everet.org/2012/07/captcha-around-us</id>
    <content type="html"><![CDATA[<p>验证码大家几乎经常都会碰到，不过很多时候，我们都仅仅只是输入完事，很少去思考验证码其背后的东西。验证码的英文名叫<strong>CAPTCHA</strong>，全称为<strong>Completely Automated Public Turing test to tell Computers and Humans Apart</strong>（<strong>全自动区分计算机和人类的图灵测试</strong>）。验证码提供一个区分人与机器的手段，主要目的是将机器人拒之门外。</p>

<p>现在的各种网络服务已经成为我们生活的重要的组成部分，像各种社交网站，购物网站，网上银行，投票，论坛等服务，为我们的带来的极大的便利。然而，这些系统都在遭受着恶意程序的滥用。所以，验证码系统用于阻挡这些恶意程序。</p>

<h2 id="captcha">验证码CAPTCHA存在的意义</h2>

<p>现在，每天有2亿的验证码CAPTCHA被人类识别出来。我们可利用其解决一些计算机难以处理或者耗费大量人力的问题。目前，像Google的<a href="http://www.google.com/recaptcha/aboutus">reCAPTCHA</a>项目，就是利用验证码来数字化图书和报纸。而像一些广告公司将广告融入了验证码，让人们在输入验证码的时候输入广告中的特定部分，但是这种验证码的样本必然会比较少，因为较难产生大量的广告验证码，所以很容易被破解。</p>

<p>因为CAPTCHA的需求量十分巨大，所以CAPTCHA需要能够自动产生并且评估正确性。此外，人类必须要能够快速地识别并输入验证码，否则容易惹恼用户以至于用户流失。对于CAPTCHA，可以引入人工智能领域的难题，来使现有技术短期无法成功破解。如果一种CAPTCHA没有被破解，那么就有一个可以区分人类和计算机的方法。如果CAPTCHA被破解了，那么一个人工智能的问题也就随之解决了。</p>

<h2 id="captcha---more---">验证码CAPTCHA的困境<!-- more --></h2>

<p>计算机程序可以一天24小时不间断运行，即使是在较低的识别率也可以在较短的时间内大量穿越CAPTCHA系统。所以CAPACHA的识别率需要低于0.01%才可以有效地阻挡自动化的恶意程序的攻击。当然，也可以通过IP辅助来限制一台机器的尝试次数。</p>

<h2 id="captcha-1">CAPTCHA的类型</h2>

<p>CAPTCHA主要分成3类——文本、图像和声音。</p>

<h3 id="text-based-captcha">文本验证码（Text-based CAPTCHA)</h3>

<p>文本验证码方便计算机自动地大量产生，是目前应用最多的最广泛的技术。文本验证码主要靠图像变形和添加噪声。</p>

<p>文本验证码破解难点主要在于字符的分割和识别。其中字符分割是破解文本验证码的关键。主要步骤是：第一步，分割字符，第二步，单个字符识别，其中单个字符的识别在现有的机器学习算法下可以很容易的识别。</p>

<p>所以防范对文本验证码的攻击的关键在于加大字符分割的难度。像Google等公司的验证码[5]都是粘连在一起，分割难度大。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/07/Screenshot-from-2012-07-08-223255.png"><img src="http://everet.org/wp-content/uploads/2012/07/Screenshot-from-2012-07-08-223255.png" alt="" /></a></p>

<p>验证码识别的主要流程一般都较为固定。</p>

<h4 id="section">识别流程</h4>

<p><a href="http://everet.org/wp-content/uploads/2012/07/2.png"><img src="http://everet.org/wp-content/uploads/2012/07/2.png" alt="" /></a></p>

<h4 id="section-1">分割</h4>

<p>下图为垂直投影字符分割[7]</p>

<p><a href="http://everet.org/wp-content/uploads/2012/07/Selection_012.png"><img src="http://everet.org/wp-content/uploads/2012/07/Selection_012.png" alt="" /></a></p>

<h3 id="image-based-captcha">图像验证码（Image-based CAPTCHA）</h3>

<p>图像验证码基于图像分类、目标识别、场景理解等问题，一般情况下比文本验证码更加难以破解，但是现有的图像验证码需要庞大的图像数据库，而且无法大规模产生。更糟糕的是，一旦数据库被公布，算法不功自破。[6]</p>

<p><a href="http://everet.org/wp-content/uploads/2012/07/Screenshot-from-2012-07-08-224238.png"><img src="http://everet.org/wp-content/uploads/2012/07/Screenshot-from-2012-07-08-224238.png" alt="" /></a></p>

<h3 id="sound-based-captcha">声音验证码（Sound-based CAPTCHA）</h3>

<p>声音验证码以随机间隔播放随机选择的一个或多个人播报的数字字母，再添加背景噪声。声音验证码容易收到机器学习算法的攻击。而且相对于视觉上的验证码，用户友好性更低。对于字母的声音，可能农村地区的少部分群体会因为对于字母发音不熟悉而导致无法理解，而无法通过测试。</p>

<h2 id="section-2">参考资料</h2>

<ol>
  <li>
    <p>Jeff Yan, Ahmad Salah El Ahmad, <strong>A Low-cost Attack on a Microsoft CAPTCHA</strong></p>
  </li>
  <li>
    <p>李秋洁 茅耀斌 王执铨, <strong>CAPTCHA技术研究综述</strong></p>
  </li>
  <li>
    <p>Prof. (Mrs.) A.A. Chandavale,  Prof. Dr.A.M. Sapkal, Dr.R.M.Jalnekar, <strong>Algorithm To Break Visual CAPTCHA</strong></p>
  </li>
  <li>
    <p>Shujun Li, S. Amier Haider Shah, …,   <strong>Breaking e-Banking CAPTCHAs</strong></p>
  </li>
  <li>
    <p>Ibrahim Furkan Ince, Ilker Yengin, Yucel Batu Salman, <strong>DESIGNING CAPTCHA ALGORITHM: SPLITTING AND ROTATING</strong></p>
  </li>
  <li>
    <p>Michele Merler (mm3233), Jacquilene Jacob (jj2442),  <strong>BREAKING AN IMAGE BASED CAPTCHA</strong></p>
  </li>
  <li>
    <p>Shih-Yu Huang, Yeuan-Kuen Lee, Graeme Bell and Zhan-he Ou, <strong>An Efficient Segmentation Algorithm for CAPTCHAs with Line Cluttering and Character Warping</strong></p>
  </li>
</ol>

]]></content>
  </entry>
  
</feed>
