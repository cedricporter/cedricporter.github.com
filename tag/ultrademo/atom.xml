<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: UltraDemo | EverET.org]]></title>
  <link href="http://everet.org/tag/ultrademo/atom.xml" rel="self"/>
  <link href="http://everet.org/"/>
  <updated>2013-01-15T00:20:06+08:00</updated>
  <id>http://everet.org/</id>
  <author>
    <name><![CDATA[Stupid ET]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UltraDemo —— 数据结构实验平台]]></title>
    <link href="http://everet.org/2012/04/ultrademo.html"/>
    <updated>2012-04-19T04:49:32+08:00</updated>
    <id>http://everet.org/2012/04/ultrademo</id>
    <content type="html"><![CDATA[<p>传统数据结构教学中，老师站在讲台上讲课，放着PPT，而学生坐在下面神游。 原因何在？因为学生缺乏实践机会，所以注意力难以集中。</p>

<p>于是UltraDemo诞生了！ UltraDemo提供一个自己动手实践的平台，我们可以在UltraDemo中编程，并且可以对数据结构可视化。 这个是一个编程实践平台，可以在上面写代码，编译，执行，并且可以查看图形化的数据结构。UltraDemo支持单步执行，支持断点，支持查看当前作用域的变量，支持自动执行，支持自动执行速度选择，支持动画。</p>

<p>UltraDemo已经开源～</p>

<p>源码：<a href="https://github.com/cedricporter/UltraDemo">https://github.com/cedricporter/UltraDemo</a></p>

<h2 id="ultrademo">UltraDemo主要提供以下的功能：</h2>

<!-- more -->

<h2 id="section"></h2>

<ol>
  <li>
    <p>用户可以在Ultra Demo中编写类C语言的代码，并编译执行。这使UltraDemo不仅仅是一款演示软件，也是一个非常优秀的实验平台。</p>
  </li>
  <li>
    <p>用户可为自己编写的代码选择相应的演示动画模块。这样，在代码运行时，用户就可以获得可视化的结果输出。</p>
  </li>
  <li>
    <p>UltraDemo还提供断点调试功能。用户可通过输出窗口和内存窗口监视代码的运行状况。</p>
  </li>
  <li>
    <p>由于动画模块是以dll插件形式集成到UltraDemo中的，因此高级用户可以根据我们提供的接口，自己编写自己的动画模块。</p>
  </li>
</ol>

<p>UltraDemo可将源代码编译产生的中间代码和汇编代码输出供用户学习。</p>

<h2 id="section-1">运行截图</h2>

<p><a href="http://everet.org/wp-content/uploads/2012/04/image8.png"><img src="http://everet.org/wp-content/uploads/2012/04/image_thumb8.png" alt="image" /></a></p>

<p><a href="http://everet.org/wp-content/uploads/2012/04/Untitled.jpg"><img src="http://everet.org/wp-content/uploads/2012/04/Untitled_thumb.jpg" alt="Untitled" /></a></p>

<h2 id="section-2">技术架构</h2>

<p>UltraDemo主要由三大模块组成，分别是编译解释模块，控制器模块和动画模块。其中编译解释模块以C++编写，控制模块和动画模块在WPF/C#中完成。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/04/clip_image0026.gif"><img src="http://everet.org/wp-content/uploads/2012/04/clip_image0026_thumb.gif" alt="clip_image002[6]" /></a></p>

<h3 id="section-3">编译解释模块：</h3>

<p>现有的所有调试器都可分为两大类。第一类调试器利用处理器提供的调试工具，而第二类调试器自行仿真处理器并完全控制所调试程序的执行过程。</p>

<p>因为前者性能低下，所以我们采用后者，仿真处理器进行调试。</p>

<h3 id="section-4">控制器模块：</h3>

<p>其它两个模块将被编译成dll文件，被控制器模块调用。控制器模块负责初始化这两个模块的实例。对于编译解释模块，控制器模块提供解释运行速度的控制，包括断点，单步，暂停等。对于动画模块，控制器模块提供插件扫描和动画帧率控制。值得一提的是，解释运行速度和动画运行速度并不是绑定的。当解释器以单步运行时，动画模块依旧在以60帧每秒的速度播放动画。然而，控制模块提供了使两个模块同步的机制，使得动画不会提前或延后于解释器完成。</p>

<h3 id="section-5">动画模块：</h3>

<p>动画模块监视内存中的关键变量，并通过这些变量的状态来控制动画的进程。比如汉诺塔动画，动画模块只要监视三个变量（汉诺塔层数size，离开的柱子start和进入的柱子goal），就可以通过监视这些变量的数值改变来完成动画。首先动画模块将需要监视的变量的变量名传给控制器，在代码运行时，控制器就会将相应变量的内存地址回传给动画模块。由于动画模块被设计为“即插即用”，因此新增特定的动画并不需要重新编译主程序。</p>

<h3 id="ultrademo-1">UltraDemo文法</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>text  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Program               -&amp;gt;  external_declaration
</span><span class='line'>external_declaration  -&amp;gt;  Func_definitions
</span><span class='line'>                       | external_decl_stmt
</span><span class='line'>Func_definitions      -&amp;gt;  {Func_definition}+
</span><span class='line'>Func_definition       -&amp;gt;  type id “(“ param_type_list “)” block
</span><span class='line'>external_decl_stmt    -&amp;gt;
</span><span class='line'>                       | type declarators “;”
</span><span class='line'>Type                  -&amp;gt;  int
</span><span class='line'>                       | float
</span><span class='line'>                       | double
</span><span class='line'>                       | char
</span><span class='line'>                       | long
</span><span class='line'>                       | ………….
</span><span class='line'>Param_type_list       -&amp;gt;  type id {type_param}*
</span><span class='line'>                       |
</span><span class='line'>Type_param            -&amp;gt;  “,” type id
</span><span class='line'>                       |
</span><span class='line'>Block                 -&amp;gt;  “{“ stmts “}”
</span><span class='line'>Stmts                 -&amp;gt;  decl_stmt
</span><span class='line'>                       | if_stmt
</span><span class='line'>                       | while_stmt
</span><span class='line'>                       | for_stmt
</span><span class='line'>                       | dowhile_stmt
</span><span class='line'>                       | switch_stmt
</span><span class='line'>                       | return_stmt
</span><span class='line'>                       | assign
</span><span class='line'>                       |
</span><span class='line'>Decl_stmt             -&amp;gt;
</span><span class='line'>                       | type declarators “;”
</span><span class='line'>Declarators           -&amp;gt;  declarator { “,” declarator }
</span><span class='line'>Declarator            -&amp;gt;  {Pointer}? id { arrayDeclarator}	? assignForDecl
</span><span class='line'>Pointer               -&amp;gt;  “&lt;em&gt;” {pointer}?
</span><span class='line'>arrayDeclarator       -&amp;gt;  “[“ {const_expr}? “]” {arrayDeclarator}?
</span><span class='line'>const_expr            -&amp;gt;  conditional_expr
</span><span class='line'>conditional_expr      -&amp;gt;  logical_expr
</span><span class='line'>                       | logical_expr “?” expr : conditional_expr
</span><span class='line'>assignForDecl         -&amp;gt;
</span><span class='line'>                       | “=” expr
</span><span class='line'>factor                -&amp;gt;  num
</span><span class='line'>                       | “(“ expr “)”
</span><span class='line'>                       | abstract_declarator
</span><span class='line'>abstract_declarator   -&amp;gt;  id
</span><span class='line'>                       | id “[“ expr “]”
</span><span class='line'>                       | id “(“ param_list “)”
</span><span class='line'>                       | id “-&amp;gt;” abstract_declarator
</span><span class='line'>                       | id “.” abstract_declarator
</span><span class='line'>param_list            -&amp;gt;
</span><span class='line'>                       | param { “,” param }&lt;/em&gt;
</span><span class='line'>param                 -&amp;gt;  expr
</span><span class='line'>if_stmt               -&amp;gt;  “if” “(“ expr “)” compound_stmt
</span><span class='line'>compound_stmt         -&amp;gt;  block
</span><span class='line'>                       | stmt
</span><span class='line'>while_stmt            -&amp;gt;  “while” “(“ expr “)” compound_stmt
</span><span class='line'>assign                -&amp;gt;  Declarator “=” expr
</span><span class='line'>expr                  -&amp;gt;  assignment_expr {“,” assignment_expr }+
</span><span class='line'>assignment_expr       -&amp;gt;  conditional_expr
</span><span class='line'>                       | unary_expr assgnment_op assignment_expr
</span><span class='line'>assgnment_op          -&amp;gt;  “=”
</span><span class='line'>                       | “+=”
</span><span class='line'>                       | …
</span><span class='line'>unary_op              -&amp;gt;  “&amp;amp;”
</span><span class='line'>                       | “+”
</span><span class='line'>                       | “*”
</span><span class='line'>                       | …
</span><span class='line'>unary_expr            -&amp;gt;  postfix_expr
</span><span class='line'>                       | “++” unary_expr
</span><span class='line'>                       | “—“ unary_expr
</span><span class='line'>                       | unary_op cast_expr
</span><span class='line'>cast_expr             -&amp;gt;  unary_expr
</span><span class='line'>                       | “(“ type_name “)” cast_expr
</span><span class='line'>postfix_expr          -&amp;gt;  primary_expr { postfix_op }+
</span><span class='line'>postfix_op            -&amp;gt;  “[“ expr “]”
</span><span class='line'>                       | “(“ assignment_expr “)”
</span><span class='line'>                       | “-&amp;gt;” id
</span><span class='line'>                       | “.” Id
</span><span class='line'>                       | “++”
</span><span class='line'>                       | “—“
</span><span class='line'>primary_expr          -&amp;gt;  id
</span><span class='line'>                       | constant
</span><span class='line'>                       | string
</span><span class='line'>                       | “(“ expr “)”
</span><span class='line'>constant              -&amp;gt;  integer_const
</span><span class='line'>                       | char_const
</span><span class='line'>                       | floating_const
</span><span class='line'>                       | enum_const&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>格式化文法的工具请见：<a href="http://everet.org/2012/03/the-format-grammer.html">http://everet.org/2012/03/the-format-grammer.html</a></p>

<h2 id="ultrademo-2">UltraDemo开发人员</h2>

<p><a href="http://EverET.org">华亮</a> <a href="http://kidsang.com">屠文翔</a> <a href="http://xuyufish.com">杨旭瑜</a> <a href="http://jiafei.org">罗嘉飞</a> 安迪 杨明锦</p>

<p>UltraDemo的曾经的点滴：<a href="http://everet.org/2012/02/ultrademo-interface-rewritten-in-c.html">http://everet.org/2012/02/ultrademo-interface-rewritten-in-c.html</a></p>

<p>项目即将开源，敬请期待~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[神奇的Python:格式化UltraDemo的文法]]></title>
    <link href="http://everet.org/2012/03/the-format-grammer.html"/>
    <updated>2012-03-16T04:17:39+08:00</updated>
    <id>http://everet.org/2012/03/the-format-grammer</id>
    <content type="html"><![CDATA[<p>SimpleParse是一款非常简洁的Python解析模板，可以自己定义EBNF文法，然后SimpleParse会输出结构化的。</p>

<p>SimpleParse的介绍可以见，<a href="http://www.ibm.com/developerworks/cn/linux/sdk/python/charm-23/index.html">http://www.ibm.com/developerworks/cn/linux/sdk/python/charm-23/index.html</a>，我也是从IBM的网站上看到这个神奇的模块的。</p>

<p>我们有如下的UltraDemo的文法，这个是我们之前写在word文档里面的。</p>

<p>他们很乱，于是我们要对其进行格式化。</p>

<p>不幸的是，我们没有现成的工具可以格式化它，所以我们要自己定制一个小工具来完成我们的任务。</p>

<p>此时我们可以借助SimpleParse。</p>

<p>下面的原始的文法，很乱是不是：<!-- more --></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>text  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Program 			 -&amp;gt; external_declaration
</span><span class='line'>external_declaration-&amp;gt; Func_definitions | external_decl_stmt
</span><span class='line'>Func_definitions	 -&amp;gt; {Func_definition}+
</span><span class='line'>Func_definition	 -&amp;gt; type id “(“ param_type_list “)” block
</span><span class='line'>external_decl_stmt -&amp;gt; &lt;empty&gt; | type declarators “;”
</span><span class='line'>Type 			 -&amp;gt; int | float | double | char | long | ………….
</span><span class='line'>Param_type_list 	 -&amp;gt; type id {type_param}* | &lt;empty&gt;
</span><span class='line'>Type_param		 -&amp;gt; “,” type id | &lt;empty&gt;
</span><span class='line'>Block			 -&amp;gt; “{“ stmts “}”
</span><span class='line'>Stmts        -&amp;gt; decl_stmt | if_stmt | while_stmt | for_stmt | dowhile_stmt |                               switch_stmt | return_stmt | assign | &lt;empty&gt;
</span><span class='line'>Decl_stmt		-&amp;gt; &lt;empty&gt; | type declarators “;”
</span><span class='line'>Declarators		-&amp;gt; declarator { “,” declarator }
</span><span class='line'>Declarator		-&amp;gt; {Pointer}? id { arrayDeclarator}	? assignForDecl
</span><span class='line'>Pointer			-&amp;gt; “*” {pointer}?
</span><span class='line'>arrayDeclarator	-&amp;gt; “[“ {const_expr}? “]” {arrayDeclarator}?
</span><span class='line'>const_expr		-&amp;gt; conditional_expr
</span><span class='line'>conditional_expr	-&amp;gt; logical_expr | logical_expr “?” expr : conditional_expr
</span><span class='line'>assignForDecl		-&amp;gt; &lt;empty&gt; | “=” expr
</span><span class='line'>factor			-&amp;gt; num | “(“ expr “)” | abstract_declarator
</span><span class='line'>abstract_declarator-&amp;gt; id | id “[“ expr “]” | id “(“ param_list “)” | id “-&amp;gt;” abstract_declarator
</span><span class='line'>| id “.” abstract_declarator
</span><span class='line'>param_list		-&amp;gt; &lt;empty&gt; | param { “,” param }*
</span><span class='line'>param			-&amp;gt; expr
</span><span class='line'>if_stmt			-&amp;gt; “if” “(“ expr “)” compound_stmt
</span><span class='line'>compound_stmt	-&amp;gt; block | stmt
</span><span class='line'>while_stmt		-&amp;gt; “while” “(“ expr “)” compound_stmt
</span><span class='line'>assign			-&amp;gt; Declarator “=” expr
</span><span class='line'>expr				-&amp;gt; assignment_expr {“,” assignment_expr }+
</span><span class='line'>assignment_expr	-&amp;gt; conditional_expr | unary_expr assgnment_op assignment_expr
</span><span class='line'>assgnment_op	  	-&amp;gt; “=” | “+=” | …
</span><span class='line'>unary_op			-&amp;gt; “&amp;amp;” | “+” | “*” | …
</span><span class='line'>unary_expr		-&amp;gt; postfix_expr | “++” unary_expr | “—“ unary_expr | unary_op cast_expr
</span><span class='line'>cast_expr			-&amp;gt; unary_expr | “(“ type_name “)” cast_expr
</span><span class='line'>postfix_expr		-&amp;gt; primary_expr { postfix_op }+
</span><span class='line'>postfix_op		-&amp;gt; “[“ expr “]” | “(“ assignment_expr “)” | “-&amp;gt;” id | “.” Id | “++” | “—“
</span><span class='line'>primary_expr		-&amp;gt; id | constant | string | “(“ expr “)”
</span><span class='line'>constant			-&amp;gt; integer_const | char_const | floating_const | enum_const&lt;/empty&gt;&lt;/empty&gt;&lt;/empty&gt;&lt;/empty&gt;&lt;/empty&gt;&lt;/empty&gt;&lt;/empty&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们将其格式化后得到：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>text  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Program               -&amp;gt;  external_declaration
</span><span class='line'>external_declaration  -&amp;gt;  Func_definitions
</span><span class='line'>                       | external_decl_stmt
</span><span class='line'>Func_definitions      -&amp;gt;  {Func_definition}+
</span><span class='line'>Func_definition       -&amp;gt;  type id “(“ param_type_list “)” block
</span><span class='line'>external_decl_stmt    -&amp;gt;  &lt;empty&gt;
</span><span class='line'>                       | type declarators “;”
</span><span class='line'>Type                  -&amp;gt;  int
</span><span class='line'>                       | float
</span><span class='line'>                       | double
</span><span class='line'>                       | char
</span><span class='line'>                       | long
</span><span class='line'>                       | ………….
</span><span class='line'>Param_type_list       -&amp;gt;  type id {type_param}*
</span><span class='line'>                       | &lt;empty&gt;
</span><span class='line'>Type_param            -&amp;gt;  “,” type id
</span><span class='line'>                       | &lt;empty&gt;
</span><span class='line'>Block                 -&amp;gt;  “{“ stmts “}”
</span><span class='line'>Stmts                 -&amp;gt;  decl_stmt
</span><span class='line'>                       | if_stmt
</span><span class='line'>                       | while_stmt
</span><span class='line'>                       | for_stmt
</span><span class='line'>                       | dowhile_stmt
</span><span class='line'>                       | switch_stmt
</span><span class='line'>                       | return_stmt
</span><span class='line'>                       | assign
</span><span class='line'>                       | &lt;empty&gt;
</span><span class='line'>Decl_stmt             -&amp;gt;  &lt;empty&gt;
</span><span class='line'>                       | type declarators “;”
</span><span class='line'>Declarators           -&amp;gt;  declarator { “,” declarator }
</span><span class='line'>Declarator            -&amp;gt;  {Pointer}? id { arrayDeclarator}	? assignForDecl
</span><span class='line'>Pointer               -&amp;gt;  “*” {pointer}?
</span><span class='line'>arrayDeclarator       -&amp;gt;  “[“ {const_expr}? “]” {arrayDeclarator}?
</span><span class='line'>const_expr            -&amp;gt;  conditional_expr
</span><span class='line'>conditional_expr      -&amp;gt;  logical_expr
</span><span class='line'>                       | logical_expr “?” expr : conditional_expr
</span><span class='line'>assignForDecl         -&amp;gt;  &lt;empty&gt;
</span><span class='line'>                       | “=” expr
</span><span class='line'>factor                -&amp;gt;  num
</span><span class='line'>                       | “(“ expr “)”
</span><span class='line'>                       | abstract_declarator
</span><span class='line'>abstract_declarator   -&amp;gt;  id
</span><span class='line'>                       | id “[“ expr “]”
</span><span class='line'>                       | id “(“ param_list “)”
</span><span class='line'>                       | id “-&amp;gt;” abstract_declarator
</span><span class='line'>                       | id “.” abstract_declarator
</span><span class='line'>param_list            -&amp;gt;  &lt;empty&gt;
</span><span class='line'>                       | param { “,” param }*
</span><span class='line'>param                 -&amp;gt;  expr
</span><span class='line'>if_stmt               -&amp;gt;  “if” “(“ expr “)” compound_stmt
</span><span class='line'>compound_stmt         -&amp;gt;  block
</span><span class='line'>                       | stmt
</span><span class='line'>while_stmt            -&amp;gt;  “while” “(“ expr “)” compound_stmt
</span><span class='line'>assign                -&amp;gt;  Declarator “=” expr
</span><span class='line'>expr                  -&amp;gt;  assignment_expr {“,” assignment_expr }+
</span><span class='line'>assignment_expr       -&amp;gt;  conditional_expr
</span><span class='line'>                       | unary_expr assgnment_op assignment_expr
</span><span class='line'>assgnment_op          -&amp;gt;  “=”
</span><span class='line'>                       | “+=”
</span><span class='line'>                       | …
</span><span class='line'>unary_op              -&amp;gt;  “&amp;amp;”
</span><span class='line'>                       | “+”
</span><span class='line'>                       | “*”
</span><span class='line'>                       | …
</span><span class='line'>unary_expr            -&amp;gt;  postfix_expr
</span><span class='line'>                       | “++” unary_expr
</span><span class='line'>                       | “—“ unary_expr
</span><span class='line'>                       | unary_op cast_expr
</span><span class='line'>cast_expr             -&amp;gt;  unary_expr
</span><span class='line'>                       | “(“ type_name “)” cast_expr
</span><span class='line'>postfix_expr          -&amp;gt;  primary_expr { postfix_op }+
</span><span class='line'>postfix_op            -&amp;gt;  “[“ expr “]”
</span><span class='line'>                       | “(“ assignment_expr “)”
</span><span class='line'>                       | “-&amp;gt;” id
</span><span class='line'>                       | “.” Id
</span><span class='line'>                       | “++”
</span><span class='line'>                       | “—“
</span><span class='line'>primary_expr          -&amp;gt;  id
</span><span class='line'>                       | constant
</span><span class='line'>                       | string
</span><span class='line'>                       | “(“ expr “)”
</span><span class='line'>constant              -&amp;gt;  integer_const
</span><span class='line'>                       | char_const
</span><span class='line'>                       | floating_const
</span><span class='line'>                       | enum_const&lt;/empty&gt;&lt;/empty&gt;&lt;/empty&gt;&lt;/empty&gt;&lt;/empty&gt;&lt;/empty&gt;&lt;/empty&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>以下是格式化程序，其中定义了UltraDemo输出文法的EBNF的文法。嗯，对，就是文法的文法，哈哈。</p>

<p>这个写得比较乱，昨晚才接触SimpleParse，还是有些不是很熟悉，有空看看更灵活的Spark。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>python  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;usrbinenv-python&quot;</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pprint</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">simpleparse.parser</span> <span class="kn">import</span> <span class="n">Parser</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">simpleparse</span> <span class="kn">import</span> <span class="n">dispatchprocessor</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">declaration</span> <span class="o">=</span> <span class="n">r</span><span class="err">’’’</span>
</span><span class='line'><span class="nb">file</span>            <span class="p">:</span><span class="o">=</span> <span class="p">[</span> \<span class="n">t</span>\<span class="n">r</span>\<span class="n">n</span><span class="p">]</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">grammer</span><span class="o">+</span>
</span><span class='line'><span class="n">grammer</span>         <span class="p">:</span><span class="o">=</span> <span class="n">header</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="err">‘</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">’</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="n">blocks</span>
</span><span class='line'><span class="n">ts</span>              <span class="p">:</span><span class="o">=</span> <span class="p">[</span> \<span class="n">t</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">header</span>          <span class="p">:</span><span class="o">=</span> <span class="n">identifier</span>
</span><span class='line'><span class="n">identifier</span>      <span class="p">:</span><span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">-</span><span class="n">zA</span><span class="o">-</span><span class="n">Z_</span><span class="p">]</span><span class="o">+</span>
</span><span class='line'><span class="n">blocks</span>          <span class="p">:</span><span class="o">=</span> <span class="n">block</span><span class="p">,</span> <span class="p">[</span>\<span class="n">r</span>\<span class="n">n</span><span class="p">]</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="p">(</span><span class="n">ts</span><span class="p">,</span> <span class="err">“</span><span class="o">|</span><span class="err">”</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="n">block</span><span class="p">,</span> <span class="p">[</span> \<span class="n">r</span>\<span class="n">n</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="o">*</span>
</span><span class='line'><span class="n">block</span>           <span class="p">:</span><span class="o">=</span> <span class="o">-</span><span class="p">[</span><span class="o">|</span>\<span class="n">r</span>\<span class="n">n</span><span class="p">]</span><span class="o">+</span>
</span><span class='line'><span class="err">‘’’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">maxTagLen</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">def</span> <span class="nf">counter</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>    <span class="err">‘</span><span class="s">&#39;’Find the longest length of header’’’</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">maxTagLen</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">tag</span> <span class="o">==</span> <span class="err">‘</span><span class="n">header</span><span class="err">’</span> <span class="ow">and</span> <span class="n">maxTagLen</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">:</span>
</span><span class='line'>        <span class="n">maxTagLen</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">isFisrtBlock</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'><span class="n">offset</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">def</span> <span class="nf">printer</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>    <span class="err">‘</span><span class="s">&#39;’print the grammers’’’</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">text</span><span class="p">,</span> <span class="n">isFisrtBlock</span><span class="p">,</span> <span class="n">maxTagLen</span><span class="p">,</span> <span class="n">offset</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">tag</span> <span class="o">==</span> <span class="err">‘</span><span class="n">header</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>        <span class="n">offset</span> <span class="o">=</span> <span class="n">maxTagLen</span> <span class="o">-</span> <span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">text</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">end</span><span class="p">],</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">tag</span> <span class="o">==</span> <span class="err">‘</span><span class="n">blocks</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">offset</span> <span class="o">*</span> <span class="err">‘</span> <span class="err">‘</span><span class="p">,</span> <span class="err">‘</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>        <span class="n">isFisrtBlock</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">tag</span> <span class="o">==</span> <span class="err">‘</span><span class="n">block</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="err">“</span><span class="o">%</span><span class="n">s</span><span class="o">%</span><span class="n">s</span><span class="err">”</span> <span class="o">%</span> <span class="p">(</span><span class="err">‘’</span> <span class="k">if</span> <span class="n">isFisrtBlock</span> <span class="k">else</span> <span class="p">(</span><span class="n">maxTagLen</span> <span class="o">+</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="err">‘</span> <span class="err">‘</span> <span class="o">+</span> <span class="err">‘</span><span class="o">|</span> <span class="err">‘</span><span class="p">,</span> <span class="n">text</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">end</span><span class="p">])</span>
</span><span class='line'>        <span class="n">isFisrtBlock</span> <span class="o">=</span> <span class="bp">False</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">travel</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">root</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">tag</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">children</span> <span class="o">=</span> <span class="n">root</span>
</span><span class='line'><span class="n">func</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">children</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">children</span><span class="p">:</span> <span class="n">travel</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">func</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span><span class="err">”</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">”</span><span class="p">:</span>
</span><span class='line'>    <span class="n">inFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="err">“</span><span class="mf">2.</span><span class="n">txt</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="err">“”</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">inFile</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span>
</span><span class='line'>        <span class="n">text</span> <span class="o">+=</span> <span class="n">line</span> <span class="o">+</span> <span class="err">“</span>\<span class="n">n</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">parser</span> <span class="o">=</span> <span class="n">Parser</span><span class="p">(</span> <span class="n">declaration</span><span class="p">,</span> <span class="s">&quot;file&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="n">success</span><span class="p">,</span> <span class="n">resultTrees</span><span class="p">,</span> <span class="n">nextChar</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="c">#pprint.pprint(resultTrees)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">resultTrees</span><span class="p">:</span> <span class="n">travel</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">counter</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">maxTagLen</span>
</span><span class='line'><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">resultTrees</span><span class="p">:</span> <span class="n">travel</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">printer</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UltraDemo的界面用C#重写]]></title>
    <link href="http://everet.org/2012/02/ultrademo-interface-rewritten-in-c.html"/>
    <updated>2012-02-27T23:07:15+08:00</updated>
    <id>http://everet.org/2012/02/ultrademo-interface-rewritten-in-c</id>
    <content type="html"><![CDATA[<p>UltraDemo是一款数据结构的实践与演示的平台，可以在上面编写类C的代码。</p>

<p>通过UltraDemo，我们将可以以图形化的信息观察到我们写的数据结构的变化的过程。</p>

<p>UltraDemo是由编译器、汇编解释器和动画框架加上动画组成的平台。可以单步调试，查看内存变量等之外还可以观看动画形式的数据结构，这样可以方便初学者更快地理解各种数据结构。</p>

<p>原来的界面是C++/MFC写的，长得和VS2008差不多，看上去风格挺古老的。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/02/image14.png"><img src="http://everet.org/wp-content/uploads/2012/02/image_thumb14.png" alt="image" /></a></p>

<!-- more -->

<p>现在正在由屠文翔同学使用C#/WPF重写界面，现在正在进行中，将来会有更佳的用户体验。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/02/image15.png"><img src="http://everet.org/wp-content/uploads/2012/02/image_thumb15.png" alt="image" /></a></p>

<p>目前编译器还比较废，等做完折纸再接着完善了，说到底现在只有3个苦命的娃有开发，其他人都是在打酱油唉。所以俺们还是相当的苦逼的。</p>

<p>UltraDemo是一年前我们组做的数据结构大作业，相对于其他的数据结构演示软件新颖之处就是，我们可以在上面自己写代码，并且看到运行过程中的各种细节。</p>

<h3 id="section">工作原理</h3>

<p>基本工作原理是将代码翻译成汇编代码，然后一个汇编解释器解释汇编来运行程序。</p>

<p>动画模块则监视着特殊命名的变量来演示。</p>

<p>其中动画是以dll插件加载，任何人只要遵循我们的接口都可以为UltraDemo这个平台增加数据结构的动画。</p>

<h3 id="section-1">进度</h3>

<p>最近我们主要人员比较忙，还有两个全新的东西要做，需要花费很多精力才可以完成。于是我们决定将UltraDemo先放一下，等到临近软件文化节再开工写动画了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[寒假计划]]></title>
    <link href="http://everet.org/2012/01/winter-plan.html"/>
    <updated>2012-01-19T06:40:46+08:00</updated>
    <id>http://everet.org/2012/01/winter-plan</id>
    <content type="html"><![CDATA[<p>周六回到家，今天是周三了，天天坐在电脑前日子过得好快啊，还想出去走走的，家里的天气比广州不知好多少，好想出去闲逛去拍照啊~</p>

<p>想想寒假有什么东西要做先~</p>

<ol>
  <li>
    <p>Clover的文档和骨架</p>
  </li>
  <li>
    <p>搭建Git</p>
  </li>
  <li>
    <p>完善Scar</p>
  </li>
  <li>
    <p>转移QQ空间的相册过来</p>
  </li>
  <li>
    <p>看书</p>
  </li>
  <li>
    <p>完善一下UltraDemo的语法解释，增强健壮性，改为多进程，有空再把绘图从GDI改成OpenGL或者其他了</p>
  </li>
</ol>

]]></content>
  </entry>
  
</feed>
