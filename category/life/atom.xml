<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Life | EverET.org]]></title>
  <link href="http://everet.org/category/life/atom.xml" rel="self"/>
  <link href="http://everet.org/"/>
  <updated>2013-01-02T00:57:30+08:00</updated>
  <id>http://everet.org/</id>
  <author>
    <name><![CDATA[Stupid ET]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[由TT引发的思考]]></title>
    <link href="http://everet.org/2012/12/tt.html"/>
    <updated>2012-12-30T13:34:00+08:00</updated>
    <id>http://everet.org/2012/12/tt</id>
    <content type="html"><![CDATA[<p>TT是一个很古老的打字软件，还运行在DOS下，能够存活这么多年实属不易。对于这么一个DOS程序，它的优势也起来了。因为DOSBox的跨平台，于是TT也可以跨平台了。</p>

<p><img src="/imgs/snapshot2<em>20121230</em>133903_4556ydQ.png"></p>

<p>这多么像以前我们小学的用DOS的电脑里面的东西，突然想起以前的LOGO语言和打的雷电也是这种感觉。好吧，其实我也不是那么怀旧，如果不是去实习，也不会遇到一个如此奇葩的程序。蓝色背景绿色前景，这个我在实习的时候经常会在新入职的童鞋们的电脑上看的这样的搭配。他们都在练TT，而且不练到60 WPM就不能转正，这还是真是压力巨大。</p>

<p>为了以后节省一点打字时间，我也开始练习TT，虽然在之前的几个月都有练TT，但是发现除了对于数字和特殊符号熟悉了一些外，没有什么进步，一直都维持在40+ WPM，离60还有很大的距离。虽然我练的时间比较少，但是也不至于这样基本没进步吧。难道我一辈子都要维持在这种龟速了。</p>

<h2 id="section">穷则思变</h2>

<p>经过观察，貌似我打英文的速度也不至于那么慢，只是准确率很低，要经常删去打错的，于是乎这样整体速度就还是很慢了。</p>

<!-- more -->

<p>举个例子，如果每打5个字母，就打错3个，那么假如在按下了16个字母键，实际的产出就只有4个字母，而且还要搭上6个退格，也就是总共按下了22个按键。</p>

<p>而如果完全可以不打错的话，就只需要按下4个字母键就可以达到同样的效果。</p>

<p>所以，即便按得很快的人的按键速度是打得慢但是准确的人的2倍，打字速度也不到准确的人的一半。</p>

<p>这就像一个人往前走5步，就发现走错了3步，然后往回退，然后再走五步又发现错了3步，如此周而复始，但头来其实都没走多远。</p>

<p>所以对于我，提高准确率，少做些无用功，或许是提高速度的有效方法。</p>

<h2 id="section-1">根本问题</h2>
<p>我想，这本质的问题在于：<strong>鲁莽前进</strong>。</p>

<p>就像平时写代码的时候，有时可能会为了速度，不思考就直接开工。如果走错了，到头来最后其实也是看似花了很多时间，却产出很少，大量的时间都在各种重构甚至架构修改上面。</p>

<p>所以，思考清晰下一步，少走一些弯路，这样才是节约时间、对于生命负责的表现啊。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Wordpress to Octopress]]></title>
    <link href="http://everet.org/2012/12/migrate-from-wordpress-to-octopress.html"/>
    <updated>2012-12-25T20:49:00+08:00</updated>
    <id>http://everet.org/2012/12/migrate-from-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<h2 id="section">为什么</h2>
<p>为什么离开Wordpress选择Octopress？ 在Google中搜索Wordpress+Octopress就会找到整版整版的从Wordpress迁移到Octopress的博文，
其中有介绍各种迁移的理由，例如Wordpress太臃肿，Octopress可以让我们像黑客一样写博客。</p>

<p>这些都太高雅了，我只是不喜欢PHP那一坨一坨文明用语一样的代码，这样改起来的时候实在是让人蛋疼。而Octopress是Ruby写的，于是可以借机学习一下<em>Ruby</em>（<strong>这个是主要原因</strong>）。</p>

<!-- more -->

<h2 id="wordpress">对于Wordpress的看法</h2>
<p>Wordpress可以让我们在浏览器写东西，也可以用客户端来写，例如Windows Live Writer、Emacs + org2blog<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。
当我们在其他人电脑，没有客户端的时候，一样可以打开浏览器写。Wordpress既可以是胖客户端，又可以是瘦客户端。
而且Wordpress架构设计灵活，插件主题丰富。用户体验好，也可以用Markdown、org等等其他语言来写。对于静态化，装个WP-Super-Cache插件就可以将所有文章静态化了，而且静态化的程度是可以控制的。</p>

<h3 id="section-1">缺点</h3>
<ol>
  <li>是PHP写的，用MySQL，这两个东西一下就占了一堆内存。对于我们这些穷苦人民的VPS十分不友好。</li>
  <li>不联网就没法预览最终效果。</li>
</ol>

<h2 id="octopress">对于Octopress的看法</h2>
<p>对于Octopress的优点网上也有一堆一堆的评论，我也就不太多说了。我们来看看我觉得的缺点：</p>

<h3 id="section-2">缺点</h3>
<ol>
  <li>Octopress是一个胖客户端的博客系统，在写博客前，你需要安装Git、Ruby等等东西，然后把环境调教好，才能开始写东西。</li>
  <li>如果去到别人的电脑，或者是Windows的话，那么写个博客都会非常的蛋疼。</li>
  <li>相对缺乏插件与主题。</li>
  <li>发布一篇文章就要重建整个博客，慢。</li>
</ol>

<h3 id="section-3">优点</h3>
<blockquote>
  <p>Octopress is jekyll with Batteries included.</p>
</blockquote>

<p>直接就是用Markdown语法，不用纠结org还是markdown。
可以方便地离线预览文章<code>rake preview</code>。</p>

<h3 id="misc">Misc</h3>
<p>Octopress默认的markdown引擎是rdiscount，这个实在是让人难以接受，连footnote都不支持。于是果断换成了kramdown<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。kramdown支持footnote，甚至LaTex<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p>

<h2 id="section-4">其他</h2>

<h3 id="section-5">写博客的三个阶段</h3>
<p>之前看过阮一峰写的一篇文章<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">github Pages和Jekyll入门</a>，里面有讲到，喜欢写博客的人，会经历三个阶段：</p>

<blockquote>
  <p>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。
第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。
第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</p>
</blockquote>

<p>好吧，我觉得独立博客的管理确实挺麻烦的，加上刚刚经历买了1年的VPS没到一个月，主机商就跑路的悲剧后，就愈发觉得自己负责可靠性等各种东西的维护确实挺麻烦的。就先暂时放在Github上面，日后再自己管理。</p>

<p>放在Github上面有个坏处是，对于页面都有缓存：<code>Cache-Control: max-age=86400</code>，也就是有一整天缓存时间，如果一天内有访问过这个页面的浏览器不刷新的话就直接从cache里面取了。不过应该也没什么大碍，基本不会一天更新好几次。而且除了自己也没什么人访问。</p>

<h3 id="emacs">Emacs</h3>
<p>Emacs既可以方便地写Wordpress也可以写Octopress。
<img src="/imgs/emacs-user-at-work.jpg" alt="Emacs User At Work" /><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<h3 id="ruby">Ruby</h3>
<p>这段时间看了Ruby，发现竟然可以比Python更加优美，我想，日后，可能也会有很多人从Python流向Ruby，就像曾经人们从Perl流向Python一样。</p>

<p>这就是江山代有才人出，长江后浪推前浪啊。事物总是在进步着。</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://github.com/punchagan/org2blog">https://github.com/punchagan/org2blog</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://kramdown.rubyforge.org/index.html">http://kramdown.rubyforge.org/index.html</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://yanping.me/cn/blog/2012/03/10/octopress-with-latex/">在Octopress中使用LaTeX</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><a href="http://batsov.com/articles/2011/11/11/blogging-like-a-hacker-evolution/">http://batsov.com/articles/2011/11/11/blogging-like-a-hacker-evolution/</a><a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有什么样的硬件，用什么样的软件]]></title>
    <link href="http://everet.org/2012/12/hardware-decide-the-software.html"/>
    <updated>2012-12-04T03:39:17+08:00</updated>
    <id>http://everet.org/2012/12/hardware-decide-the-software</id>
    <content type="html"><![CDATA[<p>两年多前买的摩托罗拉的里程碑1代，现在竟然已经无力支撑go桌面这样庞大的软件了。虽然我很喜欢go桌面，但是，现在手机已经无力承担如此重负。确实，什么样的基础就应该过什么样的生活，过高的追求只会让生活变得像一条狗一样，苟延残喘。 <!-- more -->
里程碑的硬件已经强过以前我家的电脑了，以前我的台式机只有650MHz的CPU，64M的内存，9GB的硬盘，但都可以轻松跑Win 2k，再跑个VC也绰绰有余。而现在的一台手机，CPU超频到了800MHz，内存256MB，跑一个桌面就卡到爆炸，其他东西就都不用用了。这个是为什么呢？果然，无论有多少硬件资源，都会被平庸的程序员挥霍干净。</p>

<p>人们在拥有的时候永远不会懂得珍惜啊！ 现在的程序员能不能提高一下性能，节约一下资源的消耗啊？！
手机卡到爆炸，于是乎重新刷了CyanogenMod在11月22日放出的的rom，我的桌面又从go桌面回到了ADW。虽然每次ADW都被我直接忽视而装上go，但这次，我决定用一下它。突然发现，速度有了质的飞跃。开完程序回到桌面发现桌面没有被kill掉，这是多么的让人欣慰啊。</p>

<p>原来，不仅仅是我的手机硬件老了，而是，随着时间的流逝，我们索要的越来越多，最终，超出了大环境的承受能力了。有时候，只要降低一下自己的预期，生活就会很美好了。
有什么样的能力，就应该过什么样的生活。当然，也可以提高自己的能力。不过现在也没有条件更换硬件，于是也只能有什么样的硬件，用什么样的软件。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VPS主机商跑路了]]></title>
    <link href="http://everet.org/2012/11/vps-host-disappear.html"/>
    <updated>2012-11-30T18:35:31+08:00</updated>
    <id>http://everet.org/2012/11/vps-host-disappear</id>
    <content type="html"><![CDATA[<p>刚刚切换到风云主机没一个月，而且还是年付的，没想到月底风云主机就倒闭了，A大也跑路了。在收到风云主机的邮件时，风云主机的官网vpswind.com也打不开了，邮件发了也没人回，付款看样子也讨不回来了。不过，好在A大在倒闭前的26号还发了邮件说要倒闭了，言下之意就是要我们自己备份好，然后自己卷卷铺盖走人，也给了几天时间备份数据。</p>

<p>不得不说，风云主机的VPS性价比还是挺不错的，只是没有考虑到倒闭问题。所以，高性价比还是有风险的，而且一旦发生意外，那么所谓的高性价比马上就变得子虚乌有了。<!-- more --></p>

<p>先不说这次事件带来的经济损失，但是还是有许多其他可以思考的地方。</p>

<p>这是我第一次近距离接触一个IT公司的倒闭，在迁移到风云主机前，专门看过A大一些信息，他曾经在dia和xehost，然后出来自己干。没想到自己干没到一年，就倒闭了。所以创业还是有风险的，有时候有些人失败就可能落下个名声扫地，永远都爬不起来了。自己干，自己做老大，固然拥有了工作上时间的自由，但可能失去的是自己的更多的时间以及稍不注意，失去的可能是自己的健康。</p>

<p>看到现在许许多多的人想自己创业，我想，终究其中的多数会像风云主机一样如同昙花一现，留下的只是少数的强者。创业要的除了技术之外的能力，还有很多很多……</p>

<p>修炼……</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[语录]]></title>
    <link href="http://everet.org/2012/05/quotation.html"/>
    <updated>2012-05-21T21:42:12+08:00</updated>
    <id>http://everet.org/2012/05/quotation</id>
    <content type="html"><![CDATA[<p><strong>吾尝终日而思矣，不如须臾之所学也；吾尝跂而望矣，不如登高之博见也。登高而招，臂非加长也，而见者远；顺风而呼，声非加疾也，而闻者彰。假舆马者，非利足也，而致千里；假舟楫者，非能水也，而绝江河。君子生非异也，善假于物也。</strong></p>

<p>—- 《劝学》</p>

<p><strong>学而不思则罔，思而不学则殆。</strong></p>

<p><strong>温故而知新，可以为师矣。</strong></p>

<p>—- 《论语·为政第二》</p>

<p><strong>学而时习之，不亦说乎？有朋自远方来，不亦乐乎？人不知而不愠，不亦君子乎？</strong></p>

<p>—- 《论语·学而第一》</p>

<p><strong>KISS. Keep It Simple, <a href="http://EverET.org">Stupid</a>.</strong></p>

<p>—- Unkown</p>

<p><strong>A designer knows he has arrived at perfection not when there is no longer anything to add, but when there is no longer any thing to take away.</strong></p>

<!-- more -->

<p>—- Antoine de Saint-Exupery</p>

<p><strong>Simple, few parts, easy to maintain, very strong.</strong></p>

<p>—- General Chuck Yeager</p>

<p><strong>Discovery consists of seeing what everybody has seen and thinking what nobody has thought.</strong></p>

<p><em>**</em>—- Albert Szent-Gyorgyi</p>

<p><strong>When in doute, use brute force.</strong></p>

<p>—- Kenneth Lane <em>Thompson</em></p>

<p><strong>Premature optimization is the <em>root</em> of all <em>evil!</em></strong></p>

<p><em>_—- Donald _Knuth</em></p>

<p><strong>In theory, theory and practice are the same. In practice, they’re not.</strong></p>

<p>—- Unkown</p>

<p><strong>Those who cannot remember the past are condemned to repeat it.</strong></p>

<p>—- George Santayana</p>

<p><strong>Don’t repeat yourself.</strong></p>

<p>—- Unkown</p>

<p><strong>原则1：你无法断定程序会在什么地方耗费运行时间。瓶颈经常出现在想不到的地方，所以别急于胡乱找个地方改代码，除非你已经证实那儿就是瓶颈所在。</strong>
<strong>原则2：估量。在你没对代码进行估量，特别是没找到最耗时的那部分之前，别去优化速度。</strong>
<strong>原则3：花哨的算法在n很小时通常很慢，而n通常很小。花哨算法的常数复杂度很大。除非你确定n总是很大，否则不要用花哨算法（即使n很大，也优先考虑原则2）。</strong>
<strong>原则4：花哨的算法比简单算法更容易出bug、更难实现。尽量使用简单的算法配合简单的数据结构。</strong>
<strong>原则5：数据压倒一切。如果已经选择了正确的数据结构并且把一切都组织得井井有条，正确的算法也就不言自明。编程的核心是数据结构，而不是算法。</strong>
<strong>原则6：没有原则6。</strong></p>

<p>—- Rob Pike</p>

<p><strong>1. 模块原则：使用简洁的接口拼合简单的部件。</strong>
<strong>2. 清晰原则：清晰胜于机巧。</strong>
<strong>3. 组合原则：设计时考虑拼接组合。</strong>
<strong>4. 分离原则：策略同机制分离，接口同引擎分离。</strong>
<strong>5. 简洁原则：设计要简洁，复杂度能低则低。</strong>
<strong>6. 吝啬原则：除非确无它法，不要编写庞大的程序。</strong>
<strong>7. 透明性原则：设计要可见，以便审查和调试。</strong>
<strong>8. 健壮原则：健壮源于透明与简洁。</strong>
<strong>9. 表示原则：把知识叠入数据以求逻辑质朴而健壮。</strong>
<strong>10. 通俗原则：接口设计避免标新立异。</strong>
<strong>11. 缄默原则：如果一个程序没什么好说的，就沉默。</strong>
<strong>12. 补救原则：出现异常时，马上退出并给出足够错误信息。</strong>
<strong>13. 经济原则：宁花机器一分，不花程序员一秒。</strong>
<strong>14. 生成原则：避免手工hack，尽量编写程序去生成程序。</strong>
<strong>15. 优化原则：雕琢前先要有原型，跑之前先学会走。</strong>
<strong>16. 多样原则：决不相信所谓“不二法门”的断言。</strong>
<strong>17. 扩展原则：设计着眼未来，未来总比预想来得快。</strong></p>

<p>—- 《Unix编程艺术》</p>

<p><strong>Perl - The only language that looks the same before and after RSA encryption.</strong></p>

<p>—- Keith Bostic</p>

<p><strong>Yesterday is a history, tomorrow is a mystery, only today is a gift.</strong></p>

<p>—- Alice Morse Earle</p>

<p><strong>Better to do something imperfectly than to do nothing flawlessly.</strong>
宁愿做事而犯错，也不要为了不犯错而什么都不做。</p>

<p>—- Robert Schuller</p>

<p><strong>Always be a first-rate version of yourself, instead of a second-rate version of somebody else.</strong>
永远做自己的一流版本，永不做他人的二流版本。</p>

<p>—– Judy Garland</p>

<p><strong>The greatest barrier to success is the fear of failure。</strong></p>

<p>—- Sven Goran Eriksson</p>

<p><strong>I didn’t fail the test, I just found 100 ways to do it wrong。</strong></p>

<p>—- Benjamin Franklin</p>

<p><strong>I leave no trace of wings in the air, but I am glad I have had my flight.</strong>
天空不曾留下鸟儿的痕迹，但我已飞过。</p>

<p>—- 《飞鸟集》</p>

<p>(<a href="http://everet.org/2012/05/quotation.html">未完待续</a>)</p>
]]></content>
  </entry>
  
</feed>
