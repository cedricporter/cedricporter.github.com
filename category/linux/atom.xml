<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | EverET.org]]></title>
  <link href="http://everet.org/category/linux/atom.xml" rel="self"/>
  <link href="http://everet.org/"/>
  <updated>2013-01-08T13:29:54+08:00</updated>
  <id>http://everet.org/</id>
  <author>
    <name><![CDATA[Stupid ET]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[screen在ssh远程登录中的使用]]></title>
    <link href="http://everet.org/2012/11/screen-on-ssh.html"/>
    <updated>2012-11-01T09:29:12+08:00</updated>
    <id>http://everet.org/2012/11/screen-on-ssh</id>
    <content type="html"><![CDATA[<p>11月了，没想到10月份竟然木有写博客。这几天在迁移服务器，时间不赶，就慢慢弄，顺便记录一下一些技巧。</p>

<p>首先，远程ssh登录到服务器，可能中途会出现网络断掉或者超时，这时候ssh里面就打不了字了，就只能关闭再重新连接。如果我们用vim编辑一个文件到了一半的话，就会蛋疼地多了一个swp。那么如果我们希望在重新连接回去的时候，可以回到之前的工作状态，我们应该怎么办呢？答案是借助screen。</p>

<p>对于screen的使用就不再罗嗦了。具体可以参看后面的参考资料中提供的链接。</p>

<h2 id="section">一些技巧</h2>

<p>下面可能会与诸位使用习惯有所冲突，请见谅。</p>

<h3 id="ctrla">把ctrl+a还给我</h3>

<p>首先，screen的命令的前缀是ctrl+a，进入screen后，ctrl+a就成了命令前缀了。我经常使用ctrl+a跳到行首，ctrl+e跳到行尾，所以需要修改一下前缀，否则ctrl+a跳到行首这个习惯就得改了。我们在家目录下面创建一个文件<strong>～/.screenrc</strong>。然后在里面写上</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>escape ^Zz
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后就把前缀改成ctrl+z了，如果需要暂停程序的话，就用ctrl+z z来暂停。这样ctrl+a就回来了。</p>

<h3 id="section-1">偷懒</h3>

<p>每次打screen真麻烦，我们在<strong>～/.bashrc</strong>中加上<!-- more --></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">sc</span><span class="o">=</span>’screen’
</span><span class='line'><span class="nb">alias </span><span class="nv">scb</span><span class="o">=</span>’screen -dr normaltask <span class="o">||</span> screen -S normaltask’
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>输入<strong>source ~/.bashrc</strong> 就可以用sc来代替screen了。</p>

<p>为了解决断开连接恢复工作状态的问题，我们假定我们的一个窗口叫normaltask。</p>

<p>然后每次登录的时候，输入 scb，就可以恢复到normaltask这个常用窗口之前的任务了。是不是很方便呢？</p>

<h3 id="section-2">补全</h3>

<p>在screen下面的补全很有问题，和bash有明显的区别，只能补全文件名，对于命令的参数的补全就无法补全了。因为screen默认貌似是使用未登录的shell。</p>

<p>所以，我们在<strong>~/.screenrc</strong>加上一句：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>shell -<span class="nv">$SHELL</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>就可以使用bash的补全了。</p>

<h2 id="section-3">参考资料</h2>

<ol>
  <li>
    <p><a href="http://blog.longwin.com.tw/2005/11/screen_teach/">screen 教學</a></p>
  </li>
  <li>
    <p><a href="http://hi.baidu.com/willor/item/3b60db19132035fd65eabfab">screen命令</a></p>
  </li>
  <li>
    <p><a href="http://serverfault.com/questions/126009/how-do-i-ask-screen-to-behave-like-a-standard-bash-shell">How do I ask screen to behave like a standard bash shell?</a></p>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Ubuntu下gnome-settings-daemon高磁盘IO的问题]]></title>
    <link href="http://everet.org/2012/08/fix-gnome-settings-daemon-disk-io.html"/>
    <updated>2012-08-31T18:51:34+08:00</updated>
    <id>http://everet.org/2012/08/fix-gnome-settings-daemon-disk-io</id>
    <content type="html"><![CDATA[<p>最近在用Ubuntu的时候，总是发现用着用着整台电脑就卡死了，什么都动不了，然后硬盘灯一直处于常亮状态。几次艰难地打开shell，发现都是gnome-settings-daemon一直在读写硬盘。这个究竟是什么问题呢？</p>

<p>strace一下，看看，这个进程在干啥。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>console  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">cedricporter@cedricporter-Lenovo:~/projects/CaptchaSystem$</span> sudo strace -p 2207
</span><span class='line'><span class="go">[sudo] password for cedricporter: </span>
</span><span class='line'><span class="go">Process 2207 attached - interrupt to quit</span>
</span><span class='line'><span class="go">lstat(“/home/cedricporter/.thumbnails/normal/b6c1d4f6fff0b536652c83081e5233e1.png”, {st_mode=S_IFREG|0600, st_size=5398, …}) = 0</span>
</span><span class='line'><span class="go">lstat(“/home/cedricporter/.thumbnails/normal/739ea0e4eabe22c5b551156fc3ff93da.png”, {st_mode=S_IFREG|0600, st_size=6059, …}) = 0</span>
</span><span class='line'><span class="go">lstat(“/home/cedricporter/.thumbnails/normal/2aac704bfd3d3a865f66e5c3ee2ba80a.png”, {st_mode=S_IFREG|0600, st_size=6362, …}) = 0</span>
</span><span class='line'><span class="go">lstat(“/home/cedricporter/.thumbnails/normal/5dbe53248aa8a41612137100a315e076.png”, {st_mode=S_IFREG|0600, st_size=6260, …}) = 0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>出来的结果就像刷屏一样，全部都是lstat的系统调用，读取的都是.thumbnails下面的图片。<!-- more --></p>

<p>突然想起这段时间我都在做验证码，在硬盘里面生成了不计其数的验证码图片。去gnome的网站上转了一下，发现原来很多人都遇到这个问题，特别是搞摄影或者经常处理图片的人。</p>

<p>原来gnome-settings-daemon会经常检查缓存是否过期，是否需要删除或者更新，然后就会读一遍缓存中的图片。这个真是悲剧啊。</p>

<p>于是我在非常卡的情况下，把.thumbnail目录删了，瞬间就不卡了。</p>

<h2 id="solution">Solution</h2>

<p>既然这样，我也就不让它检查缓存了，到时塞爆硬盘我再手动删除缓存算了，不想经常电脑因为硬盘卡住完全动不了。</p>

<p>我们打开gconf-editor，设置下面两个值为-1.
/desktop/gnome/thumbnail_cache/maximum_age
/desktop/gnome/thumbnail_cache/maximum_size</p>

<p>然后就不会自动更新缓存了。 当然也可将这两个值设置小一点，就不会有那么多缓存要扫描了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网易泡泡的Linux虚拟机宿主提示外挂]]></title>
    <link href="http://everet.org/2012/08/popo-linux.html"/>
    <updated>2012-08-21T21:37:22+08:00</updated>
    <id>http://everet.org/2012/08/popo-linux</id>
    <content type="html"><![CDATA[<p>在网易实习时，上班一定要开着泡泡，不过泡泡貌似在Linux会严重地水土不服，所以只能装一个虚拟机来解决这个问题。借助<a href="http://everet.org/2012/07/virtualbox-seamless.html">VirtualBox的无缝模式</a>，我们在一定程度上可以缓解这个问题。但是我平时会在多个虚拟桌面。如果恰巧不幸，我长时间没有切换到泡泡所在的虚拟桌面时，那就会有很长时间都不知道有新的泡泡消息。这个无论对人对己都有非常不好的影响。首先，别人无法在第一时间找到我，即便是我开着泡泡；第二，如果有重要通知，我却不幸地没有在泡泡的虚拟桌面时，那就大祸了。<!-- more --></p>

<h2 id="ubuntu4">Ubuntu的4个虚拟桌面</h2>

<p><a href="http://everet.org/wp-content/uploads/2012/08/2012-08-21-112057的屏幕截图.png"><img src="http://everet.org/wp-content/uploads/2012/08/2012-08-21-112057的屏幕截图.png" alt="" /></a></p>

<p>那肿么办呢？</p>

<p>我的想法是，如果虚拟机XP里面的泡泡有收到消息，那么外面的宿主Linux会弹出提示窗口告知我们有新的泡泡消息啦，赶紧冲过去围观吧。</p>

<p>那么具体怎么做呢？</p>

<p>嗯，我的想法是首先在虚拟机XP里面安插一个间谍，如果看到泡泡有新的消息到了，就通知虚拟机外面的Linux说有情报了。那怎么通知呢？我们可以通过HTTP协议来交流吧，这样比较简单，我们在Linux用tornado搭一个服务器，使用pynotify来进行弹窗通知。然后虚拟机XP里面有消息的话，就直接通过HTTP协议通知。好，那我们赶紧开工吧。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/08/tips.png"><img src="http://everet.org/wp-content/uploads/2012/08/tips.png" alt="" /></a></p>

<p>啦啦啦啦啦，看上去可以工作。自从用了这个提示外挂，我再也不用每隔一会儿切换到虚拟机所在虚拟桌面去查看了，^_^，变相提高工作效率，减小了上下文切换的开销。</p>

<p>目前我在Ubuntu与XP下使用，其他的还没试过，不过这个应该都是通用的。使用时先编辑一下windowsplugin.py里面的虚拟机宿主的IP，然后将windowsplugin.py放到Windows的启动项，将notify.py放到Linux的启动项即可。</p>

<p>目前的版本是通过轮询监控泡泡的窗口，将来有空的话我会继续开发后续版本。后续版本将会进行DLL Hook，争取可以拿到新消息内容。加油～～</p>

<h2 id="section">依赖包</h2>

<p>在Linux宿主需要安装libnotify用户飘窗提示，在Windows需要安装win32gui，其中Win32 Python2.7的win32gui已经附在后面的下载地址里面了。</p>

<p>多谢宇哥，我才发现原来在KDE下pynotify已经换了名字了。</p>

<p>最后，是下载地址啦：<a href="https://github.com/cedricporter/popo-plugin/tags">https://github.com/cedricporter/popo-plugin/tags</a>。</p>

<p>项目是开源的，有兴趣的同学来一起完善吧～～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下自动异地备份数据库]]></title>
    <link href="http://everet.org/2012/06/ubuntu-mysql-backup.html"/>
    <updated>2012-06-10T03:57:02+08:00</updated>
    <id>http://everet.org/2012/06/ubuntu-mysql-backup</id>
    <content type="html"><![CDATA[<p>想必大家自己用<a href="http://everet.org/2012/06/ubuntu-mysql-backup.html">VPS</a>的时候，可能对人工备份都不那么勤快。但是备份确实十分的重要，当服务器硬盘彻底废了、数据库被骇客篡改，此时备份就显得格外的重要。</p>

<p>特别是对于还承载着别人的VPS，我们更需要做好备份。像<a href="http://www.kidsang.com/">屠文翔同学</a>将自己辛苦翻译《Game Engine Architecture》贴在wordpress博客上，万一哪天服务器的数据库废了，文章找不到了，我该如何面对屠文翔同学啊，所以备份就必不可少了。</p>

<p>我们或许只要一次编程的努力就可以让日后的备份一劳永逸。</p>

<p>嗯，我们可以用脚本将整个数据库dump下来变成文件，放在服务器上作为备份，这样的本地备份万一服务器的数据遭遇了不可恢复的灾难那就悲剧了。所以我们可以寻求异地备份，将备份放置到其他机器上面。</p>

<h2 id="section">异地备份</h2>

<h3 id="more---">方法一<!-- more --></h3>

<p>我们有空的时候，打开自己的电脑，然后从服务器上面将备份下载回自己的电脑保存。</p>

<p>评论：这样的方法未免有点2B，而且效率实在太低。备份的版本还需要自己保存。真是麻烦。</p>

<h3 id="section-1">方法二</h3>

<p>让服务器将数据库备份到其他服务器上面。</p>

<p>评论：这方法不错，怎么可以比较廉价地实施呢？</p>

<p>我们可以用邮件将我们的数据库备份发送到自己的邮箱。</p>

<p>像Gmail有10GB的空间，QQ邮箱更是无限容量，不够了可以免费扩容。于是乎，邮箱是个非常好的异地备份存放点。而且邮件本来就是一封一封的，我们可以方便地将不同时期的版本下回来比较。此外，我们还可以在邮箱设置收件规则，自动将我们的备份邮件标记为已读并放置到分类到备份文件夹中，这样就不会扰乱我们的正常邮件了。</p>

<h2 id="section-2">实施</h2>

<p>我们可以使用Python来把数据库dump下来，然后压缩，发送到自己的邮箱。然后周期性运行我们可以借助cron按照时间表来运行我们的备份任务。</p>

<h3 id="cron">cron</h3>

<p>首先我们看看如果配置cron运行我们的周期性备份。</p>

<p>cron的配置文件是<strong>/etc/crontab</strong></p>

<p>每个非注释行代表一个命令：</p>

<blockquote>
  <p><em>minute hour day month weekday username command</em></p>
</blockquote>

<p>我们可以加入如下行，</p>

<blockquote>
  <p>30 4 * * 1,3,4 root /etc/apache2/db/backup.py</p>
</blockquote>

<p>意思是每周一三四凌晨4点30分运行我们的备份程序。</p>

<p>修改完配置后我们重启一下cron。</p>

<blockquote>
  <p>service cron restart</p>
</blockquote>

<h3 id="python">Python</h3>

<p>下面的Python代码是备份整个数据库，然后将备份以附件形式发送到指定邮箱。</p>

<p>我们在用mysqldump将数据库dump下来后再用gzip压缩一下，对于我们的数据库原来是35MB，用gzip压缩后就只有5MB，小了很多。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>python  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># website: http://EverET.org</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">smtplib</span><span class="o">,</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">email.MIMEMultipart</span> <span class="kn">import</span> <span class="n">MIMEMultipart</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">email.MIMEBase</span> <span class="kn">import</span> <span class="n">MIMEBase</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">email.MIMEText</span> <span class="kn">import</span> <span class="n">MIMEText</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">email.Utils</span> <span class="kn">import</span> <span class="n">COMMASPACE</span><span class="p">,</span> <span class="n">formatdate</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">email</span> <span class="kn">import</span> <span class="n">Encoders</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span><span class="o">,</span> <span class="nn">time</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">send_mail</span><span class="p">(</span><span class="n">send_from</span><span class="p">,</span> <span class="n">send_to</span><span class="p">,</span> <span class="n">subject</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span>
</span><span class='line'>        <span class="n">files</span><span class="o">=</span><span class="p">[],</span> <span class="n">server</span><span class="o">=</span><span class="err">”</span><span class="n">localhost</span><span class="err">”</span><span class="p">):</span>
</span><span class='line'>    <span class="k">assert</span> <span class="nb">type</span><span class="p">(</span><span class="n">send_to</span><span class="p">)</span><span class="o">==</span><span class="nb">list</span>
</span><span class='line'>    <span class="k">assert</span> <span class="nb">type</span><span class="p">(</span><span class="n">files</span><span class="p">)</span><span class="o">==</span><span class="nb">list</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">msg</span> <span class="o">=</span> <span class="n">MIMEMultipart</span><span class="p">()</span>
</span><span class='line'><span class="n">msg</span><span class="p">[</span><span class="s">&#39;From&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">send_from</span>
</span><span class='line'><span class="n">msg</span><span class="p">[</span><span class="s">&#39;To&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">COMMASPACE</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">send_to</span><span class="p">)</span>
</span><span class='line'><span class="n">msg</span><span class="p">[</span><span class="s">&#39;Date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">formatdate</span><span class="p">(</span><span class="n">localtime</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">msg</span><span class="p">[</span><span class="s">&#39;Subject&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class='line'>
</span><span class='line'><span class="n">msg</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span> <span class="n">MIMEText</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class='line'>    <span class="n">part</span> <span class="o">=</span> <span class="n">MIMEBase</span><span class="p">(</span><span class="s">&#39;application&#39;</span><span class="p">,</span> <span class="s">&quot;octet-stream&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">part</span><span class="o">.</span><span class="n">set_payload</span><span class="p">(</span> <span class="nb">open</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="s">&quot;rb&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">Encoders</span><span class="o">.</span><span class="n">encode_base64</span><span class="p">(</span><span class="n">part</span><span class="p">)</span>
</span><span class='line'>    <span class="n">part</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">&#39;Content-Disposition&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;attachment; filename=&quot;</span><span class="si">%s</span><span class="s">&quot;&#39;</span>
</span><span class='line'>            <span class="o">%</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">f</span><span class="p">))</span>
</span><span class='line'>    <span class="n">msg</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">part</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">smtp</span> <span class="o">=</span> <span class="n">smtplib</span><span class="o">.</span><span class="n">SMTP</span><span class="p">(</span><span class="n">server</span><span class="p">)</span>
</span><span class='line'><span class="n">smtp</span><span class="o">.</span><span class="n">sendmail</span><span class="p">(</span><span class="n">send_from</span><span class="p">,</span> <span class="n">send_to</span><span class="p">,</span> <span class="n">msg</span><span class="o">.</span><span class="n">as_string</span><span class="p">())</span>
</span><span class='line'><span class="n">smtp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">backup</span><span class="p">():</span>
</span><span class='line'>    <span class="n">passwd</span><span class="o">=</span><span class="err">”</span><span class="n">your</span> <span class="n">password</span><span class="err">”</span>
</span><span class='line'>    <span class="n">user</span><span class="o">=</span><span class="err">’</span><span class="n">root</span><span class="err">’</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">(</span>
</span><span class='line'>            <span class="err">‘</span><span class="s">&#39;’mysqldump -u </span><span class="si">%s</span><span class="s"> -p”</span><span class="si">%s</span><span class="s">” –all-databases |</span>
</span><span class='line'>            <span class="n">gzip</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">db</span><span class="o">/</span><span class="nb">all</span><span class="o">.</span><span class="n">sql</span><span class="o">.</span><span class="n">gz</span><span class="err">’’’</span>
</span><span class='line'>            <span class="o">%</span> <span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">passwd</span><span class="p">),</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="err">‘</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">backup</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">send_mail</span><span class="p">(</span>
</span><span class='line'>            <span class="err">‘</span><span class="n">et</span><span class="nd">@everet.org</span><span class="err">’</span><span class="p">,</span>        <span class="c"># from mail</span>
</span><span class='line'>            <span class="p">[</span><span class="err">‘</span><span class="n">your</span><span class="nd">@mail.com</span><span class="err">’</span><span class="p">],</span>   <span class="c"># to mail</span>
</span><span class='line'>            <span class="err">‘</span><span class="nb">all</span> <span class="n">database</span> <span class="n">backup</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>            <span class="err">‘</span><span class="n">backup</span> <span class="n">time</span><span class="p">:</span><span class="o">%</span><span class="n">s</span><span class="err">’</span>
</span><span class='line'>            <span class="o">%</span> <span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">asctime</span><span class="p">()),</span> <span class="p">),</span>
</span><span class='line'>            <span class="p">[</span><span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">db</span><span class="o">/</span><span class="nb">all</span><span class="o">.</span><span class="n">sql</span><span class="o">.</span><span class="n">gz</span><span class="err">’</span><span class="p">])</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="err">‘</span><span class="n">error</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>因为我们数据库的密码是写在了脚本里面，所以我们需要修改权限，让仅自己可读，以提高安全性。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod 700 backup.py
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu下编译调试版的Python]]></title>
    <link href="http://everet.org/2012/05/compile-debug-python-in-ubuntu.html"/>
    <updated>2012-05-05T04:38:05+08:00</updated>
    <id>http://everet.org/2012/05/compile-debug-python-in-ubuntu</id>
    <content type="html"><![CDATA[<p>在Windows调试Python解释器还是非常方便的，因为有强大的VS。</p>

<p>不过在Linux下可能有点不那么顺畅。但是稍微设置一下还是可以很方便地调试的。我们来看看在Ubuntu下怎么做。</p>

<h2 id="section">获取源码</h2>

<p>在Ubuntu下获取Python2.7的源码非常方便，只需要使用apt-get就可以轻松取得。在Shell下输入</p>

<blockquote>
  <p>apt-get source python2.7</p>
</blockquote>

<p>即可以将Python的源码下载到当前目录。</p>

<p>然后我们就可以得到一个tar.gz的压缩包。</p>

<h2 id="section-1">编译</h2>

<p>我们进入源码文件夹后输入</p>

<p><code>
./configure
make
</code></p>

<p>然后就可以编译得到python。</p>

<p>当然，此时的Python不是调试版的，如果要编译调试版的Python，就需要再做一些东西。首先我们可以Google一下怎么做，貌似很多都是引用了源码README的一段话：<!-- more --></p>

<blockquote>
  <p>command; e.g. “make OPT=-g” will build a debugging version of Python
on most platforms. The default is OPT=-O; a value for OPT in the
environment when the configure script is run overrides this default
(likewise for CC; and the initial value for LIBS is used as the base
set of libraries to link with).</p>
</blockquote>

<p>好，我们现在使用</p>

<p><code>make OPT=-g</code></p>

<p>试试，嗯，确实用gdb可以调试了，不过单步的时候会在源码那里会一下在上一下在下地跳来跳去。而且查看变量值的时候很多变量显示的是<optimized out="">。原因是编译的时候优化了。那优化选项什么时候被加进去了？</optimized></p>

<p>我们来看看configure生成的Makefile中的一段。</p>

<p><code>
# Compiler options
OPT= -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes
BASECFLAGS= -fno-strict-aliasing
CFLAGS= $(BASECFLAGS) -g -O2 $(OPT) $(EXTRA_CFLAGS)
# Both CPPFLAGS and LDFLAGS need to contain the shell's value for setup.py to
# be able to build extension modules using the directories specified in the
# environment variables
CPPFLAGS= -I. -IInclude -I$(srcdir)/Include
</code></p>

<p>可以看到OPT的-O3已经被我们的OPT=-g参数覆盖掉了，不过还有一个-O2在CFLAGS那里。呃，原来源码的README还是不可靠的啊。</p>

<p>我们现在来重新编译：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>console  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">make clean</span>
</span><span class='line'><span class="go">make -j4 OPT=-g CFLAGS=-g</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这样编译的时候gcc就不会优化代码了。我们单步的时候就不会跳来跳去，变量的值也不会出现<code>&lt;optimized out&gt;</code>。</p>

<p>另外“-j4”选项是指开4个gcc编译，我是2核处理器，所以开4个gcc编译会快些。</p>

<p><a href="http://everet.org/wp-content/uploads/2012/05/Screenshot-from-2012-05-04-202058.png"><img src="http://everet.org/wp-content/uploads/2012/05/Screenshot-from-2012-05-04-202058.png" alt="" /></a></p>
]]></content>
  </entry>
  
</feed>
